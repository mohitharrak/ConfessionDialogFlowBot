{"version":3,"sources":["Enums/MessageDirection.tsx","Controls/Chatbot/MessageBox.tsx","Controls/Chatbot/MessagesList.tsx","Controls/Chatbot/Input.tsx","Controls/Chatbot/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MessageDirection","Incoming","Outgoing","MessageBox","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","button","event","props","onTriggerEvent","onSendMessage","payload","_this","react","className","message","direction","DocumentCard","style","backgroundColor","float","width","margin","DocumentCardDetails","DocumentCardActivity","activity","people","name","member","username","profileImageSrc","DocumentCardTitle","title","text","showAsSecondaryTitle","buttons","length","Stack","gap","padding","map","PrimaryButton","onClick","_buttonClick","bind","React","MessagesList","call","MessageBox_MessageBox","messages","m","_renderMessage","Input","state","e","setState","target","preventDefault","_this2","TextField","autoFocus","onChange","type","placeholder","onSubmit","client","ApiAiClient","accessToken","Chatbot","SendMessage","push","textRequest","then","_handleQueryResponse","assertThisInitialized","catch","error","console","log","TriggerEvent","eventRequest","alert","response","result","fulfillment","forEach","_showMessage","speech","MessagesList_MessagesList","Input_Input","App","react_default","a","createElement","Controls_Chatbot_Chatbot","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41f0eb6f.chunk.js","sourcesContent":["export const MessageDirection = {\r\n    Incoming : 0,\r\n    Outgoing: 1\r\n}\r\n\r\nexport default MessageDirection;","import * as React from \"react\";\r\nimport MessageDirection from \"../../Enums/MessageDirection\";\r\nimport { Persona, PersonaSize, PersonaPresence, DocumentCard, DocumentCardDetails, DocumentCardTitle, DocumentCardActivity, PrimaryButton, Stack } from \"office-ui-fabric-react\";\r\n\r\nexport class MessageBox extends React.Component<any, any> {\r\n\r\n    private _renderMessage() {\r\n\r\n    }\r\n\r\n    private _buttonClick(button: any) {\r\n\r\n        if (button.event) {\r\n            if (this.props.onTriggerEvent)\r\n                this.props.onTriggerEvent(button);\r\n        }\r\n        else\r\n            if (this.props.onSendMessage)\r\n                this.props.onSendMessage(button.payload);\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        //var className = this.props.message.direction == MessageDirection.Incoming ? \"Messages-message\" : \"Messages-message currentMember\";\r\n        return (\r\n            <div className=\"ms-Grid-col ms-sm12\">\r\n                {this.props.message.direction == MessageDirection.Incoming ?\r\n                    <DocumentCard\r\n                        style={{ 'backgroundColor': '#f4f7f9', 'float': 'left', 'width': '100%', 'margin': 10 }} >\r\n                        <DocumentCardDetails>\r\n                            <DocumentCardActivity\r\n                                activity=\"0 minutes ago\"\r\n                                people={[{ name: this.props.message.member.username, profileImageSrc: '' }]}\r\n                            />\r\n                            <DocumentCardTitle className='message-box-text' title={this.props.message.text} showAsSecondaryTitle={true} />\r\n                            {this.props.message.buttons && this.props.message.buttons.length > 0 &&\r\n                                <Stack gap={10} padding={10}>\r\n                                    {this.props.message.buttons.map((button: any) => {\r\n                                        return <PrimaryButton onClick={this._buttonClick.bind(this, button)} text={button.title}></PrimaryButton>\r\n                                    })}\r\n                                </Stack>\r\n                            }\r\n                            <div></div>\r\n                        </DocumentCardDetails>\r\n                    </DocumentCard>\r\n                    : <DocumentCard style={{ 'backgroundColor': '#f4f9f8', 'float': 'right', 'width': '100%', 'margin': 10 }}>\r\n                        <DocumentCardDetails>\r\n                            <DocumentCardActivity\r\n                                activity=\"10 minutes ago\"\r\n                                people={[{ name: 'Me', profileImageSrc: '' }]}\r\n                            />\r\n                            <DocumentCardTitle title={this.props.message.text} showAsSecondaryTitle={true} />\r\n                        </DocumentCardDetails>\r\n                    </DocumentCard>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { MessageBox } from \"./MessageBox\";\r\n\r\nexport class MessagesList extends React.Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n    private _renderMessage(message: any) {\r\n        return (\r\n            <MessageBox onSendMessage={this.props.onSendMessage} onTriggerEvent={this.props.onTriggerEvent} message={message}></MessageBox>\r\n        );\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"ms-Grid-row\" >\r\n                {this.props.messages.map((m: any) => this._renderMessage(m))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport { TextField, PrimaryButton } from \"office-ui-fabric-react\";\r\n\r\nexport class Input extends React.Component<any, any> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: \"\"\r\n        }\r\n    }\r\n\r\n    onChange(e: any) {\r\n        this.setState({ text: e.target.value });\r\n    }\r\n\r\n    onSubmit(e: any) {\r\n        e.preventDefault();\r\n        this.setState({ text: \"\" });\r\n        this.props.onSendMessage(this.state.text);\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"ms-Grid-row\">\r\n                <div className=\"ms-Grid-col ms-sm12\">\r\n                    <div style={{ 'float': 'left', 'width': 'calc(100% - 80px)' }}>\r\n                        <TextField\r\n                            autoFocus={true}\r\n                            onChange={e => this.onChange(e)}\r\n                            value={this.state.text}\r\n                            type=\"multiline\"\r\n                            placeholder=\"Enter your message and click Send\"\r\n                        />\r\n                    </div>\r\n                    <PrimaryButton onClick={this.onSubmit.bind(this)} text=\"Send\"></PrimaryButton>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","//@ts-ignore\r\nimport * as React from \"react\";\r\nimport { MessagesList } from \"./MessagesList\";\r\n\r\nimport './Chatbot.css';\r\nimport { Input } from \"./Input\";\r\nimport MessageDirection from \"../../Enums/MessageDirection\";\r\nimport { ApiAiClient } from \"api-ai-javascript\";\r\n\r\nconst client = new ApiAiClient({ accessToken: 'ba8b1e5dad804cbfbd1bd9d1fcc08991' })\r\n\r\nexport class Chatbot extends React.Component<any, any> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        client.eventRequest('Welcome')\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                alert('error');\r\n                console.log(error);\r\n            })\r\n\r\n        this.state = {\r\n            messages: [\r\n\r\n            ],\r\n            member: {\r\n                username: 'Me'\r\n            }\r\n        }\r\n    }\r\n\r\n    private _showMessage(message: any) {\r\n        let messages = this.state.messages;\r\n\r\n        messages.push(message);\r\n\r\n        this.setState({ messages: messages });\r\n    }\r\n\r\n    private _handleQueryResponse(response: any) {\r\n        if (response.result && response.result.fulfillment && response.result.fulfillment.messages) {\r\n            response.result.fulfillment.messages.forEach((m) => {\r\n                if (m.type == 4) {\r\n                    console.log(m);\r\n\r\n                    var message = m.payload;\r\n                    message.member = {\r\n                        username: \"Confession Bot\"\r\n                    };\r\n                    message.direction = MessageDirection.Incoming;\r\n\r\n                    this._showMessage(message);\r\n                }\r\n                else if (m.type == 0) {\r\n                    console.log(m);\r\n\r\n                    var message: any = {\r\n                        \"text\": m.speech\r\n                    };\r\n                    message.member = {\r\n                        username: \"Confession Bot\"\r\n                    };\r\n                    message.direction = MessageDirection.Incoming;\r\n\r\n                    this._showMessage(message);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    SendMessage = (message: string) => {\r\n        const messages = this.state.messages\r\n        messages.push({\r\n            text: message,\r\n            member: this.state.member,\r\n            direction: MessageDirection.Outgoing\r\n        })\r\n        this.setState({ messages: messages })\r\n\r\n        client.textRequest(message)\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    TriggerEvent = (message: any) => {\r\n        debugger;\r\n        const messages = this.state.messages\r\n        messages.push({\r\n            text: message.payload,\r\n            member: this.state.member,\r\n            direction: MessageDirection.Outgoing\r\n        })\r\n        this.setState({ messages: messages })\r\n\r\n        client.eventRequest(message.event, {})\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (<div>\r\n            <MessagesList onSendMessage={this.SendMessage.bind(this)}  onTriggerEvent={this.TriggerEvent.bind(this)} messages={this.state.messages}></MessagesList>\r\n            <Input onSendMessage={this.SendMessage}></Input>\r\n        </div>);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  DocumentCard\n} from \"office-ui-fabric-react/lib\";\nimport { Chatbot } from './Controls/Chatbot';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"ms-Grid-row\">\n          <div className=\"ms-Grid-col ms-sm12\">\n\n            <Chatbot></Chatbot>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './Assets/fabric.css';\nimport './Controls/Chatbot/Chatbot.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}