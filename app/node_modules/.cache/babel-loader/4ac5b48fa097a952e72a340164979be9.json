{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/* tslint:disable */\n\nimport * as React from 'react';\n/* tslint:enable */\n\nimport { BaseComponent, KeyCodes, getId, getNativeProps, inputProperties, css } from '../../../../Utilities';\nimport * as stylesImport from './EditingItem.scss'; // tslint:disable-next-line:no-any\n\nvar styles = stylesImport;\n\nvar EditingItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(EditingItem, _super);\n\n  function EditingItem(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._editingFloatingPicker = React.createRef();\n\n    _this._renderEditingSuggestions = function () {\n      var FloatingPicker = _this.props.onRenderFloatingPicker;\n      var floatingPickerProps = _this.props.floatingPickerProps;\n\n      if (!FloatingPicker || !floatingPickerProps) {\n        return React.createElement(React.Fragment, null);\n      }\n\n      return React.createElement(FloatingPicker, tslib_1.__assign({\n        componentRef: _this._editingFloatingPicker,\n        onChange: _this._onSuggestionSelected,\n        inputElement: _this._editingInput,\n        selectedItems: []\n      }, floatingPickerProps));\n    };\n\n    _this._resolveInputRef = function (ref) {\n      _this._editingInput = ref;\n\n      _this.forceUpdate(function () {\n        _this._editingInput.focus();\n      });\n    };\n\n    _this._onInputClick = function () {\n      _this._editingFloatingPicker.current && _this._editingFloatingPicker.current.showPicker(true\n      /*updatevalue*/\n      );\n    };\n\n    _this._onInputBlur = function (ev) {\n      if (_this._editingFloatingPicker.current && ev.relatedTarget !== null) {\n        var target = ev.relatedTarget;\n\n        if (target.className.indexOf('ms-Suggestions-itemButton') === -1 && target.className.indexOf('ms-Suggestions-sectionButton') === -1) {\n          _this._editingFloatingPicker.current.forceResolveSuggestion();\n        }\n      }\n    };\n\n    _this._onInputChange = function (ev) {\n      var value = ev.target.value;\n\n      if (value === '') {\n        if (_this.props.onRemoveItem) {\n          _this.props.onRemoveItem();\n        }\n      } else {\n        _this._editingFloatingPicker.current && _this._editingFloatingPicker.current.onQueryStringChanged(value);\n      }\n    };\n\n    _this._onSuggestionSelected = function (item) {\n      _this.props.onEditingComplete(_this.props.item, item);\n    };\n\n    _this.state = {\n      contextualMenuVisible: false\n    };\n    return _this;\n  }\n\n  EditingItem.prototype.componentDidMount = function () {\n    var getEditingItemText = this.props.getEditingItemText;\n    var itemText = getEditingItemText(this.props.item);\n    this._editingFloatingPicker.current && this._editingFloatingPicker.current.onQueryStringChanged(itemText);\n    this._editingInput.value = itemText;\n\n    this._editingInput.focus();\n  };\n\n  EditingItem.prototype.render = function () {\n    var itemId = getId();\n    var nativeProps = getNativeProps(this.props, inputProperties);\n    return React.createElement(\"div\", {\n      \"aria-labelledby\": 'editingItemPersona-' + itemId,\n      className: css('ms-EditingItem', styles.editingContainer)\n    }, React.createElement(\"input\", tslib_1.__assign({}, nativeProps, {\n      ref: this._resolveInputRef,\n      autoCapitalize: 'off',\n      autoComplete: 'off',\n      onChange: this._onInputChange,\n      onKeyDown: this._onInputKeyDown,\n      onBlur: this._onInputBlur,\n      onClick: this._onInputClick,\n      \"data-lpignore\": true,\n      className: styles.editingInput,\n      id: itemId\n    })), this._renderEditingSuggestions());\n  };\n\n  EditingItem.prototype._onInputKeyDown = function (ev) {\n    if (ev.which === KeyCodes.backspace || ev.which === KeyCodes.del) {\n      ev.stopPropagation();\n    }\n  };\n\n  return EditingItem;\n}(BaseComponent);\n\nexport { EditingItem };","map":null,"metadata":{},"sourceType":"module"}