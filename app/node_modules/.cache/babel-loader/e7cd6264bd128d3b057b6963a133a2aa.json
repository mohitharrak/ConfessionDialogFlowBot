{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Image } from '../../../Image';\nimport { Icon } from '../../../Icon';\nimport { BaseComponent, classNamesFunction, getNativeProps, inputProperties, css } from '../../../Utilities';\nvar getClassNames = classNamesFunction();\n\nvar ChoiceGroupOptionBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ChoiceGroupOptionBase, _super);\n\n  function ChoiceGroupOptionBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._inputElement = React.createRef();\n\n    _this._onRenderField = function (props) {\n      var _a = props.onRenderLabel,\n          onRenderLabel = _a === void 0 ? _this._onRenderLabel : _a,\n          id = props.id,\n          imageSrc = props.imageSrc,\n          imageAlt = props.imageAlt,\n          selectedImageSrc = props.selectedImageSrc,\n          iconProps = props.iconProps;\n      var imageSize = props.imageSize ? props.imageSize : {\n        width: 32,\n        height: 32\n      };\n      return React.createElement(\"label\", {\n        htmlFor: id,\n        className: _this._classNames.field\n      }, imageSrc && React.createElement(\"div\", {\n        className: _this._classNames.innerField,\n        style: {\n          height: imageSize.height,\n          width: imageSize.width\n        }\n      }, React.createElement(\"div\", {\n        className: _this._classNames.imageWrapper\n      }, React.createElement(Image, {\n        src: imageSrc,\n        alt: imageAlt ? imageAlt : '',\n        width: imageSize.width,\n        height: imageSize.height\n      })), React.createElement(\"div\", {\n        className: _this._classNames.selectedImageWrapper\n      }, React.createElement(Image, {\n        src: selectedImageSrc,\n        alt: imageAlt ? imageAlt : '',\n        width: imageSize.width,\n        height: imageSize.height\n      }))), iconProps ? React.createElement(\"div\", {\n        className: _this._classNames.innerField\n      }, React.createElement(\"div\", {\n        className: _this._classNames.iconWrapper\n      }, React.createElement(Icon, tslib_1.__assign({}, iconProps)))) : null, imageSrc || iconProps ? React.createElement(\"div\", {\n        className: _this._classNames.labelWrapper,\n        style: {\n          maxWidth: imageSize.width * 2\n        }\n      }, onRenderLabel(props)) : onRenderLabel(props));\n    };\n\n    _this._onRenderLabel = function (props) {\n      return React.createElement(\"span\", {\n        id: props.labelId,\n        className: \"ms-ChoiceFieldLabel\"\n      }, props.text);\n    };\n\n    return _this;\n  }\n\n  ChoiceGroupOptionBase.prototype.render = function () {\n    var _a = this.props,\n        ariaLabel = _a.ariaLabel,\n        focused = _a.focused,\n        required = _a.required,\n        theme = _a.theme,\n        iconProps = _a.iconProps,\n        imageSrc = _a.imageSrc,\n        _b = _a.imageSize,\n        imageSize = _b === void 0 ? {\n      width: 32,\n      height: 32\n    } : _b,\n        disabled = _a.disabled,\n        checked = _a.checked,\n        id = _a.id,\n        styles = _a.styles,\n        name = _a.name,\n        _c = _a.onRenderField,\n        onRenderField = _c === void 0 ? this._onRenderField : _c,\n        rest = tslib_1.__rest(_a, [\"ariaLabel\", \"focused\", \"required\", \"theme\", \"iconProps\", \"imageSrc\", \"imageSize\", \"disabled\", \"checked\", \"id\", \"styles\", \"name\", \"onRenderField\"]);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      hasIcon: !!iconProps,\n      hasImage: !!imageSrc,\n      checked: checked,\n      disabled: disabled,\n      imageIsLarge: !!imageSrc && (imageSize.width > 71 || imageSize.height > 71),\n      focused: focused\n    });\n\n    var _d = getNativeProps(rest, inputProperties),\n        className = _d.className,\n        nativeProps = tslib_1.__rest(_d, [\"className\"]);\n\n    return React.createElement(\"div\", {\n      className: this._classNames.root\n    }, React.createElement(\"div\", {\n      className: this._classNames.choiceFieldWrapper\n    }, React.createElement(\"input\", tslib_1.__assign({\n      \"aria-label\": ariaLabel ? ariaLabel : undefined,\n      ref: this._inputElement,\n      id: id,\n      className: css(this._classNames.input, className),\n      type: \"radio\",\n      name: name,\n      disabled: disabled,\n      checked: checked,\n      required: required,\n      onChange: this._onChange.bind(this, this.props),\n      onFocus: this._onFocus.bind(this, this.props),\n      onBlur: this._onBlur.bind(this, this.props)\n    }, nativeProps)), onRenderField(this.props, this._onRenderField)));\n  };\n\n  ChoiceGroupOptionBase.prototype._onChange = function (props, evt) {\n    var onChange = props.onChange;\n\n    if (onChange) {\n      onChange(evt, props);\n    }\n  };\n\n  ChoiceGroupOptionBase.prototype._onBlur = function (props, evt) {\n    var onBlur = props.onBlur;\n\n    if (onBlur) {\n      onBlur(evt, props);\n    }\n  };\n\n  ChoiceGroupOptionBase.prototype._onFocus = function (props, evt) {\n    var onFocus = props.onFocus;\n\n    if (onFocus) {\n      onFocus(evt, props);\n    }\n  };\n\n  return ChoiceGroupOptionBase;\n}(BaseComponent);\n\nexport { ChoiceGroupOptionBase };","map":null,"metadata":{},"sourceType":"module"}