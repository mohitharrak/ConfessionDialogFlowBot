{"ast":null,"code":"import _classCallCheck from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\src\\\\Controls\\\\Chatbot\\\\index.tsx\";\n//@ts-ignore\nimport * as React from \"react\";\nimport { MessagesList } from \"./MessagesList\";\nimport './Chatbot.css';\nimport { Input } from \"./Input\";\nimport MessageDirection from \"../../Enums/MessageDirection\";\nimport { ApiAiClient } from \"api-ai-javascript\";\nvar client = new ApiAiClient({\n  accessToken: 'ba8b1e5dad804cbfbd1bd9d1fcc08991'\n});\nexport var Chatbot =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chatbot, _React$Component);\n\n  function Chatbot(props) {\n    var _this;\n\n    _classCallCheck(this, Chatbot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chatbot).call(this, props));\n\n    _this.SendMessage = function (message) {\n      var messages = _this.state.messages;\n      messages.push({\n        text: message,\n        member: _this.state.member,\n        direction: MessageDirection.Outgoing\n      });\n\n      _this.setState({\n        messages: messages\n      });\n\n      client.textRequest(message).then(_this._handleQueryResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)))).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.TriggerEvent = function (message) {\n      var messages = _this.state.messages;\n      messages.push({\n        text: message.payload,\n        member: _this.state.member,\n        direction: MessageDirection.Outgoing\n      });\n\n      _this.setState({\n        messages: messages\n      });\n\n      client.eventRequest(message.event, {}).then(_this._handleQueryResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)))).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    client.eventRequest('Welcome').then(_this._handleQueryResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)))).catch(function (error) {\n      alert('error');\n      console.log(error);\n    });\n    _this.state = {\n      messages: [],\n      member: {\n        username: 'Me'\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Chatbot, [{\n    key: \"_showMessage\",\n    value: function _showMessage(message) {\n      var messages = this.state.messages;\n      messages.push(message);\n      this.setState({\n        messages: messages\n      });\n    }\n  }, {\n    key: \"_handleQueryResponse\",\n    value: function _handleQueryResponse(response) {\n      var _this2 = this;\n\n      if (response.result && response.result.fulfillment && response.result.fulfillment.messages) {\n        response.result.fulfillment.messages.forEach(function (m) {\n          if (m.type == 4) {\n            console.log(m);\n            var message = m.payload;\n            message.member = {\n              username: \"Confession Bot\"\n            };\n            message.direction = MessageDirection.Incoming;\n\n            _this2._showMessage(message);\n          } else if (m.type == 0) {\n            console.log(m);\n            var message = {\n              \"text\": m.speech\n            };\n            message.member = {\n              username: \"Confession Bot\"\n            };\n            message.direction = MessageDirection.Incoming;\n\n            _this2._showMessage(message);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(MessagesList, {\n        onSendMessage: this.SendMessage,\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(Input, {\n        onSendMessage: this.SendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chatbot;\n}(React.Component);","map":{"version":3,"sources":["E:\\Projects\\David MacDougall\\source code\\ConfessionDialogFlowBot\\app\\src\\Controls\\Chatbot\\index.tsx"],"names":["React","MessagesList","Input","MessageDirection","ApiAiClient","client","accessToken","Chatbot","props","SendMessage","message","messages","state","push","text","member","direction","Outgoing","setState","textRequest","then","_handleQueryResponse","bind","catch","error","console","log","TriggerEvent","payload","eventRequest","event","alert","username","response","result","fulfillment","forEach","m","type","Incoming","_showMessage","speech","Component"],"mappings":"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","sourcesContent":["//@ts-ignore\r\nimport * as React from \"react\";\r\nimport { MessagesList } from \"./MessagesList\";\r\n\r\nimport './Chatbot.css';\r\nimport { Input } from \"./Input\";\r\nimport MessageDirection from \"../../Enums/MessageDirection\";\r\nimport { ApiAiClient } from \"api-ai-javascript\";\r\n\r\nconst client = new ApiAiClient({ accessToken: 'ba8b1e5dad804cbfbd1bd9d1fcc08991' })\r\n\r\nexport class Chatbot extends React.Component<any, any> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        client.eventRequest('Welcome')\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                alert('error');\r\n                console.log(error);\r\n            })\r\n\r\n        this.state = {\r\n            messages: [\r\n\r\n            ],\r\n            member: {\r\n                username: 'Me'\r\n            }\r\n        }\r\n    }\r\n\r\n    private _showMessage(message: any) {\r\n        let messages = this.state.messages;\r\n\r\n        messages.push(message);\r\n\r\n        this.setState({ messages: messages });\r\n    }\r\n\r\n    private _handleQueryResponse(response: any) {\r\n        if (response.result && response.result.fulfillment && response.result.fulfillment.messages) {\r\n            response.result.fulfillment.messages.forEach((m) => {\r\n                if (m.type == 4) {\r\n                    console.log(m);\r\n\r\n                    var message = m.payload;\r\n                    message.member = {\r\n                        username: \"Confession Bot\"\r\n                    };\r\n                    message.direction = MessageDirection.Incoming;\r\n\r\n                    this._showMessage(message);\r\n                }\r\n                else if (m.type == 0) {\r\n                    console.log(m);\r\n\r\n                    var message: any = {\r\n                        \"text\": m.speech\r\n                    };\r\n                    message.member = {\r\n                        username: \"Confession Bot\"\r\n                    };\r\n                    message.direction = MessageDirection.Incoming;\r\n\r\n                    this._showMessage(message);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    SendMessage = (message: string) => {\r\n        const messages = this.state.messages\r\n        messages.push({\r\n            text: message,\r\n            member: this.state.member,\r\n            direction: MessageDirection.Outgoing\r\n        })\r\n        this.setState({ messages: messages })\r\n\r\n        client.textRequest(message)\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    TriggerEvent = (message: any) => {\r\n        const messages = this.state.messages\r\n        messages.push({\r\n            text: message.payload,\r\n            member: this.state.member,\r\n            direction: MessageDirection.Outgoing\r\n        })\r\n        this.setState({ messages: messages })\r\n\r\n        client.eventRequest(message.event, {})\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (<div>\r\n            <MessagesList onSendMessage={this.SendMessage} messages={this.state.messages}></MessagesList>\r\n            <Input onSendMessage={this.SendMessage}></Input>\r\n        </div>);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}