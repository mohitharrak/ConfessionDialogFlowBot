{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, getId, toMatrix, classNamesFunction, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { FocusZone } from '../../FocusZone';\nvar getClassNames = classNamesFunction();\n\nvar GridBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GridBase, _super);\n\n  function GridBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._id = getId();\n    return _this;\n  }\n\n  GridBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        items = _a.items,\n        columnCount = _a.columnCount,\n        onRenderItem = _a.onRenderItem,\n        positionInSet = _a.positionInSet,\n        setSize = _a.setSize,\n        styles = _a.styles;\n    var htmlProps = getNativeProps(this.props, htmlElementProperties, ['onBlur, aria-posinset, aria-setsize']);\n    var classNames = getClassNames(styles, {\n      theme: this.props.theme\n    }); // Array to store the cells in the correct row index\n\n    var rowsOfItems = toMatrix(items, columnCount);\n    var content = React.createElement(\"table\", tslib_1.__assign({}, htmlProps, {\n      \"aria-posinset\": positionInSet,\n      \"aria-setsize\": setSize,\n      id: this._id,\n      role: 'grid',\n      className: classNames.root\n    }), React.createElement(\"tbody\", null, rowsOfItems.map(function (rows, rowIndex) {\n      return React.createElement(\"tr\", {\n        role: 'row',\n        key: _this._id + '-' + rowIndex + '-row'\n      }, rows.map(function (cell, cellIndex) {\n        return React.createElement(\"td\", {\n          role: 'presentation',\n          key: _this._id + '-' + cellIndex + '-cell',\n          className: classNames.tableCell\n        }, onRenderItem(cell, cellIndex));\n      }));\n    }))); // Create the table/grid\n\n    return this.props.doNotContainWithinFocusZone ? content : React.createElement(FocusZone, {\n      isCircularNavigation: this.props.shouldFocusCircularNavigate,\n      className: classNames.focusedContainer,\n      onBlur: this.props.onBlur\n    }, content);\n  };\n\n  return GridBase;\n}(BaseComponent);\n\nexport { GridBase };","map":null,"metadata":{},"sourceType":"module"}