{"ast":null,"code":"import _classCallCheck from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\src\\\\Controls\\\\Chatbot\\\\index.tsx\";\n//@ts-ignore\nimport * as React from \"react\";\nimport { MessagesList } from \"./MessagesList\";\nimport './Chatbot.css';\nimport { Input } from \"./Input\";\nimport MessageDirection from \"../../Enums/MessageDirection\";\nimport { ApiAiClient } from \"api-ai-javascript\";\nvar client = new ApiAiClient({\n  accessToken: 'ba8b1e5dad804cbfbd1bd9d1fcc08991'\n});\nexport var Chatbot =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Chatbot, _React$Component);\n\n  _createClass(Chatbot, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scrollToBottom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.scrollToBottom();\n    }\n  }]);\n\n  function Chatbot(props) {\n    var _this;\n\n    _classCallCheck(this, Chatbot);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chatbot).call(this, props));\n\n    _this.scrollToBottom = function () {\n      window.scrollTo(0, document.body.scrollHeight);\n    };\n\n    _this._decodeMessage = function (text) {\n      var message = {};\n\n      try {\n        var text2 = text.replace(/#\\(/g, \"{\").replace(/\\)#/g, \"}\");\n        message = JSON.parse(text2);\n      } catch (e) {\n        message = {\n          \"text\": text\n        };\n      }\n\n      return message;\n    };\n\n    _this.SendMessage = function (message) {\n      _this._showMessage({\n        text: message,\n        member: _this.state.member,\n        direction: MessageDirection.Outgoing\n      });\n\n      client.textRequest(message).then(_this._handleQueryResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)))).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.TriggerEvent = function (message) {\n      _this._showMessage({\n        text: message.payload,\n        member: _this.state.member,\n        direction: MessageDirection.Outgoing\n      });\n\n      client.eventRequest(message.event, {}).then(_this._handleQueryResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)))).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    client.eventRequest('Welcome').then(_this._handleQueryResponse.bind(_assertThisInitialized(_assertThisInitialized(_this)))).catch(function (error) {\n      alert('error');\n      console.log(error);\n    });\n    _this.state = {\n      messages: [],\n      member: {\n        username: 'Me'\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Chatbot, [{\n    key: \"_showMessage\",\n    value: function _showMessage(message) {\n      var messages = this.state.messages;\n      messages.push(message);\n      this.setState({\n        messages: messages\n      });\n    }\n  }, {\n    key: \"_handleQueryResponse\",\n    value: function _handleQueryResponse(response) {\n      var _this2 = this;\n\n      if (response.result && response.result.fulfillment && response.result.fulfillment.messages) {\n        response.result.fulfillment.messages.forEach(function (m) {\n          if (m.type == 4) {\n            console.log(m);\n            var message = m.payload;\n            message.member = {\n              username: \"Confession Bot\"\n            };\n            message.direction = MessageDirection.Incoming;\n\n            _this2._showMessage(message);\n          } else if (m.type == 0) {\n            debugger;\n            console.log(m);\n\n            var message = _this2._decodeMessage(m.speech);\n\n            message.member = {\n              username: \"Confession Bot\"\n            };\n            message.direction = MessageDirection.Incoming;\n\n            _this2._showMessage(message);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(MessagesList, {\n        onSendMessage: this.SendMessage.bind(this),\n        onTriggerEvent: this.TriggerEvent.bind(this),\n        messages: this.state.messages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(Input, {\n        onSendMessage: this.SendMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chatbot;\n}(React.Component);","map":{"version":3,"sources":["E:\\Projects\\David MacDougall\\source code\\ConfessionDialogFlowBot\\app\\src\\Controls\\Chatbot\\index.tsx"],"names":["React","MessagesList","Input","MessageDirection","ApiAiClient","client","accessToken","Chatbot","scrollToBottom","props","window","scrollTo","document","body","scrollHeight","_decodeMessage","text","message","text2","replace","JSON","parse","e","SendMessage","_showMessage","member","state","direction","Outgoing","textRequest","then","_handleQueryResponse","bind","catch","error","console","log","TriggerEvent","payload","eventRequest","event","alert","messages","username","push","setState","response","result","fulfillment","forEach","m","type","Incoming","speech","Component"],"mappings":"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","sourcesContent":["//@ts-ignore\r\nimport * as React from \"react\";\r\nimport { MessagesList } from \"./MessagesList\";\r\n\r\nimport './Chatbot.css';\r\nimport { Input } from \"./Input\";\r\nimport MessageDirection from \"../../Enums/MessageDirection\";\r\nimport { ApiAiClient } from \"api-ai-javascript\";\r\n\r\nconst client = new ApiAiClient({ accessToken: 'ba8b1e5dad804cbfbd1bd9d1fcc08991' })\r\n\r\nexport class Chatbot extends React.Component<any, any> {\r\n    scrollToBottom = () => {\r\n        window.scrollTo(0, document.body.scrollHeight);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        client.eventRequest('Welcome')\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                alert('error');\r\n                console.log(error);\r\n            })\r\n\r\n        this.state = {\r\n            messages: [\r\n\r\n            ],\r\n            member: {\r\n                username: 'Me'\r\n            }\r\n        }\r\n    }\r\n\r\n    private _showMessage(message: any) {\r\n        let messages = this.state.messages;\r\n\r\n        messages.push(message);\r\n\r\n        this.setState({ messages: messages });\r\n    }\r\n\r\n    private _handleQueryResponse(response: any) {\r\n        if (response.result && response.result.fulfillment && response.result.fulfillment.messages) {\r\n            response.result.fulfillment.messages.forEach((m) => {\r\n                if (m.type == 4) {\r\n                    console.log(m);\r\n\r\n                    var message = m.payload;\r\n                    message.member = {\r\n                        username: \"Confession Bot\"\r\n                    };\r\n                    message.direction = MessageDirection.Incoming;\r\n\r\n                    this._showMessage(message);\r\n                }\r\n                else if (m.type == 0) {\r\n                    debugger;\r\n                    console.log(m);\r\n\r\n                    var message: any = this._decodeMessage(m.speech);\r\n                    message.member = {\r\n                        username: \"Confession Bot\"\r\n                    };\r\n                    message.direction = MessageDirection.Incoming;\r\n\r\n                    this._showMessage(message);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    _decodeMessage = (text: string) => {\r\n        let message: any = {};\r\n        try {\r\n            let text2 = text.replace(/#\\(/g, \"{\").replace(/\\)#/g, \"}\");\r\n            message = JSON.parse(text2);\r\n        }\r\n        catch (e) {\r\n            message = {\r\n                \"text\": text\r\n            }\r\n        }\r\n        return message;\r\n    }\r\n\r\n    SendMessage = (message: string) => {\r\n        this._showMessage({\r\n            text: message,\r\n            member: this.state.member,\r\n            direction: MessageDirection.Outgoing\r\n        });\r\n\r\n        client.textRequest(message)\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    TriggerEvent = (message: any) => {\r\n        this._showMessage({\r\n            text: message.payload,\r\n            member: this.state.member,\r\n            direction: MessageDirection.Outgoing\r\n        });\r\n\r\n        client.eventRequest(message.event, {})\r\n            .then(this._handleQueryResponse.bind(this))\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (<div>\r\n            <MessagesList onSendMessage={this.SendMessage.bind(this)} onTriggerEvent={this.TriggerEvent.bind(this)} messages={this.state.messages}></MessagesList>\r\n            <Input onSendMessage={this.SendMessage}></Input>\r\n        </div>);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}