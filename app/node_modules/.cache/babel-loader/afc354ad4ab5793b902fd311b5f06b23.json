{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, buttonProperties, classNamesFunction, getId, getNativeProps } from '../../Utilities';\nimport { OverflowButtonType } from './Facepile.types';\nimport { FacepileButton } from './FacepileButton';\nimport { Icon } from '../../Icon';\nimport { Persona } from '../../Persona';\nimport { PersonaCoin, PersonaSize, PersonaInitialsColor } from '../../PersonaCoin';\nvar getClassNames = classNamesFunction();\n/**\r\n * FacePile with no default styles.\r\n * [Use the `styles` API to add your own styles.](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Component-Styling)\r\n */\n\nvar FacepileBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FacepileBase, _super);\n\n  function FacepileBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._classNames = getClassNames(_this.props.styles, {\n      theme: _this.props.theme,\n      className: _this.props.className\n    });\n    _this._ariaDescriptionId = getId();\n    return _this;\n  }\n\n  FacepileBase.prototype.render = function () {\n    var overflowButtonProps = this.props.overflowButtonProps;\n    var _a = this.props,\n        chevronButtonProps = _a.chevronButtonProps,\n        maxDisplayablePersonas = _a.maxDisplayablePersonas,\n        personas = _a.personas,\n        overflowPersonas = _a.overflowPersonas,\n        showAddButton = _a.showAddButton;\n    var _classNames = this._classNames; // Add a check to make sure maxDisplayalePersonas is defined to cover the edge case of it being 0.\n\n    var numPersonasToShow = typeof maxDisplayablePersonas === 'number' ? Math.min(personas.length, maxDisplayablePersonas) : personas.length; // Added for deprecating chevronButtonProps.  Can remove after v1.0\n\n    if (chevronButtonProps && !overflowButtonProps) {\n      overflowButtonProps = chevronButtonProps;\n    }\n\n    var hasOverflowPersonas = overflowPersonas && overflowPersonas.length > 0;\n    var personasPrimary = hasOverflowPersonas ? personas : personas.slice(0, numPersonasToShow);\n    var personasOverflow = (hasOverflowPersonas ? overflowPersonas : personas.slice(numPersonasToShow)) || [];\n    return React.createElement(\"div\", {\n      className: _classNames.root\n    }, this.onRenderAriaDescription(), React.createElement(\"div\", {\n      className: _classNames.itemContainer\n    }, showAddButton ? this._getAddNewElement() : null, React.createElement(\"ul\", {\n      className: _classNames.members,\n      role: \"listbox\"\n    }, this._onRenderVisiblePersonas(personasPrimary, personasOverflow.length === 0 && personas.length === 1)), overflowButtonProps ? this._getOverflowElement(personasOverflow) : null));\n  };\n\n  FacepileBase.prototype.onRenderAriaDescription = function () {\n    var ariaDescription = this.props.ariaDescription;\n    var _classNames = this._classNames; // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\n    // otherwise it will be assigned to descriptionSpan.\n\n    return ariaDescription && React.createElement(\"span\", {\n      className: _classNames.screenReaderOnly,\n      id: this._ariaDescriptionId\n    }, ariaDescription);\n  };\n\n  FacepileBase.prototype._onRenderVisiblePersonas = function (personas, singlePersona) {\n    var _this = this;\n\n    return personas.map(function (persona, index) {\n      var personaControl = singlePersona ? _this._getPersonaControl(persona) : _this._getPersonaCoinControl(persona);\n      return React.createElement(\"li\", {\n        role: \"option\",\n        key: (singlePersona ? 'persona' : 'personaCoin') + \"-\" + index,\n        className: _this._classNames.member\n      }, persona.onClick ? _this._getElementWithOnClickEvent(personaControl, persona, index) : _this._getElementWithoutOnClickEvent(personaControl, persona, index));\n    });\n  };\n\n  FacepileBase.prototype._getPersonaControl = function (persona) {\n    var _a = this.props,\n        getPersonaProps = _a.getPersonaProps,\n        personaSize = _a.personaSize;\n    var personaStyles = {\n      details: {\n        flex: '1 0 auto'\n      }\n    };\n    return React.createElement(Persona, tslib_1.__assign({\n      imageInitials: persona.imageInitials,\n      imageUrl: persona.imageUrl,\n      initialsColor: persona.initialsColor,\n      allowPhoneInitials: persona.allowPhoneInitials,\n      text: persona.personaName,\n      size: personaSize\n    }, getPersonaProps ? getPersonaProps(persona) : null, {\n      styles: personaStyles\n    }));\n  };\n\n  FacepileBase.prototype._getPersonaCoinControl = function (persona) {\n    var _a = this.props,\n        getPersonaProps = _a.getPersonaProps,\n        personaSize = _a.personaSize;\n    return React.createElement(PersonaCoin, tslib_1.__assign({\n      imageInitials: persona.imageInitials,\n      imageUrl: persona.imageUrl,\n      initialsColor: persona.initialsColor,\n      allowPhoneInitials: persona.allowPhoneInitials,\n      text: persona.personaName,\n      size: personaSize\n    }, getPersonaProps ? getPersonaProps(persona) : null));\n  };\n\n  FacepileBase.prototype._getElementWithOnClickEvent = function (personaControl, persona, index) {\n    var keytipProps = persona.keytipProps;\n    return React.createElement(FacepileButton, tslib_1.__assign({}, getNativeProps(persona, buttonProperties), this._getElementProps(persona, index), {\n      keytipProps: keytipProps,\n      onClick: this._onPersonaClick.bind(this, persona)\n    }), personaControl);\n  };\n\n  FacepileBase.prototype._getElementWithoutOnClickEvent = function (personaControl, persona, index) {\n    return React.createElement(\"div\", tslib_1.__assign({}, getNativeProps(persona, buttonProperties), this._getElementProps(persona, index)), personaControl);\n  };\n\n  FacepileBase.prototype._getElementProps = function (persona, index) {\n    var _classNames = this._classNames;\n    return {\n      key: (!!persona.imageUrl ? 'i' : '') + index,\n      'data-is-focusable': true,\n      role: 'option',\n      className: _classNames.itemButton,\n      title: persona.personaName,\n      onMouseMove: this._onPersonaMouseMove.bind(this, persona),\n      onMouseOut: this._onPersonaMouseOut.bind(this, persona)\n    };\n  };\n\n  FacepileBase.prototype._getOverflowElement = function (personasOverflow) {\n    switch (this.props.overflowButtonType) {\n      case OverflowButtonType.descriptive:\n        return this._getDescriptiveOverflowElement(personasOverflow);\n\n      case OverflowButtonType.downArrow:\n        return this._getIconElement('ChevronDown');\n\n      case OverflowButtonType.more:\n        return this._getIconElement('More');\n\n      default:\n        return null;\n    }\n  };\n\n  FacepileBase.prototype._getDescriptiveOverflowElement = function (personasOverflow) {\n    var personaSize = this.props.personaSize;\n\n    if (!personasOverflow || personasOverflow.length < 1) {\n      return null;\n    }\n\n    var personaNames = personasOverflow.map(function (p) {\n      return p.personaName;\n    }).join(', ');\n\n    var overflowButtonProps = tslib_1.__assign({\n      title: personaNames\n    }, this.props.overflowButtonProps);\n\n    var numPersonasNotPictured = Math.max(personasOverflow.length, 0);\n    var _classNames = this._classNames;\n    return React.createElement(FacepileButton, tslib_1.__assign({}, overflowButtonProps, {\n      ariaDescription: overflowButtonProps.title,\n      className: _classNames.descriptiveOverflowButton\n    }), React.createElement(PersonaCoin, {\n      size: personaSize,\n      onRenderInitials: this._renderInitialsNotPictured(numPersonasNotPictured),\n      initialsColor: PersonaInitialsColor.transparent\n    }));\n  };\n\n  FacepileBase.prototype._getIconElement = function (icon) {\n    var _a = this.props,\n        overflowButtonProps = _a.overflowButtonProps,\n        personaSize = _a.personaSize;\n    var overflowInitialsIcon = true;\n    var _classNames = this._classNames;\n    return React.createElement(FacepileButton, tslib_1.__assign({}, overflowButtonProps, {\n      className: _classNames.overflowButton\n    }), React.createElement(PersonaCoin, {\n      size: personaSize,\n      onRenderInitials: this._renderInitials(icon, overflowInitialsIcon),\n      initialsColor: PersonaInitialsColor.transparent\n    }));\n  };\n\n  FacepileBase.prototype._getAddNewElement = function () {\n    var _a = this.props,\n        addButtonProps = _a.addButtonProps,\n        personaSize = _a.personaSize;\n    var _classNames = this._classNames;\n    return React.createElement(FacepileButton, tslib_1.__assign({}, addButtonProps, {\n      className: _classNames.addButton\n    }), React.createElement(PersonaCoin, {\n      size: personaSize,\n      onRenderInitials: this._renderInitials('AddFriend')\n    }));\n  };\n\n  FacepileBase.prototype._onPersonaClick = function (persona, ev) {\n    persona.onClick(ev, persona);\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  FacepileBase.prototype._onPersonaMouseMove = function (persona, ev) {\n    if (!!persona.onMouseMove) {\n      persona.onMouseMove(ev, persona);\n    }\n  };\n\n  FacepileBase.prototype._onPersonaMouseOut = function (persona, ev) {\n    if (!!persona.onMouseOut) {\n      persona.onMouseOut(ev, persona);\n    }\n  };\n\n  FacepileBase.prototype._renderInitials = function (iconName, overflowButton) {\n    var _classNames = this._classNames;\n    return function () {\n      return React.createElement(Icon, {\n        iconName: iconName,\n        className: overflowButton ? _classNames.overflowInitialsIcon : ''\n      });\n    };\n  };\n\n  FacepileBase.prototype._renderInitialsNotPictured = function (numPersonasNotPictured) {\n    var _classNames = this._classNames;\n    return function () {\n      return React.createElement(\"span\", {\n        className: _classNames.overflowInitialsIcon\n      }, '+' + numPersonasNotPictured);\n    };\n  };\n\n  FacepileBase.defaultProps = {\n    maxDisplayablePersonas: 5,\n    personas: [],\n    overflowPersonas: [],\n    personaSize: PersonaSize.size32\n  };\n  return FacepileBase;\n}(BaseComponent);\n\nexport { FacepileBase };","map":null,"metadata":{},"sourceType":"module"}