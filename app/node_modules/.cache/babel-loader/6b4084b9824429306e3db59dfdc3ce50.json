{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { getThemedContext } from '@uifabric/styling';\nimport { Customizer } from '@uifabric/utilities';\n/**\r\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\r\n * for a given scheme name.\r\n *\r\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\r\n */\n\nexport var ThemeProvider = function ThemeProvider(props) {\n  var scheme = props.scheme,\n      theme = props.theme,\n      rest = tslib_1.__rest(props, [\"scheme\", \"theme\"]); // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme in context\n  //        and uses quick global store accessor to trigger change by passing in theme object as child and triggering re-render.\n  //        (perf benefits need verification)\n  // tslint:disable-next-line:typedef\n\n\n  var contextTransform = function contextTransform(context) {\n    return getThemedContext(context, scheme, theme);\n  };\n\n  return React.createElement(Customizer, tslib_1.__assign({}, rest, {\n    contextTransform: contextTransform\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}