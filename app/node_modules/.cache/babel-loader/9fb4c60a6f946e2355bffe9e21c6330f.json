{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { BaseComponent, classNamesFunction, find, getId } from '../../Utilities';\nimport { ChoiceGroupOption } from './ChoiceGroupOption/index';\nvar getClassNames = classNamesFunction();\n\nvar ChoiceGroupBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ChoiceGroupBase, _super);\n\n  function ChoiceGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._inputElement = React.createRef();\n    _this.focusedVars = {};\n    _this.changedVars = {};\n\n    _this._onFocus = function (key) {\n      return _this.focusedVars[key] ? _this.focusedVars[key] : _this.focusedVars[key] = function (ev, option) {\n        _this.setState({\n          keyFocused: key,\n          keyChecked: _this.state.keyChecked\n        });\n      };\n    };\n\n    _this._onBlur = function (ev, option) {\n      _this.setState({\n        keyFocused: undefined,\n        keyChecked: _this.state.keyChecked\n      });\n    };\n\n    _this._onChange = function (key) {\n      return _this.changedVars[key] ? _this.changedVars[key] : _this.changedVars[key] = function (evt, option) {\n        var _a = _this.props,\n            onChanged = _a.onChanged,\n            onChange = _a.onChange,\n            selectedKey = _a.selectedKey,\n            _b = _a.options,\n            options = _b === void 0 ? [] : _b; // Only manage state in uncontrolled scenarios.\n\n        if (selectedKey === undefined) {\n          _this.setState({\n            keyChecked: key\n          });\n        }\n\n        var originalOption = find(options, function (value) {\n          return value.key === key;\n        }); // TODO: onChanged deprecated, remove else if after 07/17/2017 when onChanged has been removed.\n\n        if (onChange) {\n          onChange(evt, originalOption);\n        } else if (onChanged) {\n          onChanged(originalOption);\n        }\n      };\n    };\n\n    _this._warnDeprecations({\n      onChanged: 'onChange'\n    });\n\n    _this._warnMutuallyExclusive({\n      selectedKey: 'defaultSelectedKey'\n    });\n\n    var validDefaultSelectedKey = !!props.options && props.options.some(function (option) {\n      return option.key === props.defaultSelectedKey;\n    });\n    _this.state = {\n      keyChecked: props.defaultSelectedKey === undefined || !validDefaultSelectedKey ? _this._getKeyChecked(props) : props.defaultSelectedKey,\n      keyFocused: undefined\n    };\n    _this._id = getId('ChoiceGroup');\n    _this._labelId = getId('ChoiceGroupLabel');\n    return _this;\n  }\n\n  Object.defineProperty(ChoiceGroupBase.prototype, \"checkedOption\", {\n    /**\r\n     * Gets the current checked option.\r\n     */\n    get: function get() {\n      var _a = this.props.options,\n          options = _a === void 0 ? [] : _a;\n      var key = this.state.keyChecked;\n      return find(options, function (value) {\n        return value.key === key;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ChoiceGroupBase.prototype.componentWillReceiveProps = function (newProps) {\n    var newKeyChecked = this._getKeyChecked(newProps);\n\n    var oldKeyChecked = this._getKeyChecked(this.props);\n\n    if (newKeyChecked !== oldKeyChecked) {\n      this.setState({\n        keyChecked: newKeyChecked\n      });\n    }\n  };\n\n  ChoiceGroupBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        className = _a.className,\n        theme = _a.theme,\n        styles = _a.styles,\n        options = _a.options,\n        label = _a.label,\n        required = _a.required,\n        disabled = _a.disabled,\n        name = _a.name,\n        role = _a.role;\n    var _b = this.state,\n        keyChecked = _b.keyChecked,\n        keyFocused = _b.keyFocused;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      optionsContainIconOrImage: options.some(function (option) {\n        return Boolean(option.iconProps || option.imageSrc);\n      })\n    });\n    var ariaLabelledBy = this.props.ariaLabelledBy ? this.props.ariaLabelledBy : label ? this._id + '-label' : this.props['aria-labelledby'];\n    return React.createElement(\"div\", {\n      role: role,\n      className: classNames.applicationRole\n    }, React.createElement(\"div\", tslib_1.__assign({\n      className: classNames.root,\n      role: \"radiogroup\"\n    }, ariaLabelledBy && {\n      'aria-labelledby': ariaLabelledBy\n    }), label && React.createElement(Label, {\n      className: classNames.label,\n      required: required,\n      id: this._id + '-label'\n    }, label), React.createElement(\"div\", {\n      className: classNames.flexContainer\n    }, options.map(function (option) {\n      var innerOptionProps = tslib_1.__assign({}, option, {\n        focused: option.key === keyFocused,\n        checked: option.key === keyChecked,\n        disabled: option.disabled || disabled,\n        id: _this._id + \"-\" + option.key,\n        labelId: _this._labelId + \"-\" + option.key,\n        name: name || _this._id,\n        required: required\n      });\n\n      return React.createElement(ChoiceGroupOption, tslib_1.__assign({\n        key: option.key,\n        onBlur: _this._onBlur,\n        onFocus: _this._onFocus(option.key),\n        onChange: _this._onChange(option.key)\n      }, innerOptionProps));\n    }))));\n  };\n\n  ChoiceGroupBase.prototype.focus = function () {\n    var options = this.props.options;\n\n    if (options) {\n      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {\n        var option = options_1[_i];\n        var elementToFocus = document.getElementById(this._id + \"-\" + option.key);\n\n        if (elementToFocus && elementToFocus.getAttribute('data-is-focusable') === 'true') {\n          elementToFocus.focus(); // focus on checked or default focusable key\n\n          return;\n        }\n      }\n    }\n\n    if (this._inputElement.current) {\n      this._inputElement.current.focus();\n    }\n  };\n\n  ChoiceGroupBase.prototype._getKeyChecked = function (props) {\n    if (props.selectedKey !== undefined) {\n      return props.selectedKey;\n    }\n\n    var _a = props.options,\n        options = _a === void 0 ? [] : _a;\n    var optionsChecked = options.filter(function (option) {\n      return option.checked;\n    });\n\n    if (optionsChecked.length === 0) {\n      return undefined;\n    } else {\n      return optionsChecked[0].key;\n    }\n  };\n\n  ChoiceGroupBase.defaultProps = {\n    options: []\n  };\n  return ChoiceGroupBase;\n}(BaseComponent);\n\nexport { ChoiceGroupBase };","map":null,"metadata":{},"sourceType":"module"}