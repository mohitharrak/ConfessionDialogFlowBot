{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, css, classNamesFunction } from '../../Utilities';\nimport { SelectionMode } from '../../utilities/selection/interfaces';\nimport { DetailsList } from './DetailsList';\nimport { Shimmer, ShimmerElementsGroup, ShimmerElementType } from '../../Shimmer';\nimport { CheckboxVisibility } from './DetailsList.types';\nimport { DEFAULT_CELL_STYLE_PROPS, DEFAULT_ROW_HEIGHTS, getStyles as getRowStyles } from './DetailsRow.styles';\nvar getRowClassNames = classNamesFunction();\nvar getClassNames = classNamesFunction();\nvar SHIMMER_INITIAL_ITEMS = 10;\nvar DEFAULT_SHIMMER_HEIGHT = 7;\nvar SHIMMER_LINE_VS_CELL_WIDTH_RATIO = 0.95;\n\nvar ShimmeredDetailsListBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ShimmeredDetailsListBase, _super);\n\n  function ShimmeredDetailsListBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderShimmerPlaceholder = function (index, rowProps) {\n      var _a = _this.props,\n          onRenderCustomPlaceholder = _a.onRenderCustomPlaceholder,\n          compact = _a.compact;\n      var selectionMode = rowProps.selectionMode,\n          checkboxVisibility = rowProps.checkboxVisibility;\n      var theme = _this.props.theme;\n      var showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n\n      var rowStyleProps = tslib_1.__assign({}, rowProps, {\n        theme: theme\n      });\n\n      var rowClassNames = getRowClassNames(getRowStyles(rowStyleProps), {\n        theme: theme\n      });\n      var placeholderElements = onRenderCustomPlaceholder ? onRenderCustomPlaceholder() : _this._renderDefaultShimmerPlaceholder(rowProps);\n      return React.createElement(\"div\", {\n        className: css(showCheckbox && rowClassNames.shimmerLeftBorder, !compact && rowClassNames.shimmerBottomBorder)\n      }, React.createElement(Shimmer, {\n        customElementsGroup: placeholderElements\n      }));\n    };\n\n    _this._renderDefaultShimmerPlaceholder = function (rowProps) {\n      var columns = rowProps.columns,\n          compact = rowProps.compact,\n          _a = rowProps.cellStyleProps,\n          cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n      var shimmerElementsRow = [];\n      var rowHeight = DEFAULT_ROW_HEIGHTS.rowHeight,\n          compactRowHeight = DEFAULT_ROW_HEIGHTS.compactRowHeight;\n      var gapHeight = compact ? compactRowHeight : rowHeight;\n      columns.map(function (column, columnIdx) {\n        var shimmerElements = [];\n        var groupWidth = cellStyleProps.cellLeftPadding + cellStyleProps.cellRightPadding + column.calculatedWidth + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n        shimmerElements.push({\n          type: ShimmerElementType.gap,\n          width: cellStyleProps.cellLeftPadding,\n          height: gapHeight\n        });\n\n        if (column.isIconOnly) {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth,\n            height: column.calculatedWidth\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding,\n            height: gapHeight\n          });\n        } else {\n          shimmerElements.push({\n            type: ShimmerElementType.line,\n            width: column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO,\n            height: DEFAULT_SHIMMER_HEIGHT\n          });\n          shimmerElements.push({\n            type: ShimmerElementType.gap,\n            width: cellStyleProps.cellRightPadding + (column.calculatedWidth - column.calculatedWidth * SHIMMER_LINE_VS_CELL_WIDTH_RATIO) + (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n            height: gapHeight\n          });\n        }\n\n        shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n          key: columnIdx,\n          width: groupWidth + \"px\",\n          shimmerElements: shimmerElements\n        }));\n      }); // When resizing the window from narrow to wider, we need to cover the exposed Shimmer wave until the column resizing logic is done.\n\n      shimmerElementsRow.push(React.createElement(ShimmerElementsGroup, {\n        key: 'endGap',\n        width: '100%',\n        shimmerElements: [{\n          type: ShimmerElementType.gap,\n          width: '100%',\n          height: gapHeight\n        }]\n      }));\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex'\n        }\n      }, shimmerElementsRow);\n    };\n\n    _this._shimmerItems = props.shimmerLines ? new Array(props.shimmerLines) : new Array(SHIMMER_INITIAL_ITEMS);\n    return _this;\n  }\n\n  ShimmeredDetailsListBase.prototype.render = function () {\n    var _a = this.props,\n        items = _a.items,\n        listProps = _a.listProps,\n        styles = _a.styles,\n        theme = _a.theme,\n        shimmerLines = _a.shimmerLines,\n        onRenderCustomPlaceholder = _a.onRenderCustomPlaceholder,\n        enableShimmer = _a.enableShimmer,\n        detailsListProps = tslib_1.__rest(_a, [\"items\", \"listProps\", \"styles\", \"theme\", \"shimmerLines\", \"onRenderCustomPlaceholder\", \"enableShimmer\"]); // Adds to the optional listProp classname a fading out overlay classname only when shimmer enabled.\n\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: listProps && listProps.className,\n      enableShimmer: enableShimmer\n    });\n\n    var newListProps = tslib_1.__assign({}, listProps, {\n      className: classNames.root\n    });\n\n    return React.createElement(DetailsList, tslib_1.__assign({}, detailsListProps, {\n      enableShimmer: enableShimmer,\n      items: enableShimmer ? this._shimmerItems : items,\n      onRenderMissingItem: this._onRenderShimmerPlaceholder,\n      listProps: newListProps\n    }));\n  };\n\n  return ShimmeredDetailsListBase;\n}(BaseComponent);\n\nexport { ShimmeredDetailsListBase };","map":null,"metadata":{},"sourceType":"module"}