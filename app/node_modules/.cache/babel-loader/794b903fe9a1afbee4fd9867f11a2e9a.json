{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { BaseComponent, css, getRTL, getId, KeyCodes } from '../../Utilities';\nimport { ColumnDragEndLocation, CheckboxVisibility } from './DetailsList.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { SelectionMode, SELECTION_CHANGE } from '../../utilities/selection/interfaces';\nimport { DragDropHelper } from '../../utilities/dragdrop/index';\nimport { DetailsColumn } from '../../components/DetailsList/DetailsColumn';\nimport { SelectAllVisibility } from './DetailsHeader.types';\nimport { classNamesFunction } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nvar MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nvar NO_COLUMNS = [];\n\nvar DetailsHeaderBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DetailsHeaderBase, _super);\n\n  function DetailsHeaderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._rootComponent = React.createRef();\n    _this._draggedColumnIndex = -1;\n    _this._dropHintDetails = {};\n\n    _this._getDropHintPositions = function () {\n      var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a;\n      var columnReorderProps = _this.state.columnReorderProps;\n      var prevX = 0;\n      var prevMid = 0;\n      var prevRef;\n      var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n      var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n\n      for (var i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n        if (_this._rootElement) {\n          var dropHintElement = _this._rootElement.querySelectorAll('#columnDropHint_' + i)[0];\n\n          if (dropHintElement) {\n            if (i === frozenColumnCountFromStart) {\n              prevX = dropHintElement.offsetLeft;\n              prevMid = dropHintElement.offsetLeft;\n              prevRef = dropHintElement;\n            } else {\n              var newMid = (dropHintElement.offsetLeft + prevX) / 2;\n              _this._dropHintDetails[i - 1] = {\n                originX: prevX,\n                startX: prevMid,\n                endX: newMid,\n                dropHintElementRef: prevRef\n              };\n              prevMid = newMid;\n              prevRef = dropHintElement;\n              prevX = dropHintElement.offsetLeft;\n\n              if (i === columns.length - frozenColumnCountFromEnd) {\n                _this._dropHintDetails[i] = {\n                  originX: prevX,\n                  startX: prevMid,\n                  endX: dropHintElement.offsetLeft,\n                  dropHintElementRef: prevRef\n                };\n              }\n            }\n          }\n        }\n      }\n    };\n    /**\r\n     * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\r\n     *\r\n     */\n\n\n    _this._computeDropHintToBeShown = function (clientX) {\n      if (_this._rootElement) {\n        var clientRect = _this._rootElement.getBoundingClientRect();\n\n        var headerOriginX = clientRect.left;\n        var eventXRelativePosition = clientX - headerOriginX;\n        var currentDropHintIndex = _this._currentDropHintIndex;\n\n        if (_this._isValidCurrentDropHintIndex()) {\n          if (_this._liesBetween(eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex].startX, _this._dropHintDetails[currentDropHintIndex].endX)) {\n            return;\n          }\n        }\n\n        var _a = _this.props.columns,\n            columns = _a === void 0 ? NO_COLUMNS : _a;\n        var columnReorderProps = _this.state.columnReorderProps;\n        var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n        var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n        var currentIndex = frozenColumnCountFromStart;\n        var lastValidColumn = columns.length - frozenColumnCountFromEnd;\n        var indexToUpdate = -1;\n\n        if (_this._isBefore(eventXRelativePosition, _this._dropHintDetails[currentIndex].endX)) {\n          indexToUpdate = currentIndex;\n        } else if (_this._isAfter(eventXRelativePosition, _this._dropHintDetails[lastValidColumn].startX)) {\n          indexToUpdate = lastValidColumn;\n        } else if (_this._isValidCurrentDropHintIndex()) {\n          if (_this._dropHintDetails[currentDropHintIndex + 1] && _this._liesBetween(eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex + 1].startX, _this._dropHintDetails[currentDropHintIndex + 1].endX)) {\n            indexToUpdate = currentDropHintIndex + 1;\n          } else if (_this._dropHintDetails[currentDropHintIndex - 1] && _this._liesBetween(eventXRelativePosition, _this._dropHintDetails[currentDropHintIndex - 1].startX, _this._dropHintDetails[currentDropHintIndex - 1].endX)) {\n            indexToUpdate = currentDropHintIndex - 1;\n          }\n        }\n\n        if (indexToUpdate === -1) {\n          var startIndex = frozenColumnCountFromStart;\n          var endIndex = lastValidColumn;\n\n          while (startIndex < endIndex) {\n            var middleIndex = Math.ceil((endIndex + startIndex) / 2);\n\n            if (_this._liesBetween(eventXRelativePosition, _this._dropHintDetails[middleIndex].startX, _this._dropHintDetails[middleIndex].endX)) {\n              indexToUpdate = middleIndex;\n              break;\n            } else if (_this._isBefore(eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              endIndex = middleIndex;\n            } else if (_this._isAfter(eventXRelativePosition, _this._dropHintDetails[middleIndex].originX)) {\n              startIndex = middleIndex;\n            }\n          }\n        }\n\n        if (indexToUpdate === _this._draggedColumnIndex || indexToUpdate === _this._draggedColumnIndex + 1) {\n          if (_this._isValidCurrentDropHintIndex()) {\n            _this._resetDropHints();\n          }\n        } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n          _this._resetDropHints();\n\n          _this._updateDropHintElement(_this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n\n          _this._currentDropHintIndex = indexToUpdate;\n        }\n      }\n    };\n\n    _this._renderColumnSizer = function (_a) {\n      var columnIndex = _a.columnIndex;\n      var _b = _this.props.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n      var column = columns[columnIndex];\n      var columnResizeDetails = _this.state.columnResizeDetails;\n      var classNames = _this._classNames;\n      return column.isResizable ? React.createElement(\"div\", {\n        key: column.key + \"_sizer\",\n        \"aria-hidden\": true,\n        role: \"button\",\n        \"data-is-focusable\": false,\n        onClick: stopPropagation,\n        \"data-sizer-index\": columnIndex,\n        onBlur: _this._onSizerBlur,\n        className: css(classNames.cellSizer, columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd, (_c = {}, _c[classNames.cellIsResizing] = columnResizeDetails && columnResizeDetails.columnIndex === columnIndex, _c)),\n        onDoubleClick: _this._onSizerDoubleClick.bind(_this, columnIndex)\n      }) : null;\n\n      var _c;\n    };\n\n    _this._onRenderColumnHeaderTooltip = function (tooltipHostProps, defaultRender) {\n      return React.createElement(\"span\", {\n        className: tooltipHostProps.hostClassName\n      }, tooltipHostProps.children);\n    };\n    /**\r\n     * Called when the select all toggle is clicked.\r\n     */\n\n\n    _this._onSelectAllClicked = function () {\n      var selection = _this.props.selection;\n\n      if (selection) {\n        selection.toggleAllSelected();\n      }\n    };\n\n    _this._onRootMouseDown = function (ev) {\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n      var columnIndex = Number(columnIndexAttr);\n      var _a = _this.props.columns,\n          columns = _a === void 0 ? NO_COLUMNS : _a;\n\n      if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n        // Ignore anything except the primary button.\n        return;\n      }\n\n      _this.setState({\n        columnResizeDetails: {\n          columnIndex: columnIndex,\n          columnMinWidth: columns[columnIndex].calculatedWidth,\n          originX: ev.clientX\n        }\n      });\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._onRootMouseMove = function (ev) {\n      var _a = _this.state,\n          columnResizeDetails = _a.columnResizeDetails,\n          isSizing = _a.isSizing;\n\n      if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n        _this.setState({\n          isSizing: true\n        });\n      }\n    };\n\n    _this._onRootRef = function (focusZone) {\n      if (focusZone) {\n        // Need to resolve the actual DOM node, not the component. The element itself will be used for drag/drop and focusing.\n        _this._rootElement = findDOMNode(focusZone);\n      } else {\n        _this._rootElement = undefined;\n      }\n    };\n\n    _this._onRootKeyDown = function (ev) {\n      var _a = _this.state,\n          columnResizeDetails = _a.columnResizeDetails,\n          isSizing = _a.isSizing;\n      var _b = _this.props,\n          _c = _b.columns,\n          columns = _c === void 0 ? NO_COLUMNS : _c,\n          onColumnResized = _b.onColumnResized;\n      var columnIndexAttr = ev.target.getAttribute('data-sizer-index');\n\n      if (!columnIndexAttr || isSizing) {\n        return;\n      }\n\n      var columnIndex = Number(columnIndexAttr);\n\n      if (!columnResizeDetails) {\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: {\n              columnIndex: columnIndex,\n              columnMinWidth: columns[columnIndex].calculatedWidth\n            }\n          });\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      } else {\n        var increment = void 0;\n\n        if (ev.which === KeyCodes.enter) {\n          _this.setState({\n            columnResizeDetails: undefined\n          });\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        } else if (ev.which === KeyCodes.left) {\n          increment = getRTL() ? 1 : -1;\n        } else if (ev.which === KeyCodes.right) {\n          increment = getRTL() ? -1 : 1;\n        }\n\n        if (increment) {\n          if (!ev.shiftKey) {\n            increment *= 10;\n          }\n\n          _this.setState({\n            columnResizeDetails: tslib_1.__assign({}, columnResizeDetails, {\n              columnMinWidth: columnResizeDetails.columnMinWidth + increment\n            })\n          });\n\n          if (onColumnResized) {\n            onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    };\n    /**\r\n     * mouse move event handler in the header\r\n     * it will set isSizing state to true when user clicked on the sizer and move the mouse.\r\n     *\r\n     * @private\r\n     * @param {React.MouseEvent} ev (mouse move event)\r\n     */\n\n\n    _this._onSizerMouseMove = function (ev) {\n      var // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = ev.buttons;\n      var _a = _this.props,\n          onColumnIsSizingChanged = _a.onColumnIsSizingChanged,\n          onColumnResized = _a.onColumnResized,\n          _b = _a.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n        // cancel mouse down event and return early when the primary button is not pressed\n        _this._onSizerMouseUp(ev);\n\n        return;\n      }\n\n      if (ev.clientX !== columnResizeDetails.originX) {\n        if (onColumnIsSizingChanged) {\n          onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], true);\n        }\n      }\n\n      if (onColumnResized) {\n        var movement = ev.clientX - columnResizeDetails.originX;\n\n        if (getRTL()) {\n          movement = -movement;\n        }\n\n        onColumnResized(columns[columnResizeDetails.columnIndex], columnResizeDetails.columnMinWidth + movement, columnResizeDetails.columnIndex);\n      }\n    };\n\n    _this._onSizerBlur = function (ev) {\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      if (columnResizeDetails) {\n        _this.setState({\n          columnResizeDetails: undefined,\n          isSizing: false\n        });\n      }\n    };\n    /**\r\n     * mouse up event handler in the header\r\n     * clear the resize related state.\r\n     * This is to ensure we can catch double click event\r\n     *\r\n     * @private\r\n     * @param {React.MouseEvent} ev (mouse up event)\r\n     */\n\n\n    _this._onSizerMouseUp = function (ev) {\n      var _a = _this.props,\n          _b = _a.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b,\n          onColumnIsSizingChanged = _a.onColumnIsSizingChanged;\n      var columnResizeDetails = _this.state.columnResizeDetails;\n\n      _this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false\n      });\n\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails.columnIndex], false);\n      }\n    };\n\n    var columnReorderProps = props.columnReorderProps || props.columnReorderOptions && getLegacyColumnReorderProps(props.columnReorderOptions);\n    _this.state = {\n      columnReorderProps: columnReorderProps,\n      columnResizeDetails: undefined,\n      groupNestingDepth: _this.props.groupNestingDepth,\n      isAllCollapsed: _this.props.isAllCollapsed,\n      isAllSelected: !!_this.props.selection && _this.props.selection.isAllSelected()\n    };\n    _this._onToggleCollapseAll = _this._onToggleCollapseAll.bind(_this);\n    _this._onSelectAllClicked = _this._onSelectAllClicked.bind(_this);\n    _this._updateDragInfo = _this._updateDragInfo.bind(_this);\n    _this._onDragOver = _this._onDragOver.bind(_this);\n    _this._onDrop = _this._onDrop.bind(_this);\n    _this._getHeaderDragDropOptions = _this._getHeaderDragDropOptions.bind(_this);\n    _this._updateDroppingState = _this._updateDroppingState.bind(_this);\n    _this._getDropHintPositions = _this._getDropHintPositions.bind(_this);\n    _this._computeDropHintToBeShown = _this._computeDropHintToBeShown.bind(_this);\n    _this._resetDropHints = _this._resetDropHints.bind(_this);\n    _this._isValidCurrentDropHintIndex = _this._isValidCurrentDropHintIndex.bind(_this);\n    _this._onRootRef = _this._onRootRef.bind(_this);\n    _this._isEventOnHeader = _this._isEventOnHeader.bind(_this);\n    _this._onDropIndexInfo = {\n      sourceIndex: Number.MIN_SAFE_INTEGER,\n      targetIndex: Number.MIN_SAFE_INTEGER\n    };\n    _this._id = getId('header');\n    _this._currentDropHintIndex = Number.MIN_SAFE_INTEGER;\n    return _this;\n  }\n\n  DetailsHeaderBase.getDerivedStateFromProps = function (newProps, prevState) {\n    var columnReorderProps = newProps.columnReorderProps || newProps.columnReorderOptions && getLegacyColumnReorderProps(newProps.columnReorderOptions);\n    var groupNestingDepth = newProps.groupNestingDepth;\n    var newState = {\n      columnReorderProps: columnReorderProps,\n      groupNestingDepth: groupNestingDepth\n    };\n\n    if (newProps.isAllCollapsed !== undefined) {\n      newState.isAllCollapsed = newProps.isAllCollapsed;\n    }\n\n    return newState;\n  };\n\n  DetailsHeaderBase.prototype.componentDidMount = function () {\n    var selection = this.props.selection;\n    var columnReorderProps = this.state.columnReorderProps;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged); // We need to use native on this to avoid MarqueeSelection from handling the event before us.\n\n\n    this._events.on(this._rootElement, 'mousedown', this._onRootMouseDown);\n\n    this._events.on(this._rootElement, 'keydown', this._onRootKeyDown);\n\n    if (columnReorderProps && this._dragDropHelper) {\n      this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement, this._events, this._getHeaderDragDropOptions());\n    }\n  };\n\n  DetailsHeaderBase.prototype.componentDidUpdate = function (prevProps) {\n    var columnReorderProps = this.state.columnReorderProps;\n\n    if (!columnReorderProps) {\n      if (this._subscriptionObject) {\n        this._subscriptionObject.dispose();\n\n        delete this._subscriptionObject;\n      }\n    } else if (!this._subscriptionObject && this._dragDropHelper) {\n      this._subscriptionObject = this._dragDropHelper.subscribe(this._rootElement, this._events, this._getHeaderDragDropOptions());\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      var _a = prevProps.columns,\n          previousColumns = _a === void 0 ? NO_COLUMNS : _a;\n      var _b = this.props.columns,\n          columns = _b === void 0 ? NO_COLUMNS : _b;\n\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: Number.MIN_SAFE_INTEGER,\n          targetIndex: Number.MIN_SAFE_INTEGER\n        };\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype.componentWillUnmount = function () {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n\n      delete this._subscriptionObject;\n    }\n\n    if (this._dragDropHelper) {\n      this._dragDropHelper.dispose();\n    }\n  };\n\n  DetailsHeaderBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b,\n        ariaLabel = _a.ariaLabel,\n        ariaLabelForSelectAllCheckbox = _a.ariaLabelForSelectAllCheckbox,\n        selectAllVisibility = _a.selectAllVisibility,\n        ariaLabelForSelectionColumn = _a.ariaLabelForSelectionColumn,\n        indentWidth = _a.indentWidth,\n        viewport = _a.viewport,\n        onColumnClick = _a.onColumnClick,\n        onColumnContextMenu = _a.onColumnContextMenu,\n        _c = _a.onRenderColumnHeaderTooltip,\n        onRenderColumnHeaderTooltip = _c === void 0 ? this._onRenderColumnHeaderTooltip : _c,\n        styles = _a.styles,\n        theme = _a.theme;\n    var _d = this.state,\n        isAllSelected = _d.isAllSelected,\n        columnResizeDetails = _d.columnResizeDetails,\n        isSizing = _d.isSizing,\n        groupNestingDepth = _d.groupNestingDepth,\n        isAllCollapsed = _d.isAllCollapsed,\n        columnReorderProps = _d.columnReorderProps;\n    var showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    var isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n\n    if (!this._dragDropHelper && columnReorderProps) {\n      // TODO Do not assign local fields during render.\n      // This behavior needs to be moved to the appropriate React lifecycle methods.\n      this._dragDropHelper = new DragDropHelper({\n        selection: {\n          getSelection: function getSelection() {\n            return;\n          }\n        },\n        minimumPixelsForDrag: this.props.minimumPixelsForDrag\n      });\n    }\n\n    var frozenColumnCountFromStart = columnReorderProps && columnReorderProps.frozenColumnCountFromStart ? columnReorderProps.frozenColumnCountFromStart : 0;\n    var frozenColumnCountFromEnd = columnReorderProps && columnReorderProps.frozenColumnCountFromEnd ? columnReorderProps.frozenColumnCountFromEnd : 0;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isAllSelected: isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing: isSizing,\n      isAllCollapsed: isAllCollapsed,\n      isCheckboxHidden: isCheckboxHidden\n    });\n    var classNames = this._classNames;\n    var isRTL = getRTL();\n    return React.createElement(FocusZone, {\n      role: \"row\",\n      \"aria-label\": ariaLabel,\n      className: classNames.root,\n      componentRef: this._rootComponent,\n      ref: this._onRootRef,\n      onMouseMove: this._onRootMouseMove,\n      \"data-automationid\": \"DetailsHeader\",\n      style: {\n        minWidth: viewport ? viewport.width : 0\n      },\n      direction: FocusZoneDirection.horizontal\n    }, showCheckbox ? [React.createElement(\"div\", {\n      key: \"__checkbox\",\n      className: classNames.cellIsCheck,\n      \"aria-labelledby\": this._id + \"-check\",\n      onClick: !isCheckboxHidden ? this._onSelectAllClicked : undefined,\n      \"aria-colindex\": 1,\n      role: 'columnheader'\n    }, onRenderColumnHeaderTooltip({\n      hostClassName: css(classNames.checkTooltip),\n      id: this._id + \"-checkTooltip\",\n      setAriaDescribedBy: false,\n      content: ariaLabelForSelectAllCheckbox,\n      children: React.createElement(DetailsRowCheck, {\n        id: this._id + \"-check\",\n        \"aria-label\": ariaLabelForSelectionColumn,\n        \"aria-describedby\": !isCheckboxHidden ? ariaLabelForSelectAllCheckbox && !this.props.onRenderColumnHeaderTooltip ? this._id + \"-checkTooltip\" : undefined : ariaLabelForSelectionColumn && !this.props.onRenderColumnHeaderTooltip ? this._id + \"-checkTooltip\" : undefined,\n        \"data-is-focusable\": !isCheckboxHidden || undefined,\n        isHeader: true,\n        selected: isAllSelected,\n        anySelected: false,\n        canSelect: !isCheckboxHidden,\n        className: classNames.check\n      })\n    }, this._onRenderColumnHeaderTooltip)), !this.props.onRenderColumnHeaderTooltip ? ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel\n    }, ariaLabelForSelectAllCheckbox) : ariaLabelForSelectionColumn && isCheckboxHidden ? React.createElement(\"label\", {\n      key: \"__checkboxLabel\",\n      id: this._id + \"-checkTooltip\",\n      className: classNames.accessibleLabel\n    }, ariaLabelForSelectionColumn) : null : null] : null, groupNestingDepth > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? React.createElement(\"div\", {\n      className: classNames.cellIsGroupExpander,\n      onClick: this._onToggleCollapseAll,\n      \"data-is-focusable\": true\n    }, React.createElement(Icon, {\n      className: classNames.collapseButton,\n      iconName: isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'\n    })) : null, React.createElement(GroupSpacer, {\n      indentWidth: indentWidth,\n      count: groupNestingDepth - 1\n    }), columns.map(function (column, columnIndex) {\n      var _isDraggable = columnReorderProps ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd : false;\n\n      return [columnReorderProps && (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) && _this._renderDropHint(columnIndex), React.createElement(DetailsColumn, {\n        column: column,\n        key: column.key,\n        columnIndex: (showCheckbox ? 2 : 1) + columnIndex,\n        parentId: _this._id,\n        isDraggable: _isDraggable,\n        updateDragInfo: _this._updateDragInfo,\n        dragDropHelper: _this._dragDropHelper,\n        onColumnClick: onColumnClick,\n        onColumnContextMenu: onColumnContextMenu,\n        // Do not render tooltips by default, but allow for override via props.\n        onRenderColumnHeaderTooltip: _this.props.onRenderColumnHeaderTooltip,\n        isDropped: _this._onDropIndexInfo.targetIndex === columnIndex,\n        cellStyleProps: _this.props.cellStyleProps\n      }), _this._renderColumnDivider(columnIndex)];\n    }), columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length), isSizing && React.createElement(Layer, null, React.createElement(\"div\", {\n      className: classNames.sizingOverlay,\n      onMouseMove: this._onSizerMouseMove,\n      onMouseUp: this._onSizerMouseUp\n    })));\n  };\n  /** Set focus to the active thing in the focus area. */\n\n\n  DetailsHeaderBase.prototype.focus = function () {\n    return Boolean(this._rootComponent.current && this._rootComponent.current.focus());\n  };\n\n  DetailsHeaderBase.prototype._getHeaderDragDropOptions = function () {\n    var options = {\n      selectionIndex: 1,\n      context: {\n        data: this,\n        index: 0\n      },\n      canDrag: function canDrag() {\n        return false;\n      },\n      canDrop: function canDrop() {\n        return true;\n      },\n      onDragStart: function onDragStart() {\n        return undefined;\n      },\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: function onDragEnd() {\n        return undefined;\n      },\n      onDragOver: this._onDragOver\n    };\n    return options;\n  };\n\n  DetailsHeaderBase.prototype._updateDroppingState = function (newValue, event) {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop') {\n      if (!newValue) {\n        this._resetDropHints();\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype._isValidCurrentDropHintIndex = function () {\n    return this._currentDropHintIndex >= 0;\n  };\n\n  DetailsHeaderBase.prototype._onDragOver = function (item, event) {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  DetailsHeaderBase.prototype._onDrop = function (item, event) {\n    var columnReorderProps = this.state.columnReorderProps; // Target index will not get changed if draggeditem is after target item.\n\n    if (this._draggedColumnIndex >= 0 && event) {\n      var targetIndex = this._draggedColumnIndex > this._currentDropHintIndex ? this._currentDropHintIndex : this._currentDropHintIndex - 1;\n      var isValidDrop = false;\n      event.stopPropagation();\n\n      if (this._isValidCurrentDropHintIndex()) {\n        isValidDrop = true;\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n      }\n\n      if (isValidDrop) {\n        if (columnReorderProps && columnReorderProps.onColumnDrop) {\n          var dragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex: targetIndex\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n        } else if (columnReorderProps && columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n        }\n      }\n    }\n\n    this._resetDropHints();\n\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n  /**\r\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\r\n   */\n\n\n  DetailsHeaderBase.prototype._isCheckboxColumnHidden = function () {\n    var _a = this.props,\n        selectionMode = _a.selectionMode,\n        checkboxVisibility = _a.checkboxVisibility;\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  };\n\n  DetailsHeaderBase.prototype._updateDragInfo = function (props, event) {\n    var columnReorderProps = this.state.columnReorderProps;\n    var itemIndex = props.itemIndex;\n\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n\n      this._getDropHintPositions();\n\n      if (columnReorderProps && columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n\n      if (columnReorderProps && columnReorderProps.onColumnDragEnd) {\n        var columnDragEndLocation = this._isEventOnHeader(event);\n\n        columnReorderProps.onColumnDragEnd({\n          dropLocation: columnDragEndLocation\n        }, event);\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype._resetDropHints = function () {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n\n      this._currentDropHintIndex = Number.MIN_SAFE_INTEGER;\n    }\n  };\n\n  DetailsHeaderBase.prototype._updateDropHintElement = function (element, displayProperty) {\n    element.childNodes[1].style.display = displayProperty;\n    element.childNodes[0].style.display = displayProperty;\n  };\n\n  DetailsHeaderBase.prototype._liesBetween = function (target, left, right) {\n    return getRTL() ? target <= left && target >= right : target >= left && target <= right;\n  };\n\n  DetailsHeaderBase.prototype._isBefore = function (a, b) {\n    return getRTL() ? a >= b : a <= b;\n  };\n\n  DetailsHeaderBase.prototype._isAfter = function (a, b) {\n    return getRTL() ? a <= b : a >= b;\n  };\n\n  DetailsHeaderBase.prototype._isEventOnHeader = function (event) {\n    if (this._rootElement) {\n      var clientRect = this._rootElement.getBoundingClientRect();\n\n      if (event.clientX > clientRect.left && event.clientX < clientRect.right && event.clientY > clientRect.top && event.clientY < clientRect.bottom) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  };\n\n  DetailsHeaderBase.prototype._renderColumnDivider = function (columnIndex) {\n    var _a = this.props.columns,\n        columns = _a === void 0 ? NO_COLUMNS : _a;\n    var column = columns[columnIndex];\n    var onRenderDivider = column.onRenderDivider;\n    return onRenderDivider ? onRenderDivider({\n      column: column,\n      columnIndex: columnIndex\n    }, this._renderColumnSizer) : this._renderColumnSizer({\n      column: column,\n      columnIndex: columnIndex\n    });\n  };\n\n  DetailsHeaderBase.prototype._renderDropHint = function (dropHintIndex) {\n    var classNames = this._classNames;\n    return React.createElement(\"div\", {\n      key: 'dropHintKey',\n      className: classNames.dropHintStyle,\n      id: \"columnDropHint_\" + dropHintIndex\n    }, React.createElement(Icon, {\n      key: \"dropHintCaretKey\",\n      \"aria-hidden\": true,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      className: classNames.dropHintCaretStyle,\n      iconName: 'CaretUpSolid8'\n    }), React.createElement(\"div\", {\n      key: \"dropHintLineKey\",\n      \"aria-hidden\": true,\n      \"data-is-focusable\": false,\n      \"data-sizer-index\": dropHintIndex,\n      className: classNames.dropHintLineStyle\n    }));\n  };\n  /**\r\n   * double click on the column sizer will auto ajust column width\r\n   * to fit the longest content among current rendered rows.\r\n   *\r\n   * @private\r\n   * @param {number} columnIndex (index of the column user double clicked)\r\n   * @param {React.MouseEvent} ev (mouse double click event)\r\n   */\n\n\n  DetailsHeaderBase.prototype._onSizerDoubleClick = function (columnIndex, ev) {\n    var _a = this.props,\n        onColumnAutoResized = _a.onColumnAutoResized,\n        _b = _a.columns,\n        columns = _b === void 0 ? NO_COLUMNS : _b;\n\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  };\n\n  DetailsHeaderBase.prototype._onSelectionChanged = function () {\n    var isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected\n      });\n    }\n  };\n\n  DetailsHeaderBase.prototype._onToggleCollapseAll = function () {\n    var onToggleCollapseAll = this.props.onToggleCollapseAll;\n    var newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed\n    });\n\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n\n  DetailsHeaderBase.defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible\n  };\n  return DetailsHeaderBase;\n}(BaseComponent);\n\nexport { DetailsHeaderBase };\n\nfunction getLegacyColumnReorderProps(columnReorderOptions) {\n  return tslib_1.__assign({}, columnReorderOptions, {\n    onColumnDragEnd: undefined\n  });\n}\n\nfunction stopPropagation(ev) {\n  ev.stopPropagation();\n}","map":null,"metadata":{},"sourceType":"module"}