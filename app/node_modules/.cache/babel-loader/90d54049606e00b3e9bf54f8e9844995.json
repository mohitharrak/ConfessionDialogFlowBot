{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { FontSizes, FontWeights, HighContrastSelector, getGlobalClassNames, normalize } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-Dropdown-container',\n  label: 'ms-Dropdown-label',\n  dropdown: 'ms-Dropdown',\n  title: 'ms-Dropdown-title',\n  caretDownWrapper: 'ms-Dropdown-caretDownWrapper',\n  caretDown: 'ms-Dropdown-caretDown',\n  callout: 'ms-Dropdown-callout',\n  panel: 'ms-Dropdown-panel',\n  dropdownItems: 'ms-Dropdown-items',\n  dropdownItem: 'ms-Dropdown-item',\n  dropdownDivider: 'ms-Dropdown-divider',\n  dropdownOptionText: 'ms-Dropdown-optionText',\n  dropdownItemHeader: 'ms-Dropdown-header',\n  titleIsPlaceHolder: 'ms-Dropdown-titleIsPlaceHolder',\n  titleHasError: 'ms-Dropdown-title--hasError'\n};\nvar DROPDOWN_HEIGHT = 32;\nvar DROPDOWN_ITEM_HEIGHT = 32;\nvar highContrastAdjustMixin = {\n  // highContrastAdjust mixin\n  '@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: black-on-white)': {\n    MsHighContrastAdjust: 'none'\n  }\n};\nvar highContrastItemAndTitleStateMixin = {\n  selectors: tslib_1.__assign((_a = {}, _a[HighContrastSelector] = {\n    backgroundColor: 'Highlight',\n    borderColor: 'Highlight',\n    color: 'HighlightText',\n    selectors: {\n      ':hover': {\n        color: 'HighlightText' // overrides the hover styling for buttons that are also selected\n\n      }\n    }\n  }, _a), highContrastAdjustMixin)\n};\nvar highContrastBorderState = {\n  selectors: (_b = {}, _b[HighContrastSelector] = {\n    borderColor: 'Highlight'\n  }, _b)\n};\nexport var getStyles = function getStyles(props) {\n  var theme = props.theme,\n      hasError = props.hasError,\n      className = props.className,\n      isOpen = props.isOpen,\n      disabled = props.disabled,\n      required = props.required,\n      isRenderingPlaceholder = props.isRenderingPlaceholder,\n      panelClassName = props.panelClassName,\n      calloutClassName = props.calloutClassName;\n\n  if (!theme) {\n    throw new Error('theme is undefined or null in base Dropdown getStyles function.');\n  }\n\n  var globalClassnames = getGlobalClassNames(GlobalClassNames, theme);\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors;\n  var rootHoverFocusActiveSelectorNeutralDarkMixin = {\n    color: palette.neutralDark\n  };\n  var rootHoverFocusActiveSelectorBodySubtextMixin = {\n    color: semanticColors.bodySubtext\n  };\n  var borderColorError = {\n    borderColor: semanticColors.errorText\n  };\n  var dropdownItemStyle = [globalClassnames.dropdownItem, {\n    backgroundColor: 'transparent',\n    boxSizing: 'border-box',\n    cursor: 'pointer',\n    display: 'block',\n    padding: '4px 16px',\n    width: '100%',\n    minHeight: DROPDOWN_ITEM_HEIGHT,\n    lineHeight: 20,\n    height: 'auto',\n    position: 'relative',\n    border: '1px solid transparent',\n    wordWrap: 'break-word',\n    overflowWrap: 'break-word',\n    textAlign: 'left'\n  }];\n  var dropdownItemSelected = dropdownItemStyle.concat([{\n    backgroundColor: palette.neutralQuaternaryAlt,\n    color: palette.black\n  }, highContrastItemAndTitleStateMixin]);\n  var dropdownItemDisabled = dropdownItemStyle.concat([{\n    color: semanticColors.disabledText,\n    cursor: 'default'\n  }]);\n  return {\n    root: globalClassnames.root,\n    label: globalClassnames.label,\n    dropdown: [globalClassnames.dropdown, normalize, tslib_1.__assign({}, theme.fonts.medium, {\n      color: palette.neutralPrimary,\n      position: 'relative',\n      outline: 0,\n      userSelect: 'none',\n      selectors: (_a = {}, _a['&:hover .' + globalClassnames.title] = [!disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, {\n        borderColor: palette.neutralDark\n      }, highContrastBorderState], _a['&:focus .' + globalClassnames.title] = [!disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, {\n        borderColor: palette.themePrimary\n      }, highContrastItemAndTitleStateMixin], _a['&:active .' + globalClassnames.title] = [!disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, {\n        borderColor: palette.themeDark\n      }, highContrastBorderState], _a['&:hover .' + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, _a['&:focus .' + globalClassnames.caretDown] = [!disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, {\n        selectors: tslib_1.__assign((_b = {}, _b[HighContrastSelector] = {\n          color: 'HighlightText'\n        }, _b), highContrastAdjustMixin)\n      }], _a['&:active .' + globalClassnames.caretDown] = !disabled && rootHoverFocusActiveSelectorNeutralDarkMixin, _a['&:hover .' + globalClassnames.titleIsPlaceHolder] = rootHoverFocusActiveSelectorBodySubtextMixin, _a['&:focus .' + globalClassnames.titleIsPlaceHolder] = rootHoverFocusActiveSelectorBodySubtextMixin, _a['&:active .' + globalClassnames.titleIsPlaceHolder] = rootHoverFocusActiveSelectorBodySubtextMixin, _a['&:hover .' + globalClassnames.titleHasError] = borderColorError, _a['&:active .' + globalClassnames.titleHasError] = borderColorError, _a['&:focus .' + globalClassnames.titleHasError] = borderColorError, _a)\n    }), className, isOpen && 'is-open', disabled && 'is-disabled', required && 'is-required'],\n    title: [globalClassnames.title, normalize, {\n      backgroundColor: semanticColors.inputBackground,\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: semanticColors.inputBorder,\n      cursor: 'pointer',\n      display: 'block',\n      height: DROPDOWN_HEIGHT,\n      lineHeight: DROPDOWN_HEIGHT - 2,\n      padding: \"0 \" + DROPDOWN_HEIGHT + \"px 0 12px\",\n      position: 'relative',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis'\n    }, isRenderingPlaceholder && [globalClassnames.titleIsPlaceHolder, {\n      color: semanticColors.inputPlaceholderText\n    }], hasError && [globalClassnames.titleHasError, borderColorError], disabled && {\n      backgroundColor: semanticColors.disabledBackground,\n      border: 'none',\n      color: semanticColors.disabledText,\n      cursor: 'default',\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        border: '1px solid GrayText',\n        color: 'GrayText'\n      }, _c)\n    }],\n    caretDownWrapper: [globalClassnames.caretDownWrapper, {\n      position: 'absolute',\n      top: 1,\n      right: 12,\n      height: DROPDOWN_HEIGHT,\n      lineHeight: DROPDOWN_HEIGHT - 2 // height minus the border\n\n    }, !disabled && {\n      cursor: 'pointer'\n    }],\n    caretDown: [globalClassnames.caretDown, {\n      color: palette.neutralSecondary,\n      fontSize: FontSizes.small,\n      pointerEvents: 'none'\n    }, disabled && {\n      color: semanticColors.disabledText,\n      selectors: (_d = {}, _d[HighContrastSelector] = {\n        color: 'GrayText'\n      }, _d)\n    }],\n    errorMessage: tslib_1.__assign({\n      color: semanticColors.errorText\n    }, theme.fonts.small, {\n      paddingTop: 5\n    }),\n    callout: [globalClassnames.callout, {\n      boxShadow: '0 0 2px 0 rgba(0,0,0,0.2)',\n      border: \"1px solid \" + palette.neutralLight\n    }, calloutClassName],\n    dropdownItemsWrapper: {\n      selectors: {\n        '&:focus': {\n          outline: 0\n        }\n      }\n    },\n    dropdownItems: [globalClassnames.dropdownItems, {\n      display: 'block'\n    }],\n    dropdownItem: dropdownItemStyle.concat([{\n      selectors: (_e = {}, _e[HighContrastSelector] = {\n        borderColor: 'Window'\n      }, _e['&:hover'] = {\n        color: 'inherit'\n      }, _e['&:focus'] = {\n        backgroundColor: semanticColors.listItemBackgroundHovered\n      }, _e['&:active'] = {\n        backgroundColor: semanticColors.listHeaderBackgroundHovered,\n        color: palette.black\n      }, _e)\n    }]),\n    dropdownItemSelected: dropdownItemSelected,\n    dropdownItemDisabled: dropdownItemDisabled,\n    dropdownItemSelectedAndDisabled: [dropdownItemSelected, dropdownItemDisabled, {\n      backgroundColor: 'transparent'\n    }],\n    dropdownDivider: [globalClassnames.dropdownDivider, {\n      height: 1,\n      backgroundColor: semanticColors.bodyDivider\n    }],\n    dropdownOptionText: [globalClassnames.dropdownOptionText, {\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      minWidth: 0,\n      maxWidth: '100%',\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      margin: '1px'\n    }],\n    dropdownItemHeader: [globalClassnames.dropdownItemHeader, tslib_1.__assign({}, theme.fonts.medium, {\n      fontWeight: FontWeights.semibold,\n      color: semanticColors.menuHeader,\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      height: DROPDOWN_ITEM_HEIGHT,\n      lineHeight: DROPDOWN_ITEM_HEIGHT,\n      cursor: 'default',\n      padding: '0px 16px',\n      userSelect: 'none',\n      textAlign: 'left'\n    })],\n    subComponentStyles: {\n      label: {\n        root: {\n          display: 'inline-block'\n        }\n      },\n      panel: {\n        root: [panelClassName],\n        main: {\n          // Force drop shadow even under medium breakpoint\n          boxShadow: '-30px 0px 30px -30px rgba(0,0,0,0.2)'\n        },\n        contentInner: {\n          padding: '0 0 20px'\n        }\n      }\n    }\n  };\n\n  var _a, _b, _c, _d, _e;\n};\n\nvar _a, _b;","map":null,"metadata":{},"sourceType":"module"}