{"ast":null,"code":"import { FontSizes, FontWeights, concatStyleSets, getFocusStyle, HighContrastSelector } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\nvar ComboBoxHeight = '32px';\nvar ComboBoxLineHeight = '30px';\nvar ComboxBoxCaretDownWidth = '32px';\nvar ComboBoxOptionHeight = '32px';\nvar getDisabledStyles = memoizeFunction(function (theme) {\n  var semanticColors = theme.semanticColors;\n  return {\n    backgroundColor: semanticColors.disabledBackground,\n    borderColor: semanticColors.disabledBackground,\n    color: semanticColors.disabledText,\n    cursor: 'default',\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      borderColor: 'GrayText',\n      color: 'GrayText'\n    }, _a)\n  };\n\n  var _a;\n});\nvar getListOptionHighContrastStyles = memoizeFunction(function (theme) {\n  return {\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      backgroundColor: 'Highlight',\n      borderColor: 'Highlight',\n      color: 'HighlightText',\n      MsHighContrastAdjust: 'none'\n    }, _a)\n  };\n\n  var _a;\n});\nexport var getOptionStyles = memoizeFunction(function (theme, customStylesForAllOptions, customOptionStylesForCurrentOption, isPending) {\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette;\n  var ComboBoxOptionBackgroundHovered = semanticColors.menuItemBackgroundHovered;\n  var ComboBoxOptionTextColorHovered = semanticColors.bodyText;\n  var ComboBoxOptionTextColorSelected = palette.black;\n  var ComboBoxOptionTextColorDisabled = semanticColors.disabledText;\n  var ComboBoxOptionBackgroundDisabled = semanticColors.bodyBackground;\n  var optionStyles = {\n    root: [theme.fonts.medium, {\n      backgroundColor: isPending ? ComboBoxOptionBackgroundHovered : 'transparent',\n      boxSizing: 'border-box',\n      cursor: 'pointer',\n      display: 'block',\n      width: '100%',\n      height: 'auto',\n      minHeight: ComboBoxOptionHeight,\n      lineHeight: '20px',\n      padding: '5px 16px',\n      position: 'relative',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: 'transparent',\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      textAlign: 'left',\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        borderColor: 'Background'\n      }, _a)\n    }],\n    rootHovered: {\n      backgroundColor: ComboBoxOptionBackgroundHovered,\n      color: ComboBoxOptionTextColorHovered\n    },\n    rootFocused: {\n      backgroundColor: ComboBoxOptionBackgroundHovered\n    },\n    rootChecked: [{\n      backgroundColor: ComboBoxOptionBackgroundHovered,\n      color: ComboBoxOptionTextColorSelected\n    }, getFocusStyle(theme, undefined, undefined, undefined, undefined, undefined, false), getListOptionHighContrastStyles(theme)],\n    rootDisabled: {\n      backgroundColor: ComboBoxOptionBackgroundDisabled,\n      color: ComboBoxOptionTextColorDisabled,\n      cursor: 'default',\n      selectors: {\n        '& .ms-Button-flexContainer': {\n          justifyContent: 'flex-start'\n        }\n      }\n    },\n    optionText: {\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      minWidth: '0px',\n      maxWidth: '100%',\n      wordWrap: 'break-word',\n      overflowWrap: 'break-word',\n      margin: '1px',\n      display: 'inline-block'\n    },\n    optionTextWrapper: {\n      maxWidth: '100%'\n    }\n  };\n  return concatStyleSets(optionStyles, customStylesForAllOptions, customOptionStylesForCurrentOption);\n\n  var _a;\n});\nexport var getCaretDownButtonStyles = memoizeFunction(function (theme, customStyles) {\n  var semanticColors = theme.semanticColors;\n  var caretButtonTextColor = semanticColors.bodySubtext;\n  var caretButtonTextColorHoveredChecked = semanticColors.buttonTextChecked;\n  var caretButtonBackgroundHovered = semanticColors.listItemBackgroundHovered;\n  var caretButtonBackgroundChecked = semanticColors.listItemBackgroundChecked;\n  var caretButtonBackgroundCheckedHovered = semanticColors.listItemBackgroundCheckedHovered;\n  var styles = {\n    root: {\n      color: caretButtonTextColor,\n      fontSize: FontSizes.small,\n      position: 'absolute',\n      // The negative positioning accounts for the 1px root border now that box-sizing is border-box\n      top: '-1px',\n      right: '-1px',\n      height: ComboBoxHeight,\n      lineHeight: ComboBoxLineHeight,\n      width: ComboxBoxCaretDownWidth,\n      textAlign: 'center',\n      cursor: 'default',\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'ButtonFace',\n        borderColor: 'ButtonText',\n        color: 'ButtonText',\n        MsHighContrastAdjust: 'none'\n      }, _a)\n    },\n    icon: {\n      fontSize: FontSizes.small\n    },\n    rootHovered: {\n      backgroundColor: caretButtonBackgroundHovered,\n      color: caretButtonTextColorHoveredChecked,\n      cursor: 'pointer'\n    },\n    rootPressed: {\n      backgroundColor: caretButtonBackgroundChecked,\n      color: caretButtonTextColorHoveredChecked\n    },\n    rootChecked: {\n      backgroundColor: caretButtonBackgroundChecked,\n      color: caretButtonTextColorHoveredChecked\n    },\n    rootCheckedHovered: {\n      backgroundColor: caretButtonBackgroundCheckedHovered,\n      color: caretButtonTextColorHoveredChecked\n    },\n    rootDisabled: getDisabledStyles(theme)\n  };\n  return concatStyleSets(styles, customStyles);\n\n  var _a;\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles, comboBoxOptionWidth) {\n  var semanticColors = theme.semanticColors,\n      fonts = theme.fonts,\n      palette = theme.palette;\n  var ComboBoxRootBackground = semanticColors.bodyBackground;\n  var ComboBoxRootTextColor = semanticColors.bodyText;\n  var ComboBoxRootBorderColor = semanticColors.inputBorder;\n  var ComboBoxRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var ComboBoxRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var ComboBoxRootColorErrored = semanticColors.errorText;\n  var ComboBoxCalloutBorderColor = palette.neutralLight;\n  var ComboBoxOptionHeaderTextColor = semanticColors.menuHeader;\n  var ComboBoxOptionDividerBorderColor = semanticColors.bodyDivider;\n  var ComboBoxRootHighContrastFocused = {\n    color: 'HighlightText',\n    borderColor: 'Highlight',\n    backgroundColor: 'Window',\n    borderWidth: '2px',\n    MsHighContrastAdjust: 'none',\n    paddingLeft: '11px',\n    paddingTop: '0',\n    paddingBottom: '0',\n    selectors: {\n      '.ms-ComboBox-CaretDown-button': {\n        // Negative positioning to account for the 2px border\n        right: '-2px',\n        top: '-2px'\n      }\n    }\n  };\n  var styles = {\n    container: {},\n    label: {},\n    labelDisabled: {},\n    root: [theme.fonts.medium, {\n      boxShadow: 'none',\n      marginLeft: '0',\n      paddingTop: '1px',\n      paddingBottom: '1px',\n      paddingRight: ComboxBoxCaretDownWidth,\n      paddingLeft: '12px',\n      color: ComboBoxRootTextColor,\n      position: 'relative',\n      outline: '0',\n      userSelect: 'none',\n      backgroundColor: ComboBoxRootBackground,\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: ComboBoxRootBorderColor,\n      cursor: 'text',\n      display: 'block',\n      height: ComboBoxHeight,\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      boxSizing: 'border-box',\n      selectors: {\n        '.ms-Label': {\n          display: 'inline-block',\n          marginBottom: '8px'\n        },\n        input: {\n          selectors: {\n            '::-ms-clear': {\n              display: 'none'\n            }\n          }\n        },\n        '&.is-open': {\n          borderColor: ComboBoxRootBorderColorFocused,\n          selectors: (_a = {}, _a[HighContrastSelector] = ComboBoxRootHighContrastFocused, _a)\n        }\n      }\n    }],\n    rootHovered: {\n      borderColor: ComboBoxRootBorderColorHovered,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        color: 'HighlightText',\n        borderColor: 'Highlight',\n        backgroundColor: 'Window',\n        MsHighContrastAdjust: 'none'\n      }, _b)\n    },\n    rootPressed: {\n      borderColor: ComboBoxRootBorderColorFocused,\n      selectors: (_c = {}, _c[HighContrastSelector] = ComboBoxRootHighContrastFocused, _c)\n    },\n    rootFocused: {\n      borderColor: ComboBoxRootBorderColorFocused,\n      selectors: (_d = {}, _d[HighContrastSelector] = ComboBoxRootHighContrastFocused, _d)\n    },\n    rootDisabled: getDisabledStyles(theme),\n    rootError: {\n      borderColor: ComboBoxRootColorErrored,\n      marginBottom: '5px'\n    },\n    rootDisallowFreeForm: {},\n    input: {\n      backgroundColor: ComboBoxRootBackground,\n      color: ComboBoxRootTextColor,\n      boxSizing: 'border-box',\n      width: '100%',\n      height: '28px',\n      borderStyle: 'none',\n      outline: 'none',\n      font: 'inherit',\n      textOverflow: 'ellipsis',\n      padding: '0'\n    },\n    inputDisabled: getDisabledStyles(theme),\n    errorMessage: {\n      color: ComboBoxRootColorErrored\n    },\n    callout: {\n      boxShadow: '0 0px 5px 0px rgba(0, 0, 0, 0.4)',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: ComboBoxCalloutBorderColor\n    },\n    optionsContainerWrapper: {\n      width: comboBoxOptionWidth\n    },\n    optionsContainer: {\n      display: 'block'\n    },\n    header: [fonts.medium, {\n      fontWeight: FontWeights.semibold,\n      color: ComboBoxOptionHeaderTextColor,\n      backgroundColor: 'none',\n      borderStyle: 'none',\n      height: ComboBoxOptionHeight,\n      lineHeight: ComboBoxOptionHeight,\n      cursor: 'default',\n      padding: '0px 16px',\n      userSelect: 'none',\n      textAlign: 'left'\n    }],\n    divider: {\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: ComboBoxOptionDividerBorderColor\n    }\n  };\n  return concatStyleSets(styles, customStyles);\n\n  var _a, _b, _c, _d;\n});","map":null,"metadata":{},"sourceType":"module"}