{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../../Utilities';\nimport { MAX_COLOR_SATURATION, MAX_COLOR_VALUE, getFullColorString, updateSV, clamp } from '../../../utilities/color/colors';\nvar getClassNames = classNamesFunction();\n\nvar ColorRectangleBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColorRectangleBase, _super);\n\n  function ColorRectangleBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._root = React.createRef();\n\n    _this._onMouseDown = function (ev) {\n      _this._events.on(window, 'mousemove', _this._onMouseMove, true);\n\n      _this._events.on(window, 'mouseup', _this._disableEvents, true);\n\n      _this._onMouseMove(ev);\n    };\n\n    _this._onMouseMove = function (ev) {\n      var _a = _this.props,\n          color = _a.color,\n          onSVChanged = _a.onSVChanged,\n          onChange = _a.onChange;\n\n      if (!_this._root.current) {\n        return;\n      } // If the primary button (1) isn't pressed, the user is no longer dragging, so turn off the\n      // event handlers and exit. (this may only be relevant while debugging)\n      // tslint:disable-next-line:no-bitwise\n\n\n      if (!(ev.buttons & 1)) {\n        _this._disableEvents();\n\n        return;\n      }\n\n      var newColor = _getNewColor(ev, color, _this._root.current);\n\n      if (newColor) {\n        _this.setState({\n          color: newColor\n        });\n\n        if (onChange) {\n          onChange(ev, newColor);\n        }\n\n        if (onSVChanged) {\n          onSVChanged(newColor.s, newColor.v);\n        }\n      }\n\n      ev.preventDefault();\n      ev.stopPropagation();\n    };\n\n    _this._disableEvents = function () {\n      _this._events.off();\n    };\n\n    _this._warnDeprecations({\n      onSVChanged: 'onChange'\n    });\n\n    var color = _this.props.color;\n    _this.state = {\n      color: color\n    };\n    return _this;\n  }\n\n  Object.defineProperty(ColorRectangleBase.prototype, \"color\", {\n    get: function get() {\n      return this.state.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorRectangleBase.prototype.componentWillReceiveProps = function (newProps) {\n    var color = newProps.color;\n    this.setState({\n      color: color\n    });\n  };\n\n  ColorRectangleBase.prototype.render = function () {\n    var _a = this.props,\n        minSize = _a.minSize,\n        theme = _a.theme,\n        className = _a.className,\n        styles = _a.styles;\n    var color = this.state.color;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    return React.createElement(\"div\", {\n      ref: this._root,\n      className: classNames.root,\n      style: {\n        minWidth: minSize,\n        minHeight: minSize,\n        backgroundColor: getFullColorString(color)\n      },\n      onMouseDown: this._onMouseDown\n    }, React.createElement(\"div\", {\n      className: classNames.light\n    }), React.createElement(\"div\", {\n      className: classNames.dark\n    }), React.createElement(\"div\", {\n      className: classNames.thumb,\n      style: {\n        left: color.s + '%',\n        top: MAX_COLOR_VALUE - color.v + '%',\n        backgroundColor: color.str\n      }\n    }));\n  };\n\n  ColorRectangleBase.defaultProps = {\n    minSize: 220\n  };\n  return ColorRectangleBase;\n}(BaseComponent);\n\nexport { ColorRectangleBase };\n/**\r\n * Exported for testing only.\r\n * @private\r\n */\n\nexport function _getNewColor(ev, prevColor, root) {\n  var rectSize = root.getBoundingClientRect();\n  var sPercentage = (ev.clientX - rectSize.left) / rectSize.width;\n  var vPercentage = (ev.clientY - rectSize.top) / rectSize.height;\n  return updateSV(prevColor, clamp(sPercentage * MAX_COLOR_SATURATION, MAX_COLOR_SATURATION), clamp(MAX_COLOR_VALUE - vPercentage * MAX_COLOR_VALUE, MAX_COLOR_VALUE));\n}","map":null,"metadata":{},"sourceType":"module"}