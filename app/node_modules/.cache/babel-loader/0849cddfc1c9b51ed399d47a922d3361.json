{"ast":null,"code":"import { getGlobalClassNames, HighContrastSelector, AnimationVariables, getFocusStyle } from '../../Styling';\nimport { getRTL } from '@uifabric/utilities';\nvar GlobalClassNames = {\n  root: 'ms-Slider',\n  enabled: 'ms-Slider-enabled',\n  disabled: 'ms-Slider-disabled',\n  row: 'ms-Slider-row',\n  column: 'ms-Slider-column',\n  container: 'ms-Slider-container',\n  slideBox: 'ms-Slider-slideBox',\n  line: 'ms-Slider-line',\n  thumb: 'ms-Slider-thumb',\n  activeSection: 'ms-Slider-active',\n  inactiveSection: 'ms-Slider-inactive',\n  valueLabel: 'ms-Slider-value',\n  showValue: 'ms-Slider-showValue',\n  showTransitions: 'ms-Slider-showTransitions'\n};\nexport var getStyles = function getStyles(props) {\n  var className = props.className,\n      titleLabelClassName = props.titleLabelClassName,\n      theme = props.theme;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var slideBoxActiveSectionStyles = !props.disabled && {\n    backgroundColor: theme.palette.themePrimary,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      backgroundColor: 'Highlight'\n    }, _a)\n  };\n  var slideBoxInactiveSectionStyles = !props.disabled && {\n    backgroundColor: theme.palette.themeLight,\n    selectors: (_b = {}, _b[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _b)\n  };\n  var slideBoxActiveThumbStyles = !props.disabled && {\n    border: \"2px solid \" + theme.palette.themePrimary,\n    selectors: (_c = {}, _c[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _c)\n  };\n  return {\n    root: [classNames.root, theme.fonts.medium, {\n      userSelect: 'none'\n    }, props.vertical && {\n      marginRight: 8\n    }].concat([!props.disabled ? classNames.enabled : undefined], [props.disabled ? classNames.disabled : undefined], [!props.vertical ? classNames.row : undefined], [props.vertical ? classNames.column : undefined], [className]),\n    titleLabel: [{\n      padding: 0\n    }, titleLabelClassName],\n    container: [classNames.container, {\n      display: 'flex',\n      flexWrap: 'nowrap',\n      alignItems: 'center'\n    }, props.vertical && {\n      flexDirection: 'column',\n      height: '100%',\n      textAlign: 'center',\n      margin: '8px 0'\n    }],\n    slideBox: [classNames.slideBox, getFocusStyle(theme), {\n      background: 'transparent',\n      border: 'none',\n      flexGrow: 1,\n      lineHeight: 28,\n      display: 'flex',\n      alignItems: 'center',\n      selectors: {\n        ':active $activeSection': slideBoxActiveSectionStyles,\n        ':hover $activeSection': slideBoxActiveSectionStyles,\n        ':active $inactiveSection': slideBoxInactiveSectionStyles,\n        ':hover $inactiveSection': slideBoxInactiveSectionStyles,\n        ':active $thumb': slideBoxActiveThumbStyles,\n        ':hover $thumb': slideBoxActiveThumbStyles,\n        $thumb: [{\n          borderWidth: 2,\n          borderStyle: 'solid',\n          borderColor: theme.palette.neutralSecondary,\n          borderRadius: 10,\n          boxSizing: 'border-box',\n          background: theme.palette.white,\n          display: 'block',\n          width: 16,\n          height: 16,\n          position: 'absolute'\n        }, props.vertical ? {\n          left: -6,\n          margin: '0 auto',\n          transform: 'translateY(8px)'\n        } : {\n          top: -6,\n          transform: getRTL() ? 'translateX(50%)' : 'translateX(-50%)'\n        }, props.showTransitions && {\n          transition: \"left \" + AnimationVariables.durationValue3 + \" \" + AnimationVariables.easeFunction1\n        }, props.disabled && {\n          borderColor: theme.palette.neutralTertiaryAlt,\n          selectors: (_d = {}, _d[HighContrastSelector] = {\n            borderColor: 'GrayText'\n          }, _d)\n        }]\n      }\n    }, props.vertical ? {\n      height: '100%',\n      width: 28,\n      padding: '8px 0' // Make room for thumb at bottom of line\n\n    } : {\n      height: 28,\n      width: 'auto',\n      padding: '0 8px' // Make room for thumb at ends of line\n\n    }].concat([props.showValue ? classNames.showValue : undefined], [props.showTransitions ? classNames.showTransitions : undefined]),\n    thumb: [classNames.thumb],\n    line: [classNames.line, {\n      display: 'flex',\n      position: 'relative',\n      selectors: {\n        $lineContainer: [{\n          borderRadius: 4,\n          boxSizing: 'border-box'\n        }, props.vertical ? {\n          width: 4,\n          height: '100%'\n        } : {\n          height: 4,\n          width: '100%'\n        }]\n      }\n    }, props.vertical ? {\n      height: '100%',\n      width: 4,\n      margin: '0 auto',\n      flexDirection: 'column-reverse'\n    } : {\n      width: '100%'\n    }],\n    lineContainer: [{}],\n    activeSection: [classNames.activeSection, {\n      background: theme.palette.neutralSecondary,\n      selectors: (_e = {}, _e[HighContrastSelector] = {\n        backgroundColor: 'WindowText'\n      }, _e)\n    }, props.showTransitions && {\n      transition: \"width \" + AnimationVariables.durationValue3 + \" \" + AnimationVariables.easeFunction1\n    }, props.disabled && {\n      background: theme.palette.neutralTertiaryAlt,\n      selectors: (_f = {}, _f[HighContrastSelector] = {\n        backgroundColor: 'GrayText',\n        borderColor: 'GrayText'\n      }, _f)\n    }],\n    inactiveSection: [classNames.inactiveSection, {\n      background: theme.palette.neutralTertiaryAlt,\n      selectors: (_g = {}, _g[HighContrastSelector] = {\n        border: '1px solid WindowText'\n      }, _g)\n    }, props.showTransitions && {\n      transition: \"width \" + AnimationVariables.durationValue3 + \" \" + AnimationVariables.easeFunction1\n    }, props.disabled && {\n      background: theme.palette.neutralLight,\n      selectors: (_h = {}, _h[HighContrastSelector] = {\n        backgroundColor: 'GrayText',\n        borderColor: 'GrayText'\n      }, _h)\n    }],\n    valueLabel: [classNames.valueLabel, {\n      flexShrink: 1,\n      width: 30,\n      lineHeight: '1' // using a string here meaning it's relative to the size of the font\n\n    }, props.vertical ? {\n      margin: '0 auto',\n      whiteSpace: 'nowrap',\n      width: 40\n    } : {\n      margin: '0 8px',\n      whiteSpace: 'nowrap',\n      width: 40\n    }]\n  };\n\n  var _a, _b, _c, _d, _e, _f, _g, _h;\n};","map":null,"metadata":{},"sourceType":"module"}