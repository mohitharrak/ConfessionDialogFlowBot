{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction, KeyCodes } from '../../Utilities';\nimport { PrimaryButton, DefaultButton, IconButton } from '../../Button';\nimport { Image, ImageFit } from '../../Image';\nvar getClassNames = classNamesFunction();\n\nvar TeachingBubbleContentBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TeachingBubbleContentBase, _super);\n\n  function TeachingBubbleContentBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.rootElement = React.createRef();\n\n    _this._onKeyDown = function (e) {\n      if (_this.props.onDismiss) {\n        if (e.which === KeyCodes.escape) {\n          _this.props.onDismiss();\n        }\n      }\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  TeachingBubbleContentBase.prototype.componentDidMount = function () {\n    if (this.props.onDismiss) {\n      document.addEventListener('keydown', this._onKeyDown, false);\n    }\n  };\n\n  TeachingBubbleContentBase.prototype.componentWillUnmount = function () {\n    if (this.props.onDismiss) {\n      document.removeEventListener('keydown', this._onKeyDown);\n    }\n  };\n\n  TeachingBubbleContentBase.prototype.focus = function () {\n    if (this.rootElement.current) {\n      this.rootElement.current.focus();\n    }\n  };\n\n  TeachingBubbleContentBase.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        illustrationImage = _a.illustrationImage,\n        primaryButtonProps = _a.primaryButtonProps,\n        secondaryButtonProps = _a.secondaryButtonProps,\n        headline = _a.headline,\n        hasCondensedHeadline = _a.hasCondensedHeadline,\n        hasCloseIcon = _a.hasCloseIcon,\n        onDismiss = _a.onDismiss,\n        closeButtonAriaLabel = _a.closeButtonAriaLabel,\n        hasSmallHeadline = _a.hasSmallHeadline,\n        isWide = _a.isWide,\n        styles = _a.styles,\n        theme = _a.theme,\n        ariaDescribedBy = _a.ariaDescribedBy,\n        ariaLabelledBy = _a.ariaLabelledBy;\n    var imageContent;\n    var headerContent;\n    var bodyContent;\n    var footerContent;\n    var closeButton;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      hasCondensedHeadline: hasCondensedHeadline,\n      hasSmallHeadline: hasSmallHeadline,\n      isWide: isWide,\n      primaryButtonClassName: primaryButtonProps ? primaryButtonProps.className : undefined,\n      secondaryButtonClassName: secondaryButtonProps ? secondaryButtonProps.className : undefined\n    });\n\n    if (illustrationImage && illustrationImage.src) {\n      imageContent = React.createElement(\"div\", {\n        className: classNames.imageContent\n      }, React.createElement(Image, tslib_1.__assign({}, illustrationImage)));\n    }\n\n    if (headline) {\n      var HeaderWrapperAs = typeof headline === 'string' ? 'p' : 'div';\n      headerContent = React.createElement(\"div\", {\n        className: classNames.header\n      }, React.createElement(HeaderWrapperAs, {\n        className: classNames.headline,\n        id: ariaLabelledBy\n      }, headline));\n    }\n\n    if (children) {\n      var BodyContentWrapperAs = typeof children === 'string' ? 'p' : 'div';\n      bodyContent = React.createElement(\"div\", {\n        className: classNames.body\n      }, React.createElement(BodyContentWrapperAs, {\n        className: classNames.subText,\n        id: ariaDescribedBy\n      }, children));\n    }\n\n    if (primaryButtonProps || secondaryButtonProps) {\n      footerContent = React.createElement(\"div\", {\n        className: classNames.footer\n      }, primaryButtonProps && React.createElement(PrimaryButton, tslib_1.__assign({}, primaryButtonProps, {\n        className: classNames.primaryButton\n      })), secondaryButtonProps && React.createElement(DefaultButton, tslib_1.__assign({}, secondaryButtonProps, {\n        className: classNames.secondaryButton\n      })));\n    }\n\n    if (hasCloseIcon) {\n      closeButton = React.createElement(IconButton, {\n        className: classNames.closeButton,\n        iconProps: {\n          iconName: 'Cancel'\n        },\n        title: closeButtonAriaLabel,\n        ariaLabel: closeButtonAriaLabel,\n        onClick: onDismiss\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classNames.content,\n      ref: this.rootElement,\n      role: 'dialog',\n      tabIndex: -1,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": ariaDescribedBy,\n      \"data-is-focusable\": true\n    }, imageContent, React.createElement(\"div\", {\n      className: classNames.bodyContent\n    }, headerContent, bodyContent, footerContent), closeButton);\n  }; // Specify default props values\n\n\n  TeachingBubbleContentBase.defaultProps = {\n    hasCondensedHeadline: false,\n    imageProps: {\n      imageFit: ImageFit.cover,\n      width: 364,\n      height: 130\n    }\n  };\n  return TeachingBubbleContentBase;\n}(BaseComponent);\n\nexport { TeachingBubbleContentBase };","map":null,"metadata":{},"sourceType":"module"}