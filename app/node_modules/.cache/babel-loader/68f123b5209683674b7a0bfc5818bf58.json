{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\nvar nameMap = {\n  start: 'flex-start',\n  end: 'flex-end'\n};\nvar GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner'\n};\nexport var styles = function styles(props, theme) {\n  var verticalFill = props.verticalFill,\n      maxWidth = props.maxWidth,\n      maxHeight = props.maxHeight,\n      horizontal = props.horizontal,\n      reversed = props.reversed,\n      gap = props.gap,\n      grow = props.grow,\n      wrap = props.wrap,\n      padding = props.padding,\n      horizontalAlign = props.horizontalAlign,\n      verticalAlign = props.verticalAlign,\n      disableShrink = props.disableShrink,\n      className = props.className;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  var _a = parseGap(gap, theme),\n      rowGap = _a.rowGap,\n      columnGap = _a.columnGap;\n\n  var horizontalMargin = \"\" + -0.5 * columnGap.value + columnGap.unit;\n  var verticalMargin = \"\" + -0.5 * rowGap.value + rowGap.unit; // styles to be applied to all direct children regardless of wrap or direction\n\n  var childStyles = {\n    textOverflow: 'ellipsis'\n  }; // selectors to be applied regardless of wrap or direction\n\n  var commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1\n    }\n  };\n\n  if (wrap) {\n    return {\n      root: [classNames.root, {\n        flexWrap: 'wrap',\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        width: 'auto',\n        overflow: 'visible',\n        height: '100%'\n      }, horizontalAlign && (_b = {}, _b[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _b), verticalAlign && (_c = {}, _c[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _c), className, {\n        // not allowed to be overridden by className\n        // since this is necessary in order to prevent collapsing margins\n        display: 'flex'\n      }, horizontal && {\n        height: verticalFill ? '100%' : 'auto'\n      }],\n      inner: [classNames.inner, {\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginLeft: horizontalMargin,\n        marginRight: horizontalMargin,\n        marginTop: verticalMargin,\n        marginBottom: verticalMargin,\n        overflow: 'visible',\n        boxSizing: 'border-box',\n        padding: parsePadding(padding, theme),\n        // avoid unnecessary calc() calls if horizontal gap is 0\n        width: columnGap.value === 0 ? '100%' : \"calc(100% + \" + columnGap.value + columnGap.unit + \")\",\n        maxWidth: '100vw',\n        selectors: tslib_1.__assign({\n          '> *': tslib_1.__assign({\n            margin: \"\" + 0.5 * rowGap.value + rowGap.unit + \" \" + 0.5 * columnGap.value + columnGap.unit\n          }, childStyles)\n        }, commonSelectors)\n      }, horizontalAlign && (_d = {}, _d[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _d), verticalAlign && (_e = {}, _e[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _e), horizontal && {\n        flexDirection: reversed ? 'row-reverse' : 'row',\n        // avoid unnecessary calc() calls if vertical gap is 0\n        height: rowGap.value === 0 ? '100%' : \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxWidth: columnGap.value === 0 ? '100%' : \"calc(100% - \" + columnGap.value + columnGap.unit + \")\"\n          }\n        }\n      }, !horizontal && {\n        flexDirection: reversed ? 'column-reverse' : 'column',\n        height: \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxHeight: rowGap.value === 0 ? '100%' : \"calc(100% - \" + rowGap.value + rowGap.unit + \")\"\n          }\n        }\n      }]\n    };\n  }\n\n  return {\n    root: [classNames.root, {\n      display: 'flex',\n      flexDirection: horizontal ? reversed ? 'row-reverse' : 'row' : reversed ? 'column-reverse' : 'column',\n      flexWrap: 'nowrap',\n      width: 'auto',\n      height: verticalFill ? '100%' : 'auto',\n      maxWidth: maxWidth,\n      maxHeight: maxHeight,\n      padding: parsePadding(padding, theme),\n      boxSizing: 'border-box',\n      selectors: tslib_1.__assign((_f = {\n        '> *': childStyles\n      }, _f[reversed ? '> *:not(:last-child)' : '> *:not(:first-child)'] = [horizontal && {\n        marginLeft: \"\" + columnGap.value + columnGap.unit\n      }, !horizontal && {\n        marginTop: \"\" + rowGap.value + rowGap.unit\n      }], _f), commonSelectors)\n    }, grow && {\n      flexGrow: grow === true ? 1 : grow,\n      overflow: 'hidden'\n    }, horizontalAlign && (_g = {}, _g[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _g), verticalAlign && (_h = {}, _h[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _h), className] // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n\n  };\n\n  var _b, _c, _d, _e, _f, _g, _h;\n};","map":null,"metadata":{},"sourceType":"module"}