{"ast":null,"code":"import _classCallCheck from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\ConfessionDialogFlowBot\\\\app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * quick ts implementation of example from\n * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n * with some minor improvements\n * @todo: test (?)\n * @todo: add node.js implementation with node's http inside. Just to make SDK cross-platform\n */\nvar XhrRequest =\n/*#__PURE__*/\nfunction () {\n  function XhrRequest() {\n    _classCallCheck(this, XhrRequest);\n  }\n\n  _createClass(XhrRequest, null, [{\n    key: \"ajax\",\n    // Method that performs the ajax request\n    value: function ajax(method, url) {\n      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n      // Creating a promise\n      return new Promise(function (resolve, reject) {\n        // Instantiates the XMLHttpRequest\n        var client = XhrRequest.createXMLHTTPObject();\n        var uri = url;\n        var payload = null; // Add given payload to get request\n\n        if (args && method === XhrRequest.Method.GET) {\n          uri += \"?\";\n          var argcount = 0;\n\n          for (var key in args) {\n            if (args.hasOwnProperty(key)) {\n              if (argcount++) {\n                uri += \"&\";\n              }\n\n              uri += encodeURIComponent(key) + \"=\" + encodeURIComponent(args[key]);\n            }\n          }\n        } else if (args) {\n          if (!headers) {\n            headers = {};\n          }\n\n          headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n          payload = JSON.stringify(args);\n        }\n\n        for (var _key in options) {\n          if (_key in client) {\n            client[_key] = options[_key];\n          }\n        } // hack: method[method] is somewhat like .toString for enum Method\n        // should be made in normal way\n\n\n        client.open(XhrRequest.Method[method], uri, true); // Add given headers\n\n        if (headers) {\n          for (var _key2 in headers) {\n            if (headers.hasOwnProperty(_key2)) {\n              client.setRequestHeader(_key2, headers[_key2]);\n            }\n          }\n        }\n\n        payload ? client.send(payload) : client.send();\n\n        client.onload = function () {\n          if (client.status >= 200 && client.status < 300) {\n            // Performs the function \"resolve\" when this.status is equal to 2xx\n            resolve(client);\n          } else {\n            // Performs the function \"reject\" when this.status is different than 2xx\n            reject(client);\n          }\n        };\n\n        client.onerror = function () {\n          reject(client);\n        };\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return XhrRequest.ajax(XhrRequest.Method.GET, url, payload, headers, options);\n    }\n  }, {\n    key: \"post\",\n    value: function post(url) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return XhrRequest.ajax(XhrRequest.Method.POST, url, payload, headers, options);\n    }\n  }, {\n    key: \"put\",\n    value: function put(url) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return XhrRequest.ajax(XhrRequest.Method.PUT, url, payload, headers, options);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(url) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var headers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      return XhrRequest.ajax(XhrRequest.Method.DELETE, url, payload, headers, options);\n    }\n  }, {\n    key: \"createXMLHTTPObject\",\n    value: function createXMLHTTPObject() {\n      var xmlhttp = null;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = XhrRequest.XMLHttpFactories[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var i = _step.value;\n\n          try {\n            xmlhttp = i();\n          } catch (e) {\n            continue;\n          }\n\n          break;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return xmlhttp;\n    }\n  }]);\n\n  return XhrRequest;\n}();\n\nXhrRequest.XMLHttpFactories = [function () {\n  return new XMLHttpRequest();\n}, function () {\n  return new window[\"ActiveXObject\"](\"Msxml2.XMLHTTP\");\n}, function () {\n  return new window[\"ActiveXObject\"](\"Msxml3.XMLHTTP\");\n}, function () {\n  return new window[\"ActiveXObject\"](\"Microsoft.XMLHTTP\");\n}];\n\n(function (XhrRequest) {\n  var Method;\n\n  (function (Method) {\n    Method[Method[\"GET\"] = \"GET\"] = \"GET\";\n    Method[Method[\"POST\"] = \"POST\"] = \"POST\";\n    Method[Method[\"PUT\"] = \"PUT\"] = \"PUT\";\n    Method[Method[\"DELETE\"] = \"DELETE\"] = \"DELETE\";\n  })(Method = XhrRequest.Method || (XhrRequest.Method = {}));\n})(XhrRequest || (XhrRequest = {}));\n\nexport default XhrRequest;","map":null,"metadata":{},"sourceType":"module"}