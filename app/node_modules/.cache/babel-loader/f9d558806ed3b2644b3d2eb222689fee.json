{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction, getId, allowScrollOnElement } from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { animationDuration } from './Modal.styles';\nimport { Overlay } from '../../Overlay';\nimport { Layer } from '../../Layer';\nimport { Popup } from '../Popup/index';\nimport { withResponsiveMode, ResponsiveMode } from '../../utilities/decorators/withResponsiveMode'; // @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\n\nvar DefaultLayerProps = {\n  eventBubblingEnabled: false\n};\nvar getClassNames = classNamesFunction();\n\nvar ModalBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ModalBase, _super);\n\n  function ModalBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusTrapZone = React.createRef(); // Allow the user to scroll within the modal but not on the body\n\n    _this._allowScrollOnModal = function (elt) {\n      if (elt) {\n        allowScrollOnElement(elt, _this._events);\n      } else {\n        _this._events.off(_this._scrollableContent);\n      }\n\n      _this._scrollableContent = elt;\n    };\n\n    _this.state = {\n      id: getId('Modal'),\n      isOpen: props.isOpen,\n      isVisible: props.isOpen,\n      hasBeenOpened: props.isOpen\n    };\n\n    _this._warnDeprecations({\n      onLayerDidMount: 'layerProps.onLayerDidMount'\n    });\n\n    return _this;\n  }\n\n  ModalBase.prototype.componentWillReceiveProps = function (newProps) {\n    clearTimeout(this._onModalCloseTimer); // Opening the dialog\n\n    if (newProps.isOpen) {\n      if (!this.state.isOpen) {\n        // First Open\n        this.setState({\n          isOpen: true\n        });\n      } else {\n        // Modal has been opened\n        // Reopen during closing\n        this.setState({\n          hasBeenOpened: true,\n          isVisible: true\n        });\n\n        if (newProps.topOffsetFixed) {\n          var dialogMain = document.getElementsByClassName('ms-Dialog-main');\n          var modalRectangle = void 0;\n\n          if (dialogMain.length > 0) {\n            modalRectangle = dialogMain[0].getBoundingClientRect();\n            this.setState({\n              modalRectangleTop: modalRectangle.top\n            });\n          }\n        }\n      }\n    } // Closing the dialog\n\n\n    if (!newProps.isOpen && this.state.isOpen) {\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(animationDuration) * 1000);\n      this.setState({\n        isVisible: false\n      });\n    }\n  };\n\n  ModalBase.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (!prevProps.isOpen && !prevState.isVisible) {\n      this.setState({\n        isVisible: true\n      });\n    }\n  };\n\n  ModalBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        containerClassName = _a.containerClassName,\n        scrollableContentClassName = _a.scrollableContentClassName,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n        firstFocusableSelector = _a.firstFocusableSelector,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n        isBlocking = _a.isBlocking,\n        isClickableOutsideFocusTrap = _a.isClickableOutsideFocusTrap,\n        isDarkOverlay = _a.isDarkOverlay,\n        onDismiss = _a.onDismiss,\n        layerProps = _a.layerProps,\n        responsiveMode = _a.responsiveMode,\n        titleAriaId = _a.titleAriaId,\n        styles = _a.styles,\n        subtitleAriaId = _a.subtitleAriaId,\n        theme = _a.theme,\n        topOffsetFixed = _a.topOffsetFixed,\n        onLayerDidMount = _a.onLayerDidMount,\n        isModeless = _a.isModeless;\n    var _b = this.state,\n        isOpen = _b.isOpen,\n        isVisible = _b.isVisible,\n        hasBeenOpened = _b.hasBeenOpened,\n        modalRectangleTop = _b.modalRectangleTop;\n\n    if (!isOpen) {\n      return null;\n    }\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      containerClassName: containerClassName,\n      scrollableContentClassName: scrollableContentClassName,\n      isOpen: isOpen,\n      isVisible: isVisible,\n      hasBeenOpened: hasBeenOpened,\n      modalRectangleTop: modalRectangleTop,\n      topOffsetFixed: topOffsetFixed,\n      isModeless: isModeless\n    }); // if the modal is modeless, add the classname to correctly style the layer\n\n    var layerClassName = isModeless ? this.props.className ? this.props.className + \" \" + classNames.layer : classNames.layer : this.props.className;\n\n    var mergedLayerProps = tslib_1.__assign({}, DefaultLayerProps, this.props.layerProps, {\n      onLayerDidMount: layerProps && layerProps.onLayerDidMount ? layerProps.onLayerDidMount : onLayerDidMount,\n      className: layerClassName,\n      insertFirst: isModeless\n    }); // @temp tuatology - Will adjust this to be a panel at certain breakpoints\n\n\n    if (responsiveMode >= ResponsiveMode.small) {\n      return React.createElement(Layer, tslib_1.__assign({}, mergedLayerProps), React.createElement(Popup, {\n        role: isModeless || !isBlocking ? 'dialog' : 'alertdialog',\n        \"aria-modal\": !isModeless,\n        ariaLabelledBy: titleAriaId,\n        ariaDescribedBy: subtitleAriaId,\n        onDismiss: onDismiss\n      }, React.createElement(\"div\", {\n        className: classNames.root\n      }, !isModeless && React.createElement(Overlay, {\n        isDarkThemed: isDarkOverlay,\n        onClick: isBlocking ? undefined : onDismiss\n      }), React.createElement(FocusTrapZone, {\n        componentRef: this._focusTrapZone,\n        className: classNames.main,\n        elementToFocusOnDismiss: elementToFocusOnDismiss,\n        isClickableOutsideFocusTrap: isModeless || isClickableOutsideFocusTrap || !isBlocking,\n        ignoreExternalFocusing: ignoreExternalFocusing,\n        forceFocusInsideTrap: isModeless ? !isModeless : forceFocusInsideTrap,\n        firstFocusableSelector: firstFocusableSelector\n      }, React.createElement(\"div\", {\n        ref: this._allowScrollOnModal,\n        className: classNames.scrollableContent,\n        \"data-is-scrollable\": true\n      }, this.props.children)))));\n    }\n\n    return null;\n  };\n\n  ModalBase.prototype.focus = function () {\n    if (this._focusTrapZone.current) {\n      this._focusTrapZone.current.focus();\n    }\n  }; // Watch for completed animations and set the state\n\n\n  ModalBase.prototype._onModalClose = function () {\n    this.setState({\n      isOpen: false\n    }); // Call the onDismiss callback\n\n    if (this.props.onDismissed) {\n      this.props.onDismissed();\n    }\n  };\n\n  ModalBase.defaultProps = {\n    isOpen: false,\n    isDarkOverlay: true,\n    isBlocking: false,\n    className: '',\n    containerClassName: ''\n  };\n  ModalBase = tslib_1.__decorate([withResponsiveMode], ModalBase);\n  return ModalBase;\n}(BaseComponent);\n\nexport { ModalBase };","map":null,"metadata":{},"sourceType":"module"}