{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/* tslint:disable */\n\nimport * as React from 'react';\n/* tslint:enable */\n\nimport { BaseSelectedItemsList } from '../BaseSelectedItemsList';\nimport { ExtendedSelectedItem } from './Items/ExtendedSelectedItem';\nimport { SelectedItemWithContextMenu } from './Items/SelectedItemWithContextMenu';\nimport { EditingItem } from './Items/EditingItem';\n\nvar BasePeopleSelectedItemsList =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(BasePeopleSelectedItemsList, _super);\n\n  function BasePeopleSelectedItemsList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return BasePeopleSelectedItemsList;\n}(BaseSelectedItemsList);\n\nexport { BasePeopleSelectedItemsList };\n/**\r\n * Standard People Picker.\r\n */\n\nvar SelectedPeopleList =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SelectedPeopleList, _super);\n\n  function SelectedPeopleList() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.replaceItem = function (itemToReplace, itemsToReplaceWith) {\n      var items = _this.state.items;\n      var index = items.indexOf(itemToReplace);\n\n      if (index > -1) {\n        var newItems = items.slice(0, index).concat(itemsToReplaceWith).concat(items.slice(index + 1));\n\n        _this.updateItems(newItems);\n      }\n    };\n\n    _this.renderItems = function () {\n      var items = _this.state.items; // tslint:disable-next-line:no-any\n\n      return items.map(function (item, index) {\n        return _this._renderItem(item, index);\n      });\n    };\n\n    _this._beginEditing = function (item) {\n      item.isEditing = true;\n\n      _this.forceUpdate();\n    }; // tslint:disable-next-line:no-any\n\n\n    _this._completeEditing = function (oldItem, newItem) {\n      oldItem.isEditing = false;\n\n      _this.replaceItem(oldItem, newItem);\n    };\n\n    return _this;\n  } // tslint:disable-next-line:no-any\n\n\n  SelectedPeopleList.prototype._renderItem = function (item, index) {\n    var _this = this;\n\n    var removeButtonAriaLabel = this.props.removeButtonAriaLabel;\n    var props = {\n      item: item,\n      index: index,\n      key: item.key ? item.key : index,\n      selected: this.selection.isIndexSelected(index),\n      onRemoveItem: function onRemoveItem() {\n        return _this.removeItem(item);\n      },\n      onItemChange: this.onItemChange,\n      removeButtonAriaLabel: removeButtonAriaLabel,\n      onCopyItem: function onCopyItem(itemToCopy) {\n        return _this.copyItems([itemToCopy]);\n      },\n      onExpandItem: this.props.onExpandGroup ? function () {\n        return _this.props.onExpandGroup(item);\n      } : undefined,\n      menuItems: this._createMenuItems(item)\n    };\n    var hasContextMenu = props.menuItems.length > 0;\n\n    if (item.isEditing && hasContextMenu) {\n      return React.createElement(EditingItem, tslib_1.__assign({}, props, {\n        onRenderFloatingPicker: this.props.onRenderFloatingPicker,\n        floatingPickerProps: this.props.floatingPickerProps,\n        onEditingComplete: this._completeEditing,\n        getEditingItemText: this.props.getEditingItemText\n      }));\n    } else {\n      var onRenderItem = this.props.onRenderItem;\n      var renderedItem = onRenderItem(props);\n      return hasContextMenu ? React.createElement(SelectedItemWithContextMenu, {\n        renderedItem: renderedItem,\n        beginEditing: this._beginEditing,\n        menuItems: this._createMenuItems(props.item),\n        item: props.item\n      }) : renderedItem;\n    }\n  }; // tslint:disable-next-line:no-any\n\n\n  SelectedPeopleList.prototype._createMenuItems = function (item) {\n    var _this = this;\n\n    var menuItems = [];\n\n    if (this.props.editMenuItemText && this.props.getEditingItemText) {\n      menuItems.push({\n        key: 'Edit',\n        text: this.props.editMenuItemText,\n        onClick: function onClick(ev, menuItem) {\n          _this._beginEditing(menuItem.data);\n        },\n        data: item\n      });\n    }\n\n    if (this.props.removeMenuItemText) {\n      menuItems.push({\n        key: 'Remove',\n        text: this.props.removeMenuItemText,\n        onClick: function onClick(ev, menuItem) {\n          _this.removeItem(menuItem.data);\n        },\n        data: item\n      });\n    }\n\n    if (this.props.copyMenuItemText) {\n      menuItems.push({\n        key: 'Copy',\n        text: this.props.copyMenuItemText,\n        onClick: function onClick(ev, menuItem) {\n          if (_this.props.onCopyItems) {\n            _this.copyItems([menuItem.data]);\n          }\n        },\n        data: item\n      });\n    }\n\n    return menuItems;\n  }; // tslint:disable-next-line:no-any\n\n\n  SelectedPeopleList.defaultProps = {\n    onRenderItem: function onRenderItem(props) {\n      return React.createElement(ExtendedSelectedItem, tslib_1.__assign({}, props));\n    }\n  };\n  return SelectedPeopleList;\n}(BasePeopleSelectedItemsList);\n\nexport { SelectedPeopleList };","map":null,"metadata":{},"sourceType":"module"}