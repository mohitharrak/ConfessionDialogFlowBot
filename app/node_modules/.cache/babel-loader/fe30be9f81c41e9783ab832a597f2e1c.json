{"ast":null,"code":"import { FontSizes, concatStyleSets, HighContrastSelector } from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\n\nvar _getDisabledStyles = memoizeFunction(function (theme) {\n  var semanticColors = theme.semanticColors;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonBackgroundColorDisabled = semanticColors.disabledBackground;\n  return {\n    backgroundColor: SpinButtonBackgroundColorDisabled,\n    borderColor: 'transparent',\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: SpinButtonTextColorDisabled,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  };\n\n  var _a;\n});\n\nexport var getArrowButtonStyles = memoizeFunction(function (theme, isUpArrow, customSpecificArrowStyles) {\n  var semanticColors = theme.semanticColors;\n  var ArrowButtonTextColor = semanticColors.buttonText;\n  var ArrowButtonTextColorHovered = semanticColors.buttonTextHovered;\n  var ArrowButtonTextColorPressed = semanticColors.buttonTextChecked;\n  var ArrowButtonBackgroundHovered = semanticColors.buttonBackgroundHovered;\n  var ArrowButtonBackgroundPressed = semanticColors.buttonBackgroundChecked;\n  var defaultArrowButtonStyles = {\n    root: {\n      outline: 'none',\n      display: 'block',\n      height: '50%',\n      width: '14px',\n      padding: '0',\n      backgroundColor: 'transparent',\n      textAlign: 'center',\n      cursor: 'default',\n      color: ArrowButtonTextColor\n    },\n    rootHovered: {\n      backgroundColor: ArrowButtonBackgroundHovered,\n      color: ArrowButtonTextColorHovered\n    },\n    rootChecked: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _a)\n    },\n    rootPressed: {\n      backgroundColor: ArrowButtonBackgroundPressed,\n      color: ArrowButtonTextColorPressed,\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        color: 'HighlightText'\n      }, _b)\n    },\n    rootDisabled: {\n      opacity: 0.5,\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _c)\n    },\n    icon: {\n      fontSize: '6px',\n      marginTop: '0',\n      marginRight: '0',\n      marginBottom: '0',\n      marginLeft: '0'\n    }\n  }; // No specific styles needed as of now.\n\n  var defaultUpArrowButtonStyles = {};\n  var defaultDownArrowButtonStyles = {};\n  return concatStyleSets(defaultArrowButtonStyles, isUpArrow ? defaultUpArrowButtonStyles : defaultDownArrowButtonStyles, customSpecificArrowStyles);\n\n  var _a, _b, _c;\n});\nexport var getStyles = memoizeFunction(function (theme, customStyles) {\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors;\n  var SpinButtonRootBorderColor = semanticColors.inputBorder;\n  var SpinButtonRootBorderColorHovered = semanticColors.inputBorderHovered;\n  var SpinButtonRootBorderColorFocused = semanticColors.inputFocusBorderAlt;\n  var SpinButtonTextColorDisabled = semanticColors.disabledText;\n  var SpinButtonInputTextColor = semanticColors.bodyText;\n  var SpinButtonInputTextColorSelected = palette.white;\n  var SpinButtonInputBackgroundColorSelected = palette.themePrimary;\n  var SpinButtonIconDisabledColor = semanticColors.disabledText;\n  var defaultStyles = {\n    root: {\n      outline: 'none',\n      fontSize: FontSizes.medium,\n      width: '100%',\n      minWidth: '86px'\n    },\n    labelWrapper: {\n      display: 'inline-flex'\n    },\n    labelWrapperStart: {\n      float: 'left',\n      marginRight: '10px'\n    },\n    labelWrapperEnd: {\n      float: 'right',\n      marginLeft: '10px'\n    },\n    labelWrapperTop: {\n      marginBottom: '10px'\n    },\n    labelWrapperBottom: {\n      marginTop: '10px'\n    },\n    icon: {\n      padding: '2px 5px',\n      fontSize: '20px'\n    },\n    iconDisabled: {\n      color: SpinButtonIconDisabledColor\n    },\n    label: {\n      pointerEvents: 'none',\n      padding: '2px 0'\n    },\n    labelDisabled: {\n      cursor: 'default',\n      color: SpinButtonTextColorDisabled,\n      selectors: (_a = {}, _a[HighContrastSelector] = {\n        color: 'GrayText'\n      }, _a)\n    },\n    spinButtonWrapper: {\n      display: 'flex',\n      boxSizing: 'border-box',\n      height: '32px',\n      minWidth: '86px',\n      borderWidth: '1px',\n      borderStyle: 'solid',\n      borderColor: SpinButtonRootBorderColor\n    },\n    spinButtonWrapperTopBottom: {\n      width: '100%'\n    },\n    spinButtonWrapperHovered: {\n      borderColor: SpinButtonRootBorderColorHovered,\n      outline: '2px dashed transparent',\n      selectors: (_b = {}, _b[HighContrastSelector] = {\n        borderColor: 'Highlight',\n        outline: 'none'\n      }, _b)\n    },\n    spinButtonWrapperFocused: {\n      borderColor: SpinButtonRootBorderColorFocused,\n      outline: '2px dashed transparent',\n      selectors: (_c = {}, _c[HighContrastSelector] = {\n        borderColor: 'Highlight',\n        outline: 'none'\n      }, _c)\n    },\n    spinButtonWrapperDisabled: _getDisabledStyles(theme),\n    input: {\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      borderStyle: 'none',\n      marginTop: '0',\n      marginRight: '0',\n      marginBottom: '0',\n      marginLeft: '0',\n      fontSize: FontSizes.medium,\n      color: SpinButtonInputTextColor,\n      height: '100%',\n      padding: '0 12px',\n      outline: '0',\n      textOverflow: 'ellipsis',\n      display: 'block',\n      float: 'left',\n      width: 'calc(100% - 14px)',\n      minWidth: '72px',\n      overflow: 'hidden',\n      cursor: 'text',\n      userSelect: 'text'\n    },\n    inputTextSelected: {\n      backgroundColor: SpinButtonInputBackgroundColorSelected,\n      color: SpinButtonInputTextColorSelected,\n      selectors: (_d = {}, _d[HighContrastSelector] = {\n        backgroundColor: 'Highlight',\n        borderColor: 'Highlight',\n        color: 'HighlightText'\n      }, _d)\n    },\n    inputDisabled: _getDisabledStyles(theme),\n    arrowButtonsContainer: {\n      outline: 'none',\n      fontSize: '12px',\n      display: 'block',\n      float: 'left',\n      height: '100%',\n      cursor: 'default',\n      padding: '0',\n      boxSizing: 'border-box'\n    },\n    arrowButtonsContainerDisabled: _getDisabledStyles(theme)\n  };\n  return concatStyleSets(defaultStyles, customStyles);\n\n  var _a, _b, _c, _d;\n});","map":null,"metadata":{},"sourceType":"module"}