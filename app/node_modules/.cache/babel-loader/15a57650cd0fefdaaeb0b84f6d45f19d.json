{"ast":null,"code":"import { Shade } from '../../utilities/color/shades';\nimport { getColorFromString } from '../../utilities/color/colors';\nimport { mapEnumByName } from '../../Utilities';\n/* This is the set of rules for our default theme.\r\n   We start with three base slots, defining the background, foreground (text), and\r\n   primary color (sometimes called theme color). Each Fabric slot is generated from\r\n   shades (or tints) of one of those three, creating the Fabric palette.\r\n   Then, we have semantic slots, the new thing intended to eventually replace the\r\n   Fabric palette. The semantic slots inherit from the Fabric palette. */\n\n/* The most minimal set of slots we start with. All other ones can be generated based on rules.\r\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety.\r\n * For now, we are only dealing with color. */\n\nexport var BaseSlots;\n\n(function (BaseSlots) {\n  BaseSlots[BaseSlots[\"primaryColor\"] = 0] = \"primaryColor\";\n  BaseSlots[BaseSlots[\"backgroundColor\"] = 1] = \"backgroundColor\";\n  BaseSlots[BaseSlots[\"foregroundColor\"] = 2] = \"foregroundColor\";\n})(BaseSlots || (BaseSlots = {}));\n/* The original Fabric palette, only for back-compat. */\n\n\nexport var FabricSlots;\n\n(function (FabricSlots) {\n  FabricSlots[FabricSlots[\"themePrimary\"] = 0] = \"themePrimary\";\n  FabricSlots[FabricSlots[\"themeLighterAlt\"] = 1] = \"themeLighterAlt\";\n  FabricSlots[FabricSlots[\"themeLighter\"] = 2] = \"themeLighter\";\n  FabricSlots[FabricSlots[\"themeLight\"] = 3] = \"themeLight\";\n  FabricSlots[FabricSlots[\"themeTertiary\"] = 4] = \"themeTertiary\";\n  FabricSlots[FabricSlots[\"themeSecondary\"] = 5] = \"themeSecondary\";\n  FabricSlots[FabricSlots[\"themeDarkAlt\"] = 6] = \"themeDarkAlt\";\n  FabricSlots[FabricSlots[\"themeDark\"] = 7] = \"themeDark\";\n  FabricSlots[FabricSlots[\"themeDarker\"] = 8] = \"themeDarker\";\n  FabricSlots[FabricSlots[\"neutralLighterAlt\"] = 9] = \"neutralLighterAlt\";\n  FabricSlots[FabricSlots[\"neutralLighter\"] = 10] = \"neutralLighter\";\n  FabricSlots[FabricSlots[\"neutralLight\"] = 11] = \"neutralLight\";\n  FabricSlots[FabricSlots[\"neutralQuaternaryAlt\"] = 12] = \"neutralQuaternaryAlt\";\n  FabricSlots[FabricSlots[\"neutralQuaternary\"] = 13] = \"neutralQuaternary\";\n  FabricSlots[FabricSlots[\"neutralTertiaryAlt\"] = 14] = \"neutralTertiaryAlt\";\n  FabricSlots[FabricSlots[\"neutralTertiary\"] = 15] = \"neutralTertiary\"; // deprecated: neutralSecondaryAlt, // BaseSlots.foregroundColor, Shade[Shade.Shade4]);\n\n  FabricSlots[FabricSlots[\"neutralSecondary\"] = 16] = \"neutralSecondary\";\n  FabricSlots[FabricSlots[\"neutralPrimaryAlt\"] = 17] = \"neutralPrimaryAlt\";\n  FabricSlots[FabricSlots[\"neutralPrimary\"] = 18] = \"neutralPrimary\";\n  FabricSlots[FabricSlots[\"neutralDark\"] = 19] = \"neutralDark\";\n  FabricSlots[FabricSlots[\"black\"] = 20] = \"black\";\n  FabricSlots[FabricSlots[\"white\"] = 21] = \"white\"; // BaseSlots.backgroundColor, Shade[Shade.Unshaded]);\n})(FabricSlots || (FabricSlots = {}));\n/* List of all the semantic color slots for this theme.\r\n * This is not so much an enum as it is a list. The enum is used to insure \"type\"-safety. */\n\n\nexport var SemanticColorSlots;\n\n(function (SemanticColorSlots) {\n  SemanticColorSlots[SemanticColorSlots[\"bodyBackground\"] = 0] = \"bodyBackground\";\n  SemanticColorSlots[SemanticColorSlots[\"bodyText\"] = 1] = \"bodyText\";\n  SemanticColorSlots[SemanticColorSlots[\"disabledBackground\"] = 2] = \"disabledBackground\";\n  SemanticColorSlots[SemanticColorSlots[\"disabledText\"] = 3] = \"disabledText\";\n})(SemanticColorSlots || (SemanticColorSlots = {}));\n\nexport function themeRulesStandardCreator() {\n  var slotRules = {};\n  /*** BASE COLORS and their SHADES */\n  // iterate through each base slot and make the SlotRules for those\n\n  mapEnumByName(BaseSlots, function (baseSlot) {\n    // first make the SlotRule for the unshaded base Color\n    slotRules[baseSlot] = {\n      name: baseSlot,\n      isCustomized: true,\n      dependentRules: []\n    }; // then make a rule for each shade of this base color, but skip unshaded\n\n    mapEnumByName(Shade, function (shadeName, shadeValue) {\n      if (shadeName === Shade[Shade.Unshaded]) {\n        return;\n      }\n\n      var inherits = slotRules[baseSlot];\n      var thisSlotRule = {\n        name: baseSlot + shadeName,\n        inherits: slotRules[baseSlot],\n        asShade: shadeValue,\n        isCustomized: false,\n        isBackgroundShade: baseSlot === BaseSlots[BaseSlots.backgroundColor] ? true : false,\n        dependentRules: []\n      };\n      slotRules[baseSlot + shadeName] = thisSlotRule;\n      inherits.dependentRules.push(thisSlotRule);\n      return void 0;\n    });\n    return void 0;\n  }); // set default colors for the base colors\n\n  slotRules[BaseSlots[BaseSlots.primaryColor]].color = getColorFromString('#0078d4');\n  slotRules[BaseSlots[BaseSlots.backgroundColor]].color = getColorFromString('#fff');\n  slotRules[BaseSlots[BaseSlots.foregroundColor]].color = getColorFromString('#333'); // set default colors for shades (the slot rules were already created above and will be used if the base colors ever change)\n\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade1]].color = getColorFromString('#eff6fc');\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade2]].color = getColorFromString('#deecf9');\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade3]].color = getColorFromString('#c7e0f4');\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade4]].color = getColorFromString('#71afe5');\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade5]].color = getColorFromString('#2b88d8');\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade6]].color = getColorFromString('#106ebe');\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade7]].color = getColorFromString('#005a9e');\n  slotRules[BaseSlots[BaseSlots.primaryColor] + Shade[Shade.Shade8]].color = getColorFromString('#004578'); // set default colors for shades (the slot rules were already created above and will be used if the base colors ever change)\n\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade1]].color = getColorFromString('#eaeaea');\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade2]].color = getColorFromString('#c8c8c8');\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade3]].color = getColorFromString('#a6a6a6');\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade4]].color = getColorFromString('#767676');\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade5]].color = getColorFromString('#666666');\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade6]].color = getColorFromString('#3c3c3c');\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade7]].color = getColorFromString('#212121');\n  slotRules[BaseSlots[BaseSlots.foregroundColor] + Shade[Shade.Shade8]].color = getColorFromString('#000000');\n\n  function _makeFabricSlotRule(slotName, inheritedBase, inheritedShade, isBackgroundShade) {\n    if (isBackgroundShade === void 0) {\n      isBackgroundShade = false;\n    }\n\n    var inherits = slotRules[BaseSlots[inheritedBase]];\n    var thisSlotRule = {\n      name: slotName,\n      inherits: inherits,\n      asShade: inheritedShade,\n      isCustomized: false,\n      isBackgroundShade: isBackgroundShade,\n      dependentRules: []\n    };\n    slotRules[slotName] = thisSlotRule;\n    inherits.dependentRules.push(thisSlotRule);\n  }\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themePrimary], BaseSlots.primaryColor, Shade.Unshaded);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighterAlt], BaseSlots.primaryColor, Shade.Shade1);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLighter], BaseSlots.primaryColor, Shade.Shade2);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeLight], BaseSlots.primaryColor, Shade.Shade3);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeTertiary], BaseSlots.primaryColor, Shade.Shade4);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeSecondary], BaseSlots.primaryColor, Shade.Shade5);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarkAlt], BaseSlots.primaryColor, Shade.Shade6);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDark], BaseSlots.primaryColor, Shade.Shade7);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.themeDarker], BaseSlots.primaryColor, Shade.Shade8);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighterAlt], BaseSlots.backgroundColor, Shade.Shade1, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLighter], BaseSlots.backgroundColor, Shade.Shade2, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralLight], BaseSlots.backgroundColor, Shade.Shade3, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternaryAlt], BaseSlots.backgroundColor, Shade.Shade4, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralQuaternary], BaseSlots.backgroundColor, Shade.Shade5, true);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiaryAlt], BaseSlots.backgroundColor, Shade.Shade6, true); // bg6 or fg2\n\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralTertiary], BaseSlots.foregroundColor, Shade.Shade3);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralSecondary], BaseSlots.foregroundColor, Shade.Shade4);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimaryAlt], BaseSlots.foregroundColor, Shade.Shade5);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralPrimary], BaseSlots.foregroundColor, Shade.Unshaded);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.neutralDark], BaseSlots.foregroundColor, Shade.Shade7);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.black], BaseSlots.foregroundColor, Shade.Shade8);\n\n  _makeFabricSlotRule(FabricSlots[FabricSlots.white], BaseSlots.backgroundColor, Shade.Unshaded, true); // manually set initial colors for the primary-based Fabric slots to match the default theme\n\n\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].color = getColorFromString('#eff6fc');\n  slotRules[FabricSlots[FabricSlots.themeLighter]].color = getColorFromString('#deecf9');\n  slotRules[FabricSlots[FabricSlots.themeLight]].color = getColorFromString('#c7e0f4');\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].color = getColorFromString('#71afe5');\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].color = getColorFromString('#2b88d8');\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].color = getColorFromString('#106ebe');\n  slotRules[FabricSlots[FabricSlots.themeDark]].color = getColorFromString('#005a9e');\n  slotRules[FabricSlots[FabricSlots.themeDarker]].color = getColorFromString('#004578');\n  slotRules[FabricSlots[FabricSlots.themeLighterAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLighter]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeLight]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeTertiary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeSecondary]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDarkAlt]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDark]].isCustomized = true;\n  slotRules[FabricSlots[FabricSlots.themeDarker]].isCustomized = true;\n  /*** SEMANTIC SLOTS */\n  // This code is commented out for now but left for future semantic color customization.\n  // create the SlotRule for a semantic slot\n  // function _makeSemanticSlotRule(semanticSlot: SemanticColorSlots, inheritedFabricSlot: FabricSlots): void {\n  //   const inherits = slotRules[FabricSlots[inheritedFabricSlot]];\n  //   const thisSlotRule = {\n  //     name: SemanticColorSlots[semanticSlot],\n  //     inherits: slotRules[FabricSlots[inheritedFabricSlot]],\n  //     isCustomized: false,\n  //     dependentRules: []\n  //   };\n  //   slotRules[SemanticColorSlots[semanticSlot]] = thisSlotRule;\n  //   inherits.dependentRules.push(thisSlotRule);\n  // }\n  // Basic simple slots\n  // _makeSemanticSlotRule(SemanticColorSlots.bodyBackground, FabricSlots.white);\n  // _makeSemanticSlotRule(SemanticColorSlots.bodyText, FabricSlots.neutralPrimary);\n\n  return slotRules;\n}","map":null,"metadata":{},"sourceType":"module"}