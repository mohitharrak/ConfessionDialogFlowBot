{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction, getId } from '../../Utilities';\nimport { DialogType } from './DialogContent.types';\nimport { Modal } from '../../Modal';\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\nvar getClassNames = classNamesFunction();\nimport { DialogContent } from './DialogContent';\nvar DefaultModalProps = {\n  isDarkOverlay: false,\n  isBlocking: false,\n  className: '',\n  containerClassName: '',\n  topOffsetFixed: false\n};\nvar DefaultDialogContentProps = {\n  type: DialogType.normal,\n  className: '',\n  topButtonsProps: []\n};\n\nvar DialogBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DialogBase, _super);\n\n  function DialogBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getSubTextId = function () {\n      var _a = _this.props,\n          ariaDescribedById = _a.ariaDescribedById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          subText = _a.subText;\n      var id = ariaDescribedById || modalProps && modalProps.subtitleAriaId;\n\n      if (!id) {\n        id = (subText || dialogContentProps && dialogContentProps.subText) && _this._defaultSubTextId;\n      }\n\n      return id;\n    };\n\n    _this._getTitleTextId = function () {\n      var _a = _this.props,\n          ariaLabelledById = _a.ariaLabelledById,\n          modalProps = _a.modalProps,\n          dialogContentProps = _a.dialogContentProps,\n          title = _a.title;\n      var id = ariaLabelledById || modalProps && modalProps.titleAriaId;\n\n      if (!id) {\n        id = (title || dialogContentProps && dialogContentProps.title) && _this._defaultTitleTextId;\n      }\n\n      return id;\n    };\n\n    _this._id = getId('Dialog');\n    _this._defaultTitleTextId = _this._id + '-title';\n    _this._defaultSubTextId = _this._id + '-subText';\n\n    _this._warnDeprecations({\n      isOpen: 'hidden',\n      type: 'dialogContentProps.type',\n      subText: 'dialogContentProps.subText',\n      contentClassName: 'dialogContentProps.className',\n      topButtonsProps: 'dialogContentProps.topButtonsProps',\n      className: 'modalProps.className',\n      isDarkOverlay: 'modalProps.isDarkOverlay',\n      isBlocking: 'modalProps.isBlocking',\n      containerClassName: 'modalProps.containerClassName',\n      onDismissed: 'modalProps.onDismissed',\n      onLayerDidMount: 'modalProps.layerProps.onLayerDidMount',\n      ariaDescribedById: 'modalProps.subtitleAriaId',\n      ariaLabelledById: 'modalProps.titleAriaId'\n    });\n\n    return _this;\n  }\n\n  DialogBase.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        containerClassName = _a.containerClassName,\n        contentClassName = _a.contentClassName,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n        firstFocusableSelector = _a.firstFocusableSelector,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        styles = _a.styles,\n        hidden = _a.hidden,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n        isBlocking = _a.isBlocking,\n        isClickableOutsideFocusTrap = _a.isClickableOutsideFocusTrap,\n        isDarkOverlay = _a.isDarkOverlay,\n        isOpen = _a.isOpen,\n        onDismiss = _a.onDismiss,\n        onDismissed = _a.onDismissed,\n        onLayerDidMount = _a.onLayerDidMount,\n        responsiveMode = _a.responsiveMode,\n        subText = _a.subText,\n        theme = _a.theme,\n        title = _a.title,\n        topButtonsProps = _a.topButtonsProps,\n        type = _a.type,\n        minWidth = _a.minWidth,\n        maxWidth = _a.maxWidth,\n        modalProps = _a.modalProps;\n\n    var mergedLayerProps = tslib_1.__assign({}, modalProps ? modalProps.layerProps : {\n      onLayerDidMount: onLayerDidMount\n    });\n\n    if (onLayerDidMount && !mergedLayerProps.onLayerDidMount) {\n      mergedLayerProps.onLayerDidMount = onLayerDidMount;\n    }\n\n    var mergedModalProps = tslib_1.__assign({}, DefaultModalProps, modalProps, {\n      layerProps: mergedLayerProps\n    });\n\n    var dialogContentProps = tslib_1.__assign({}, DefaultDialogContentProps, this.props.dialogContentProps);\n\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className || mergedModalProps.className,\n      containerClassName: containerClassName || mergedModalProps.containerClassName,\n      hidden: hidden,\n      dialogDefaultMinWidth: minWidth,\n      dialogDefaultMaxWidth: maxWidth\n    });\n    return React.createElement(Modal, tslib_1.__assign({\n      elementToFocusOnDismiss: elementToFocusOnDismiss,\n      firstFocusableSelector: firstFocusableSelector,\n      forceFocusInsideTrap: forceFocusInsideTrap,\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      isClickableOutsideFocusTrap: isClickableOutsideFocusTrap,\n      onDismissed: onDismissed,\n      responsiveMode: responsiveMode\n    }, mergedModalProps, {\n      isDarkOverlay: isDarkOverlay !== undefined ? isDarkOverlay : mergedModalProps.isDarkOverlay,\n      isBlocking: isBlocking !== undefined ? isBlocking : mergedModalProps.isBlocking,\n      isOpen: isOpen !== undefined ? isOpen : !hidden,\n      className: classNames.root,\n      containerClassName: classNames.main,\n      onDismiss: onDismiss ? onDismiss : mergedModalProps.onDismiss,\n      subtitleAriaId: this._getSubTextId(),\n      titleAriaId: this._getTitleTextId()\n    }), React.createElement(DialogContent, tslib_1.__assign({\n      titleId: this._defaultTitleTextId,\n      subTextId: this._defaultSubTextId,\n      title: title,\n      subText: subText,\n      showCloseButton: isBlocking !== undefined ? !isBlocking : !mergedModalProps.isBlocking,\n      topButtonsProps: topButtonsProps ? topButtonsProps : dialogContentProps.topButtonsProps,\n      type: type !== undefined ? type : dialogContentProps.type,\n      onDismiss: onDismiss ? onDismiss : dialogContentProps.onDismiss,\n      className: contentClassName || dialogContentProps.className\n    }, dialogContentProps), this.props.children));\n  };\n\n  DialogBase.defaultProps = {\n    hidden: true\n  };\n  DialogBase = tslib_1.__decorate([withResponsiveMode], DialogBase);\n  return DialogBase;\n}(BaseComponent);\n\nexport { DialogBase };","map":null,"metadata":{},"sourceType":"module"}