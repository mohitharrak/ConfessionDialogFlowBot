{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, css, autobind } from '../../../Utilities';\nimport { SuggestionsItem } from '../../../Pickers';\nimport * as stylesImport from './SuggestionsCore.scss'; // tslint:disable-next-line:no-any\n\nvar styles = stylesImport;\n/**\r\n * Class when used with SuggestionsStore, renders a basic suggestions control\r\n */\n\nvar SuggestionsCore =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SuggestionsCore, _super);\n\n  function SuggestionsCore(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n\n    _this.SuggestionsItemOfProperType = SuggestionsItem;\n    _this.currentIndex = -1;\n    return _this;\n  }\n  /**\r\n   * Increments the selected suggestion index\r\n   */\n\n\n  SuggestionsCore.prototype.nextSuggestion = function () {\n    var suggestions = this.props.suggestions;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      } else if (this.currentIndex < suggestions.length - 1) {\n        this.setSelectedSuggestion(this.currentIndex + 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === suggestions.length - 1) {\n        this.setSelectedSuggestion(0);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Decrements the selected suggestion index\r\n   */\n\n\n  SuggestionsCore.prototype.previousSuggestion = function () {\n    var suggestions = this.props.suggestions;\n\n    if (suggestions && suggestions.length > 0) {\n      if (this.currentIndex === -1) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      } else if (this.currentIndex > 0) {\n        this.setSelectedSuggestion(this.currentIndex - 1);\n        return true;\n      } else if (this.props.shouldLoopSelection && this.currentIndex === 0) {\n        this.setSelectedSuggestion(suggestions.length - 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(SuggestionsCore.prototype, \"selectedElement\", {\n    get: function get() {\n      return this._selectedElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SuggestionsCore.prototype.getCurrentItem = function () {\n    return this.props.suggestions[this.currentIndex];\n  };\n\n  SuggestionsCore.prototype.getSuggestionAtIndex = function (index) {\n    return this.props.suggestions[index];\n  };\n\n  SuggestionsCore.prototype.hasSuggestionSelected = function () {\n    return this.currentIndex !== -1 && this.currentIndex < this.props.suggestions.length;\n  };\n\n  SuggestionsCore.prototype.removeSuggestion = function (index) {\n    this.props.suggestions.splice(index, 1);\n  };\n\n  SuggestionsCore.prototype.deselectAllSuggestions = function () {\n    if (this.currentIndex > -1 && this.props.suggestions[this.currentIndex]) {\n      this.props.suggestions[this.currentIndex].selected = false;\n      this.currentIndex = -1;\n      this.forceUpdate();\n    }\n  };\n\n  SuggestionsCore.prototype.setSelectedSuggestion = function (index) {\n    var suggestions = this.props.suggestions;\n\n    if (index > suggestions.length - 1 || index < 0) {\n      this.currentIndex = 0;\n      this.currentSuggestion.selected = false;\n      this.currentSuggestion = suggestions[0];\n      this.currentSuggestion.selected = true;\n    } else {\n      if (this.currentIndex > -1 && suggestions[this.currentIndex]) {\n        suggestions[this.currentIndex].selected = false;\n      }\n\n      suggestions[index].selected = true;\n      this.currentIndex = index;\n      this.currentSuggestion = suggestions[index];\n    }\n\n    this.forceUpdate();\n  };\n\n  SuggestionsCore.prototype.componentDidUpdate = function () {\n    this.scrollSelected();\n  };\n\n  SuggestionsCore.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        onRenderSuggestion = _a.onRenderSuggestion,\n        suggestionsItemClassName = _a.suggestionsItemClassName,\n        resultsMaximumNumber = _a.resultsMaximumNumber,\n        showRemoveButtons = _a.showRemoveButtons,\n        suggestionsContainerAriaLabel = _a.suggestionsContainerAriaLabel;\n    var TypedSuggestionsItem = this.SuggestionsItemOfProperType;\n    var suggestions = this.props.suggestions;\n\n    if (resultsMaximumNumber) {\n      suggestions = suggestions.slice(0, resultsMaximumNumber);\n    }\n\n    return React.createElement(\"div\", {\n      className: css('ms-Suggestions-container', styles.suggestionsContainer),\n      id: \"suggestion-list\",\n      role: \"list\",\n      \"aria-label\": suggestionsContainerAriaLabel\n    }, suggestions.map(function (suggestion, index) {\n      return React.createElement(\"div\", {\n        ref: _this._resolveRef(suggestion.selected || index === _this.currentIndex ? '_selectedElement' : ''),\n        // tslint:disable\n        key: suggestion.item['key'] ? suggestion.item['key'] : index,\n        // tslint:enable\n        id: 'sug-' + index,\n        role: \"listitem\",\n        \"aria-label\": suggestion.ariaLabel\n      }, React.createElement(TypedSuggestionsItem, {\n        id: 'sug-item' + index,\n        suggestionModel: suggestion,\n        // tslint:disable-next-line:no-any\n        RenderSuggestion: onRenderSuggestion,\n        onClick: _this._onClickTypedSuggestionsItem(suggestion.item, index),\n        className: suggestionsItemClassName,\n        showRemoveButton: showRemoveButtons,\n        onRemoveItem: _this._onRemoveTypedSuggestionsItem(suggestion.item, index),\n        isSelectedOverride: index === _this.currentIndex\n      }));\n    }));\n  }; // TODO get the element to scroll into view properly regardless of direction.\n\n\n  SuggestionsCore.prototype.scrollSelected = function () {\n    if (this._selectedElement && this._selectedElement.scrollIntoView !== undefined) {\n      this._selectedElement.scrollIntoView(false);\n    }\n  };\n\n  SuggestionsCore.prototype._onClickTypedSuggestionsItem = function (item, index) {\n    var _this = this;\n\n    return function (ev) {\n      _this.props.onSuggestionClick(ev, item, index);\n    };\n  };\n\n  SuggestionsCore.prototype._onRemoveTypedSuggestionsItem = function (item, index) {\n    var _this = this;\n\n    return function (ev) {\n      var onSuggestionRemove = _this.props.onSuggestionRemove;\n      onSuggestionRemove(ev, item, index);\n      ev.stopPropagation();\n    };\n  };\n\n  tslib_1.__decorate([autobind], SuggestionsCore.prototype, \"_onClickTypedSuggestionsItem\", null);\n\n  tslib_1.__decorate([autobind], SuggestionsCore.prototype, \"_onRemoveTypedSuggestionsItem\", null);\n\n  return SuggestionsCore;\n}(BaseComponent);\n\nexport { SuggestionsCore };","map":null,"metadata":{},"sourceType":"module"}