{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\nimport { ShimmerElementsGroup } from './ShimmerElementsGroup/ShimmerElementsGroup';\nvar TRANSITION_ANIMATION_INTERVAL = 200;\n/* ms */\n\nvar getClassNames = classNamesFunction();\n\nvar ShimmerBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ShimmerBase, _super);\n\n  function ShimmerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      contentLoaded: props.isDataLoaded\n    };\n    return _this;\n  }\n\n  ShimmerBase.prototype.componentWillReceiveProps = function (nextProps) {\n    var _this = this;\n\n    var isDataLoaded = nextProps.isDataLoaded;\n\n    if (this._lastTimeoutId !== undefined) {\n      this._async.clearTimeout(this._lastTimeoutId);\n\n      this._lastTimeoutId = undefined;\n    }\n\n    if (isDataLoaded) {\n      this._lastTimeoutId = this._async.setTimeout(function () {\n        _this.setState({\n          contentLoaded: isDataLoaded\n        });\n\n        _this._lastTimeoutId = undefined;\n      }, TRANSITION_ANIMATION_INTERVAL);\n    } else {\n      this.setState({\n        contentLoaded: isDataLoaded\n      });\n    }\n  };\n\n  ShimmerBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        shimmerElements = _a.shimmerElements,\n        children = _a.children,\n        isDataLoaded = _a.isDataLoaded,\n        width = _a.width,\n        className = _a.className,\n        customElementsGroup = _a.customElementsGroup,\n        theme = _a.theme,\n        ariaLabel = _a.ariaLabel;\n    var contentLoaded = this.state.contentLoaded;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      isDataLoaded: isDataLoaded,\n      className: className,\n      transitionAnimationInterval: TRANSITION_ANIMATION_INTERVAL\n    });\n    var divProps = getNativeProps(this.props, divProperties);\n    return React.createElement(\"div\", tslib_1.__assign({}, divProps, {\n      className: this._classNames.root\n    }), !contentLoaded && React.createElement(\"div\", {\n      style: {\n        width: width ? width : '100%'\n      },\n      className: this._classNames.shimmerWrapper\n    }, customElementsGroup ? customElementsGroup : React.createElement(ShimmerElementsGroup, {\n      shimmerElements: shimmerElements\n    })), children && React.createElement(\"div\", {\n      className: this._classNames.dataWrapper\n    }, children), ariaLabel && !isDataLoaded && React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": \"polite\"\n    }, React.createElement(DelayedRender, null, React.createElement(\"div\", {\n      className: this._classNames.screenReaderText\n    }, ariaLabel))));\n  };\n\n  ShimmerBase.defaultProps = {\n    isDataLoaded: false\n  };\n  return ShimmerBase;\n}(BaseComponent);\n\nexport { ShimmerBase };","map":null,"metadata":{},"sourceType":"module"}