{"ast":null,"code":"import _classCallCheck from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\dialogflow-chatbot\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Projects\\\\David MacDougall\\\\source code\\\\dialogflow-chatbot\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { ApiAiConstants } from \"./ApiAiConstants\";\nimport { ApiAiClientConfigurationError } from \"./Errors\";\nimport { EventRequest } from \"./Request/EventRequest\";\nimport TextRequest from \"./Request/TextRequest\";\nexport * from \"./Interfaces\";\nexport { ApiAiConstants } from \"./ApiAiConstants\";\nexport var ApiAiClient =\n/*#__PURE__*/\nfunction () {\n  function ApiAiClient(options) {\n    _classCallCheck(this, ApiAiClient);\n\n    if (!options || !options.accessToken) {\n      throw new ApiAiClientConfigurationError(\"Access token is required for new ApiAi.Client instance\");\n    }\n\n    this.accessToken = options.accessToken;\n    this.apiLang = options.lang || ApiAiConstants.DEFAULT_CLIENT_LANG;\n    this.apiVersion = options.version || ApiAiConstants.DEFAULT_API_VERSION;\n    this.apiBaseUrl = options.baseUrl || ApiAiConstants.DEFAULT_BASE_URL;\n    this.sessionId = options.sessionId || this.guid();\n  }\n\n  _createClass(ApiAiClient, [{\n    key: \"textRequest\",\n    value: function textRequest(query) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!query) {\n        throw new ApiAiClientConfigurationError(\"Query should not be empty\");\n      }\n\n      options.query = query;\n      return new TextRequest(this, options).perform();\n    }\n  }, {\n    key: \"eventRequest\",\n    value: function eventRequest(eventName) {\n      var eventData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (!eventName) {\n        throw new ApiAiClientConfigurationError(\"Event name can not be empty\");\n      }\n\n      options.event = {\n        name: eventName,\n        data: eventData\n      };\n      return new EventRequest(this, options).perform();\n    } // @todo: implement local tts request\n\n    /*public ttsRequest(query) {\n        if (!query) {\n            throw new ApiAiClientConfigurationError(\"Query should not be empty\");\n        }\n        return new TTSRequest(this).makeTTSRequest(query);\n    }*/\n\n    /*public userEntitiesRequest(options: IRequestOptions = {}): UserEntitiesRequest {\n        return new UserEntitiesRequest(this, options);\n    }*/\n\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getApiVersion\",\n    value: function getApiVersion() {\n      return this.apiVersion ? this.apiVersion : ApiAiConstants.DEFAULT_API_VERSION;\n    }\n  }, {\n    key: \"getApiLang\",\n    value: function getApiLang() {\n      return this.apiLang ? this.apiLang : ApiAiConstants.DEFAULT_CLIENT_LANG;\n    }\n  }, {\n    key: \"getApiBaseUrl\",\n    value: function getApiBaseUrl() {\n      return this.apiBaseUrl ? this.apiBaseUrl : ApiAiConstants.DEFAULT_BASE_URL;\n    }\n  }, {\n    key: \"setSessionId\",\n    value: function setSessionId(sessionId) {\n      this.sessionId = sessionId;\n    }\n  }, {\n    key: \"getSessionId\",\n    value: function getSessionId() {\n      return this.sessionId;\n    }\n    /**\n     * generates new random UUID\n     * @returns {string}\n     */\n\n  }, {\n    key: \"guid\",\n    value: function guid() {\n      var s4 = function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n      };\n\n      return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" + s4() + s4() + s4();\n    }\n  }]);\n\n  return ApiAiClient;\n}();","map":null,"metadata":{},"sourceType":"module"}