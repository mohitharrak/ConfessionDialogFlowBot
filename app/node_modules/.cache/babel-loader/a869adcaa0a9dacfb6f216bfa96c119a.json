{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { AnimationClassNames, FontSizes, HighContrastSelector, getFocusStyle, getGlobalClassNames } from '../../Styling';\nvar GlobalClassNames = {\n  root: 'ms-DetailsRow',\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isFocusable: \"[data-is-focusable='true']\",\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  fields: 'ms-DetailsRow-fields'\n};\nexport var DEFAULT_CELL_STYLE_PROPS = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24\n}; // Source of default row heights to share.\n\nexport var DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32\n}; // Constant values\n\nvar values = tslib_1.__assign({}, DEFAULT_ROW_HEIGHTS, {\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n  rowShimmerLineHeight: 7,\n  rowShimmerIconPlaceholderHeight: 16,\n  rowShimmerVerticalBorder: 0,\n  compactRowShimmerVerticalBorder: 0\n}); // Computed Values\n\n\nvalues = tslib_1.__assign({}, values, {\n  rowShimmerVerticalBorder: (values.rowHeight - values.rowShimmerLineHeight) / 2,\n  compactRowShimmerVerticalBorder: (values.compactRowHeight - values.rowShimmerLineHeight) / 2\n});\nexport var getStyles = function getStyles(props) {\n  var theme = props.theme,\n      isSelected = props.isSelected,\n      canSelect = props.canSelect,\n      droppingClassName = props.droppingClassName,\n      anySelected = props.anySelected,\n      isCheckVisible = props.isCheckVisible,\n      checkboxCellClassName = props.checkboxCellClassName,\n      compact = props.compact,\n      className = props.className,\n      _a = props.cellStyleProps,\n      cellStyleProps = _a === void 0 ? DEFAULT_CELL_STYLE_PROPS : _a;\n  var _b = theme.palette,\n      neutralPrimary = _b.neutralPrimary,\n      white = _b.white,\n      neutralSecondary = _b.neutralSecondary,\n      neutralLighter = _b.neutralLighter,\n      neutralLight = _b.neutralLight,\n      neutralDark = _b.neutralDark,\n      neutralQuaternaryAlt = _b.neutralQuaternaryAlt,\n      black = _b.black;\n  var focusBorder = theme.semanticColors.focusBorder;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var colors = {\n    // Default\n    defaultHeaderTextColor: neutralPrimary,\n    defaultMetaTextColor: neutralSecondary,\n    defaultBackgroundColor: white,\n    // Hover\n    hoverTextColor: neutralPrimary,\n    hoverColorBackground: neutralLighter,\n    // Selected\n    selectedTextColor: neutralDark,\n    selectedMetaTextColor: neutralPrimary,\n    selectedBackgroundColor: neutralLight,\n    // Selected Hover\n    selectedHoverTextColor: black,\n    selectedHoverMetaTextColor: neutralDark,\n    selectedHoverBackgroundColor: neutralQuaternaryAlt,\n    // Focus\n    focusHeaderTextColor: black,\n    focusBackgroundColor: neutralQuaternaryAlt,\n    focusMetaTextColor: neutralDark\n  };\n  var shimmerRightBorderStyle = cellStyleProps.cellRightPadding * 4 + \"px solid \" + colors.defaultBackgroundColor;\n  var shimmerLeftBorderStyle = cellStyleProps.cellLeftPadding + \"px solid \" + colors.defaultBackgroundColor;\n  var selectedStyles = [getFocusStyle(theme, -1, undefined, undefined, focusBorder, white), classNames.isSelected, {\n    color: colors.selectedMetaTextColor,\n    background: colors.selectedBackgroundColor,\n    borderBottom: \"1px solid \" + white,\n    selectors: {\n      '&:before': {\n        position: 'absolute',\n        display: 'block',\n        top: -1,\n        height: 1,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        content: '',\n        borderTop: \"1px solid \" + white\n      },\n      // Selected State hover\n      '&:hover': {\n        background: colors.selectedHoverBackgroundColor,\n        selectors: {\n          // Selected State hover meta cell\n          $cell: {\n            color: colors.selectedHoverMetaTextColor,\n            selectors: (_c = {}, _c[HighContrastSelector] = {\n              color: 'HighlightText',\n              selectors: {\n                '> a': {\n                  color: 'HighlightText'\n                }\n              }\n            }, // Selected State hover Header cell\n            _c['&.$isRowHeader'] = {\n              color: colors.selectedHoverTextColor,\n              selectors: (_d = {}, _d[HighContrastSelector] = {\n                color: 'HighlightText'\n              }, _d)\n            }, _c)\n          }\n        }\n      },\n      // Focus state\n      '&:focus': {\n        background: colors.focusBackgroundColor,\n        selectors: {\n          // Selected State hover meta cell\n          $cell: (_e = {\n            color: colors.focusMetaTextColor\n          }, _e[HighContrastSelector] = {\n            color: 'HighlightText',\n            selectors: {\n              '> a': {\n                color: 'HighlightText'\n              }\n            }\n          }, // Row header cell\n          _e['&.$isRowHeader'] = {\n            color: colors.focusHeaderTextColor,\n            selectors: (_f = {}, _f[HighContrastSelector] = {\n              color: 'HighlightText'\n            }, _f)\n          }, _e)\n        }\n      }\n    }\n  }];\n  var cannotSelectStyles = [classNames.isContentUnselectable, {\n    userSelect: 'none',\n    cursor: 'default'\n  }];\n  var rootCompactStyles = {\n    minHeight: values.compactRowHeight,\n    border: 0\n  };\n  var cellCompactStyles = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: cellStyleProps.cellLeftPadding + \"px\",\n    selectors: (_g = {}, // Masking the running shimmer background with borders\n    _g[\"&$shimmer\"] = {\n      padding: 0,\n      borderLeft: shimmerLeftBorderStyle,\n      borderRight: shimmerRightBorderStyle,\n      borderTop: values.compactRowShimmerVerticalBorder + \"px solid \" + colors.defaultBackgroundColor,\n      borderBottom: values.compactRowShimmerVerticalBorder + \"px solid \" + colors.defaultBackgroundColor\n    }, // Masking the running shimmer background with borders when it's an Icon placeholder\n    _g[\"&$shimmerIconPlaceholder\"] = {\n      borderRight: cellStyleProps.cellRightPadding + \"px solid \" + colors.defaultBackgroundColor,\n      borderBottom: (values.compactRowHeight - values.rowShimmerIconPlaceholderHeight) / 2 + \"px solid \" + colors.defaultBackgroundColor,\n      borderTop: (values.compactRowHeight - values.rowShimmerIconPlaceholderHeight) / 2 + \"px solid \" + colors.defaultBackgroundColor\n    }, _g)\n  };\n  var defaultCellStyles = [getFocusStyle(theme, -1), classNames.cell, {\n    display: 'inline-block',\n    position: 'relative',\n    boxSizing: 'border-box',\n    minHeight: values.rowHeight,\n    verticalAlign: 'top',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    paddingTop: values.rowVerticalPadding,\n    paddingBottom: values.rowVerticalPadding,\n    paddingLeft: cellStyleProps.cellLeftPadding + \"px\",\n    selectors: (_h = {\n      '& > button': {\n        maxWidth: '100%'\n      }\n    }, _h[classNames.isFocusable] = getFocusStyle(theme, -1, undefined, undefined, neutralSecondary, white), _h['&$shimmer'] = {\n      padding: 0,\n      borderLeft: shimmerLeftBorderStyle,\n      borderRight: shimmerRightBorderStyle,\n      borderTop: values.rowShimmerVerticalBorder + \"px solid \" + colors.defaultBackgroundColor,\n      borderBottom: values.rowShimmerVerticalBorder + \"px solid \" + colors.defaultBackgroundColor\n    }, _h['&$shimmerIconPlaceholder'] = {\n      borderRight: cellStyleProps.cellRightPadding + \"px solid \" + colors.defaultBackgroundColor,\n      borderBottom: (values.rowHeight - values.rowShimmerIconPlaceholderHeight) / 2 + \"px solid \" + colors.defaultBackgroundColor,\n      borderTop: (values.rowHeight - values.rowShimmerIconPlaceholderHeight) / 2 + \"px solid \" + colors.defaultBackgroundColor\n    }, _h)\n  }, isSelected && {\n    selectors: (_j = {\n      '&.$isRowHeader': {\n        color: colors.selectedTextColor,\n        selectors: (_k = {}, _k[HighContrastSelector] = {\n          color: 'HighlightText'\n        }, _k)\n      }\n    }, _j[HighContrastSelector] = {\n      background: 'Highlight',\n      color: 'HighlightText',\n      '-ms-high-contrast-adjust': 'none',\n      selectors: {\n        a: {\n          color: 'HighlightText'\n        }\n      }\n    }, _j)\n  }, compact && cellCompactStyles];\n  return {\n    root: [classNames.root, AnimationClassNames.fadeIn400, droppingClassName, theme.fonts.small, isCheckVisible && classNames.isCheckVisible, getFocusStyle(theme, 0, undefined, undefined, focusBorder, white), {\n      borderBottom: \"1px solid \" + neutralLighter,\n      background: colors.defaultBackgroundColor,\n      color: colors.defaultMetaTextColor,\n      display: 'inline-flex',\n      minWidth: '100%',\n      minHeight: values.rowHeight,\n      whiteSpace: 'nowrap',\n      padding: 0,\n      boxSizing: 'border-box',\n      verticalAlign: 'top',\n      textAlign: 'left',\n      selectors: (_l = {}, _l[classNames.listCellFirstChild + \" &:before\"] = {\n        display: 'none'\n      }, _l['&:hover'] = {\n        background: colors.hoverColorBackground\n      }, _l['&:hover $check'] = {\n        opacity: 1\n      }, _l)\n    }, isSelected && selectedStyles, !canSelect && cannotSelectStyles, compact && rootCompactStyles, className],\n    cellUnpadded: [{\n      paddingRight: cellStyleProps.cellRightPadding + \"px\"\n    }],\n    cellPadded: [{\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding + \"px\",\n      selectors: {\n        '&.$checkCell': {\n          paddingRight: 0\n        }\n      }\n    }],\n    cell: defaultCellStyles,\n    cellMeasurer: [classNames.cellMeasurer, {\n      overflow: 'visible',\n      whiteSpace: 'nowrap'\n    }],\n    checkCell: [defaultCellStyles, classNames.cellCheck, checkboxCellClassName, {\n      padding: 0,\n      // Ensure that the check cell covers the top border of the cell.\n      // This ensures the click target does not leave a spot which would\n      // cause other items to be deselected.\n      paddingTop: 1,\n      marginTop: -1,\n      flexShrink: 0\n    }],\n    checkCover: [{\n      position: 'absolute',\n      top: -1,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      display: 'none'\n    }, anySelected && {\n      display: 'block'\n    }],\n    fields: [classNames.fields, {\n      display: 'flex',\n      alignItems: 'stretch'\n    }],\n    isRowHeader: [{\n      color: colors.defaultHeaderTextColor,\n      fontSize: FontSizes.medium\n    }],\n    isMultiline: [defaultCellStyles, {\n      whiteSpace: 'normal',\n      wordBreak: 'break-word',\n      textOverflow: 'clip'\n    }],\n    shimmer: [],\n    shimmerIconPlaceholder: [],\n    shimmerLeftBorder: [{\n      // 40px to take into account the checkbox of items if present.\n      borderLeft: \"40px solid \" + colors.defaultBackgroundColor\n    }],\n    shimmerBottomBorder: [{\n      // 1px to take into account the border-bottom when items replace shimmer lines and in default state.\n      borderBottom: \"1px solid \" + colors.defaultBackgroundColor\n    }],\n    check: []\n  };\n\n  var _c, _d, _e, _f, _g, _h, _j, _k, _l;\n};","map":null,"metadata":{},"sourceType":"module"}