{"ast":null,"code":"/**\r\n * Enum to describe how a particular column header behaves.... This enum is used to\r\n * to specify the property IColumn:columnActionsMode.\r\n * If IColumn:columnActionsMode is undefined, then it's equivalent to ColumnActionsMode.clickable\r\n */\nexport var ColumnActionsMode;\n\n(function (ColumnActionsMode) {\n  /**\r\n   * Renders the column header as disabled.\r\n   */\n  ColumnActionsMode[ColumnActionsMode[\"disabled\"] = 0] = \"disabled\";\n  /**\r\n   * Renders the column header is clickable.\r\n   */\n\n  ColumnActionsMode[ColumnActionsMode[\"clickable\"] = 1] = \"clickable\";\n  /**\r\n   * Renders the column header ias clickable and displays the dropdown cheveron.\r\n   */\n\n  ColumnActionsMode[ColumnActionsMode[\"hasDropdown\"] = 2] = \"hasDropdown\";\n})(ColumnActionsMode || (ColumnActionsMode = {}));\n\nexport var ConstrainMode;\n\n(function (ConstrainMode) {\n  /** If specified, lets the content grow which allows the page to manage scrolling. */\n  ConstrainMode[ConstrainMode[\"unconstrained\"] = 0] = \"unconstrained\";\n  /**\r\n   * If specified, constrains the list to the given layout space.\r\n   */\n\n  ConstrainMode[ConstrainMode[\"horizontalConstrained\"] = 1] = \"horizontalConstrained\";\n})(ConstrainMode || (ConstrainMode = {}));\n/**\r\n * Enum to describe where the column has been dropped, after starting the drag\r\n */\n\n\nexport var ColumnDragEndLocation;\n\n(function (ColumnDragEndLocation) {\n  /**\r\n   * Drag ended outside of current list\r\n   */\n  ColumnDragEndLocation[ColumnDragEndLocation[\"outside\"] = 0] = \"outside\";\n  /**\r\n   * Drag ended on current List\r\n   */\n\n  ColumnDragEndLocation[ColumnDragEndLocation[\"surface\"] = 1] = \"surface\";\n  /**\r\n   * Drag ended on Header\r\n   */\n\n  ColumnDragEndLocation[ColumnDragEndLocation[\"header\"] = 2] = \"header\";\n})(ColumnDragEndLocation || (ColumnDragEndLocation = {}));\n\nexport var DetailsListLayoutMode;\n\n(function (DetailsListLayoutMode) {\n  /**\r\n   * Lets the user resize columns and makes not attempt to fit them.\r\n   */\n  DetailsListLayoutMode[DetailsListLayoutMode[\"fixedColumns\"] = 0] = \"fixedColumns\";\n  /**\r\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\r\n   * off columns that can't fit and have isCollapsible set.\r\n   */\n\n  DetailsListLayoutMode[DetailsListLayoutMode[\"justified\"] = 1] = \"justified\";\n})(DetailsListLayoutMode || (DetailsListLayoutMode = {}));\n\nexport var CheckboxVisibility;\n\n(function (CheckboxVisibility) {\n  /**\r\n   * Visible on hover.\r\n   */\n  CheckboxVisibility[CheckboxVisibility[\"onHover\"] = 0] = \"onHover\";\n  /**\r\n   * Visible always.\r\n   */\n\n  CheckboxVisibility[CheckboxVisibility[\"always\"] = 1] = \"always\";\n  /**\r\n   * Hide checkboxes.\r\n   */\n\n  CheckboxVisibility[CheckboxVisibility[\"hidden\"] = 2] = \"hidden\";\n})(CheckboxVisibility || (CheckboxVisibility = {}));","map":null,"metadata":{},"sourceType":"module"}