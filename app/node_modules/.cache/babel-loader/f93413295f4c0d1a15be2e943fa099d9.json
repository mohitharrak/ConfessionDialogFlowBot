{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { ActionButton } from '../../Button';\nimport { Icon } from '../../Icon';\nimport { buttonStyles } from './Nav.styles'; // The number pixels per indentation level for Nav links.\n\nvar _indentationSize = 14; // The number of pixels of left margin\n\nvar _baseIndent = 3; // global var used in _isLinkSelectedKey\n\nvar _urlResolver;\n\nexport function isRelativeUrl(url) {\n  // A URL is relative if it has no protocol.\n  return !!url && !/^[a-z0-9+-.]:\\/\\//i.test(url);\n}\nvar getClassNames = classNamesFunction();\n\nvar NavBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(NavBase, _super);\n\n  function NavBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onRenderLink = function (link) {\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        groups: groups\n      });\n      return React.createElement(\"div\", {\n        className: classNames.linkText\n      }, link.name);\n    };\n\n    _this._renderGroup = function (group, groupIndex) {\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme,\n          _b = _a.onRenderGroupHeader,\n          onRenderGroupHeader = _b === void 0 ? _this._renderGroupHeader : _b;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: !_this.state.isGroupCollapsed[group.name],\n        groups: groups\n      });\n      return React.createElement(\"div\", {\n        key: groupIndex,\n        className: classNames.group\n      }, group.name ? onRenderGroupHeader(group, _this._renderGroupHeader) : null, React.createElement(\"div\", {\n        className: classNames.groupContent\n      }, _this._renderLinks(group.links, 0\n      /* nestingLevel */\n      )));\n    };\n\n    _this._renderGroupHeader = function (group) {\n      var _a = _this.props,\n          styles = _a.styles,\n          groups = _a.groups,\n          theme = _a.theme,\n          expandButtonAriaLabel = _a.expandButtonAriaLabel;\n      var classNames = getClassNames(styles, {\n        theme: theme,\n        isGroup: true,\n        isExpanded: !_this.state.isGroupCollapsed[group.name],\n        groups: groups\n      });\n      return React.createElement(\"button\", {\n        className: classNames.chevronButton,\n        onClick: _this._onGroupHeaderClicked.bind(_this, group),\n        \"aria-label\": expandButtonAriaLabel,\n        \"aria-expanded\": !_this.state.isGroupCollapsed[group.name]\n      }, React.createElement(Icon, {\n        className: classNames.chevronIcon,\n        iconName: \"ChevronDown\"\n      }), group.name);\n    };\n\n    _this.state = {\n      isGroupCollapsed: {},\n      isLinkExpandStateChanged: false,\n      selectedKey: props.initialSelectedKey || props.selectedKey\n    };\n\n    if (props.groups) {\n      for (var _i = 0, _a = props.groups; _i < _a.length; _i++) {\n        var group = _a[_i];\n\n        if (group.collapseByDefault && group.name) {\n          _this.state.isGroupCollapsed[group.name] = true;\n        }\n      }\n    }\n\n    return _this;\n  }\n\n  NavBase.prototype.componentWillReceiveProps = function (newProps) {\n    var newGroups = newProps.groups || [];\n    var isGroupCollapsed = this.state.isGroupCollapsed; // If the component's props were updated, new groups may have been added, which may have\n    // collapseByDefault set. Ensure that setting is respected for any new groups.\n    // (If isGroupCollapsed is already set for a group, don't overwrite that.)\n\n    var hasUpdated = false;\n\n    for (var _i = 0, newGroups_1 = newGroups; _i < newGroups_1.length; _i++) {\n      var newGroup = newGroups_1[_i];\n\n      if (newGroup.name && newGroup.collapseByDefault && !isGroupCollapsed.hasOwnProperty(newGroup.name)) {\n        isGroupCollapsed[newGroup.name] = true;\n        hasUpdated = true;\n      }\n    }\n\n    if (hasUpdated) {\n      this.setState({\n        isGroupCollapsed: isGroupCollapsed\n      });\n    }\n  };\n\n  NavBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        className = _a.className,\n        isOnTop = _a.isOnTop,\n        theme = _a.theme;\n\n    if (!groups) {\n      return null;\n    }\n\n    var groupElements = groups.map(this._renderGroup);\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      isOnTop: isOnTop,\n      groups: groups\n    });\n    return React.createElement(FocusZone, {\n      direction: FocusZoneDirection.vertical\n    }, React.createElement(\"nav\", {\n      role: \"navigation\",\n      className: classNames.root,\n      \"aria-label\": this.props.ariaLabel\n    }, groupElements));\n  };\n\n  Object.defineProperty(NavBase.prototype, \"selectedKey\", {\n    get: function get() {\n      return this.state.selectedKey;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  NavBase.prototype._renderNavLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme,\n        _b = _a.onRenderLink,\n        onRenderLink = _b === void 0 ? this._onRenderLink : _b,\n        _c = _a.linkAs,\n        LinkAs = _c === void 0 ? ActionButton : _c;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isSelected: this._isLinkSelected(link),\n      isDisabled: link.disabled,\n      isButtonEntry: link.onClick && !link.forceAnchor,\n      leftPadding: _indentationSize * nestingLevel + _baseIndent,\n      groups: groups\n    }); // Prevent hijacking of the parent window if link.target is defined\n\n    var rel = link.url && link.target && !isRelativeUrl(link.url) ? 'noopener noreferrer' : undefined;\n    return React.createElement(LinkAs, {\n      className: classNames.link,\n      styles: buttonStyles,\n      href: link.url || (link.forceAnchor ? 'javascript:' : undefined),\n      iconProps: link.iconProps || {\n        iconName: link.icon || ''\n      },\n      onClick: link.onClick ? this._onNavButtonLinkClicked.bind(this, link) : this._onNavAnchorLinkClicked.bind(this, link),\n      title: link.title || link.name,\n      target: link.target,\n      rel: rel,\n      disabled: link.disabled,\n      \"aria-label\": link.ariaLabel\n    }, onRenderLink(link, this._onRenderLink));\n  };\n\n  NavBase.prototype._renderCompositeLink = function (link, linkIndex, nestingLevel) {\n    var divProps = tslib_1.__assign({}, getNativeProps(link, divProperties, ['onClick']));\n\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      isExpanded: !!link.isExpanded,\n      isSelected: this._isLinkSelected(link),\n      isLink: true,\n      isDisabled: link.disabled,\n      position: _indentationSize * nestingLevel + 1,\n      groups: groups\n    });\n    return React.createElement(\"div\", tslib_1.__assign({}, divProps, {\n      key: link.key || linkIndex,\n      className: classNames.compositeLink\n    }), link.links && link.links.length > 0 ? React.createElement(\"button\", {\n      className: classNames.chevronButton,\n      onClick: this._onLinkExpandClicked.bind(this, link),\n      \"aria-label\": this.props.expandButtonAriaLabel,\n      \"aria-expanded\": link.isExpanded ? 'true' : 'false'\n    }, React.createElement(Icon, {\n      className: classNames.chevronIcon,\n      iconName: \"ChevronDown\"\n    })) : null, this._renderNavLink(link, linkIndex, nestingLevel));\n  };\n\n  NavBase.prototype._renderLink = function (link, linkIndex, nestingLevel) {\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"li\", {\n      key: link.key || linkIndex,\n      role: \"listitem\",\n      className: classNames.navItem\n    }, this._renderCompositeLink(link, linkIndex, nestingLevel), link.isExpanded ? this._renderLinks(link.links, ++nestingLevel) : null);\n  };\n\n  NavBase.prototype._renderLinks = function (links, nestingLevel) {\n    var _this = this;\n\n    if (!links || !links.length) {\n      return null;\n    }\n\n    var linkElements = links.map(function (link, linkIndex) {\n      return _this._renderLink(link, linkIndex, nestingLevel);\n    });\n    var _a = this.props,\n        styles = _a.styles,\n        groups = _a.groups,\n        theme = _a.theme;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      groups: groups\n    });\n    return React.createElement(\"ul\", {\n      role: \"list\",\n      className: classNames.navItems\n    }, linkElements);\n  };\n\n  NavBase.prototype._onGroupHeaderClicked = function (group, ev) {\n    var isGroupCollapsed = this.state.isGroupCollapsed;\n    var groupKey = group.name;\n    var isCollapsed = !isGroupCollapsed[groupKey];\n\n    if (group.onHeaderClick) {\n      group.onHeaderClick(ev, isCollapsed);\n    }\n\n    isGroupCollapsed[groupKey] = isCollapsed;\n    this.setState({\n      isGroupCollapsed: isGroupCollapsed\n    });\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  NavBase.prototype._onLinkExpandClicked = function (link, ev) {\n    var onLinkExpandClick = this.props.onLinkExpandClick;\n\n    if (onLinkExpandClick) {\n      onLinkExpandClick(ev, link);\n    }\n\n    if (!ev.defaultPrevented) {\n      link.isExpanded = !link.isExpanded;\n      this.setState({\n        isLinkExpandStateChanged: true\n      });\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  NavBase.prototype._onNavAnchorLinkClicked = function (link, ev) {\n    if (this.props.onLinkClick) {\n      this.props.onLinkClick(ev, link);\n    }\n\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n\n  NavBase.prototype._onNavButtonLinkClicked = function (link, ev) {\n    if (link.onClick) {\n      link.onClick(ev, link);\n    }\n\n    if (!link.url && link.links && link.links.length > 0) {\n      this._onLinkExpandClicked(link, ev);\n    }\n\n    this.setState({\n      selectedKey: link.key\n    });\n  };\n\n  NavBase.prototype._isLinkSelected = function (link) {\n    // if caller passes in selectedKey, use it as first choice or\n    // if current state.selectedKey (from addressbar) is match to the link\n    if (this.props.selectedKey !== undefined) {\n      return link.key === this.props.selectedKey;\n    } else if (this.state.selectedKey !== undefined && link.key === this.state.selectedKey) {\n      return true;\n    } // resolve is not supported for ssr\n\n\n    if (typeof window === 'undefined') {\n      return false;\n    }\n\n    if (!link.url) {\n      return false;\n    }\n\n    _urlResolver = _urlResolver || document.createElement('a');\n    _urlResolver.href = link.url || '';\n    var target = _urlResolver.href;\n\n    if (location.href === target) {\n      return true;\n    }\n\n    if (location.protocol + '//' + location.host + location.pathname === target) {\n      return true;\n    }\n\n    if (location.hash) {\n      // Match the hash to the url.\n      if (location.hash === link.url) {\n        return true;\n      } // Match a rebased url. (e.g. #foo becomes http://hostname/foo)\n\n\n      _urlResolver.href = location.hash.substring(1);\n      return _urlResolver.href === target;\n    }\n\n    return false;\n  };\n\n  NavBase.defaultProps = {\n    groups: null\n  };\n  return NavBase;\n}(BaseComponent);\n\nexport { NavBase };","map":null,"metadata":{},"sourceType":"module"}