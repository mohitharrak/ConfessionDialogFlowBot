{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, KeyCodes, getId, getNativeProps, divProperties, classNamesFunction, warn } from '../../Utilities';\nimport { CommandButton } from '../../Button';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { PivotItem } from './PivotItem';\nimport { PivotLinkFormat } from './Pivot.types';\nimport { PivotLinkSize } from './Pivot.types';\nimport { Icon } from '../../Icon';\nvar getClassNames = classNamesFunction();\nvar PivotItemType = React.createElement(PivotItem, null).type;\n/**\r\n *  Usage:\r\n *\r\n *     <Pivot>\r\n *       <PivotItem headerText=\"Foo\">\r\n *         <Label>Pivot #1</Label>\r\n *       </PivotItem>\r\n *       <PivotItem headerText=\"Bar\">\r\n *         <Label>Pivot #2</Label>\r\n *       </PivotItem>\r\n *       <PivotItem headerText=\"Bas\">\r\n *         <Label>Pivot #3</Label>\r\n *       </PivotItem>\r\n *     </Pivot>\r\n */\n\nvar PivotBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PivotBase, _super);\n\n  function PivotBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._focusZone = React.createRef();\n\n    _this._renderPivotLink = function (linkCollection, link, selectedKey) {\n      var itemKey = link.itemKey,\n          headerButtonProps = link.headerButtonProps;\n      var tabId = linkCollection.keyToTabIdMapping[itemKey];\n      var onRenderItemLink = link.onRenderItemLink;\n      var linkContent;\n      var isSelected = selectedKey === itemKey;\n\n      if (onRenderItemLink) {\n        linkContent = onRenderItemLink(link, _this._renderLinkContent);\n      } else {\n        linkContent = _this._renderLinkContent(link);\n      }\n\n      return React.createElement(CommandButton, tslib_1.__assign({}, headerButtonProps, {\n        id: tabId,\n        key: itemKey,\n        className: isSelected ? _this._classNames.linkIsSelected : _this._classNames.link,\n        onClick: _this._onLinkClick.bind(_this, itemKey),\n        onKeyPress: _this._onKeyPress.bind(_this, itemKey),\n        ariaLabel: link.ariaLabel,\n        role: \"tab\",\n        \"aria-selected\": isSelected,\n        name: link.headerText,\n        keytipProps: link.keytipProps\n      }), linkContent);\n    };\n\n    _this._renderLinkContent = function (link) {\n      var itemCount = link.itemCount,\n          itemIcon = link.itemIcon,\n          headerText = link.headerText;\n      var classNames = _this._classNames;\n      return React.createElement(\"span\", {\n        className: classNames.linkContent\n      }, itemIcon !== undefined && React.createElement(\"span\", {\n        className: classNames.icon\n      }, React.createElement(Icon, {\n        iconName: itemIcon\n      })), headerText !== undefined && React.createElement(\"span\", {\n        className: classNames.text\n      }, \" \", link.headerText), itemCount !== undefined && React.createElement(\"span\", {\n        className: classNames.count\n      }, \" (\", itemCount, \")\"));\n    };\n\n    _this._warnDeprecations({\n      initialSelectedKey: 'defaultSelectedKey',\n      initialSelectedIndex: 'defaultSelectedIndex'\n    });\n\n    _this._pivotId = getId('Pivot');\n\n    var links = _this._getPivotLinks(props).links;\n\n    var _a = props.defaultSelectedKey,\n        defaultSelectedKey = _a === void 0 ? props.initialSelectedKey : _a,\n        _b = props.defaultSelectedIndex,\n        defaultSelectedIndex = _b === void 0 ? props.initialSelectedIndex : _b;\n    var selectedKey;\n\n    if (defaultSelectedKey) {\n      selectedKey = defaultSelectedKey;\n    } else if (typeof defaultSelectedIndex === 'number') {\n      selectedKey = links[defaultSelectedIndex].itemKey;\n    } else if (links.length) {\n      selectedKey = links[0].itemKey;\n    }\n\n    _this.state = {\n      selectedKey: selectedKey\n    };\n    return _this;\n  }\n  /**\r\n   * Sets focus to the first pivot tab.\r\n   */\n\n\n  PivotBase.prototype.focus = function () {\n    if (this._focusZone.current) {\n      this._focusZone.current.focus();\n    }\n  };\n\n  PivotBase.prototype.render = function () {\n    var linkCollection = this._getPivotLinks(this.props);\n\n    var selectedKey = this._getSelectedKey(linkCollection);\n\n    var divProps = getNativeProps(this.props, divProperties);\n    this._classNames = this._getClassNames(this.props);\n    return React.createElement(\"div\", tslib_1.__assign({}, divProps), this._renderPivotLinks(linkCollection, selectedKey), this._renderPivotItem(linkCollection, selectedKey));\n  };\n\n  PivotBase.prototype._getSelectedKey = function (linkCollection) {\n    var propsSelectedKey = this.props.selectedKey;\n\n    if (this._isKeyValid(linkCollection, propsSelectedKey)) {\n      return propsSelectedKey;\n    }\n\n    var stateSelectedKey = this.state.selectedKey;\n\n    if (this._isKeyValid(linkCollection, stateSelectedKey)) {\n      return stateSelectedKey;\n    }\n\n    if (linkCollection.links.length) {\n      return linkCollection.links[0].itemKey;\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Renders the set of links to route between pivots\r\n   */\n\n\n  PivotBase.prototype._renderPivotLinks = function (linkCollection, selectedKey) {\n    var _this = this;\n\n    var items = linkCollection.links.map(function (l) {\n      return _this._renderPivotLink(linkCollection, l, selectedKey);\n    });\n    return React.createElement(FocusZone, {\n      componentRef: this._focusZone,\n      direction: FocusZoneDirection.horizontal\n    }, React.createElement(\"div\", {\n      className: this._classNames.root,\n      role: \"tablist\"\n    }, items));\n  };\n  /**\r\n   * Renders the current Pivot Item\r\n   */\n\n\n  PivotBase.prototype._renderPivotItem = function (linkCollection, itemKey) {\n    if (this.props.headersOnly || !itemKey) {\n      return null;\n    }\n\n    var index = linkCollection.keyToIndexMapping[itemKey];\n    var selectedTabId = linkCollection.keyToTabIdMapping[itemKey];\n    return React.createElement(\"div\", {\n      role: \"tabpanel\",\n      \"aria-labelledby\": selectedTabId,\n      className: this._classNames.itemContainer\n    }, React.Children.toArray(this.props.children)[index]);\n  };\n  /**\r\n   * Gets the set of PivotLinks as arrary of IPivotItemProps\r\n   * The set of Links is determined by child components of type PivotItem\r\n   */\n\n\n  PivotBase.prototype._getPivotLinks = function (props) {\n    var _this = this;\n\n    var result = {\n      links: [],\n      keyToIndexMapping: {},\n      keyToTabIdMapping: {}\n    };\n    React.Children.map(props.children, function (child, index) {\n      if (typeof child === 'object' && child.type === PivotItemType) {\n        var pivotItem = child;\n\n        var _a = pivotItem.props,\n            linkText = _a.linkText,\n            pivotItemProps = tslib_1.__rest(_a, [\"linkText\"]);\n\n        var itemKey = pivotItem.props.itemKey || index.toString();\n        result.links.push(tslib_1.__assign({\n          // Use linkText (deprecated) if headerText is not provided\n          headerText: linkText\n        }, pivotItemProps, {\n          itemKey: itemKey\n        }));\n        result.keyToIndexMapping[itemKey] = index;\n        result.keyToTabIdMapping[itemKey] = _this._getTabId(itemKey, index);\n      } else {\n        warn('The children of a Pivot component must be of type PivotItem to be rendered.');\n      }\n    });\n    return result;\n  };\n  /**\r\n   * Generates the Id for the tab button.\r\n   */\n\n\n  PivotBase.prototype._getTabId = function (itemKey, index) {\n    if (this.props.getTabId) {\n      return this.props.getTabId(itemKey, index);\n    }\n\n    return this._pivotId + (\"-Tab\" + index);\n  };\n  /**\r\n   * whether the key exists in the pivot items.\r\n   */\n\n\n  PivotBase.prototype._isKeyValid = function (linkCollection, itemKey) {\n    return itemKey !== undefined && linkCollection.keyToIndexMapping[itemKey] !== undefined;\n  };\n  /**\r\n   * Handles the onClick event on PivotLinks\r\n   */\n\n\n  PivotBase.prototype._onLinkClick = function (itemKey, ev) {\n    ev.preventDefault();\n\n    this._updateSelectedItem(itemKey, ev);\n  };\n  /**\r\n   * Handle the onKeyPress eventon the PivotLinks\r\n   */\n\n\n  PivotBase.prototype._onKeyPress = function (itemKey, ev) {\n    if (ev.which === KeyCodes.enter) {\n      ev.preventDefault();\n\n      this._updateSelectedItem(itemKey);\n    }\n  };\n  /**\r\n   * Updates the state with the new selected index\r\n   */\n\n\n  PivotBase.prototype._updateSelectedItem = function (itemKey, ev) {\n    this.setState({\n      selectedKey: itemKey\n    });\n\n    var linkCollection = this._getPivotLinks(this.props);\n\n    if (this.props.onLinkClick && linkCollection.keyToIndexMapping[itemKey] >= 0) {\n      var index = linkCollection.keyToIndexMapping[itemKey]; // React.Element<any> cannot directly convert to PivotItem.\n\n      var item = React.Children.toArray(this.props.children)[index];\n\n      if (typeof item === 'object' && item.type === PivotItemType) {\n        this.props.onLinkClick(item, ev);\n      }\n    }\n  };\n\n  PivotBase.prototype._getClassNames = function (props) {\n    var theme = props.theme;\n    var rootIsLarge = props.linkSize === PivotLinkSize.large;\n    var rootIsTabs = props.linkFormat === PivotLinkFormat.tabs;\n    return getClassNames(props.styles, {\n      theme: theme,\n      rootIsLarge: rootIsLarge,\n      rootIsTabs: rootIsTabs\n    });\n  };\n\n  return PivotBase;\n}(BaseComponent);\n\nexport { PivotBase };","map":null,"metadata":{},"sourceType":"module"}