{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { HighContrastSelector, ScreenWidthMaxSmall, getScreenSelector, getFocusStyle, getGlobalClassNames } from '../../Styling';\nimport { MessageBarType } from './MessageBar.types';\nvar GlobalClassNames = {\n  root: 'ms-MessageBar',\n  error: 'ms-MessageBar--error',\n  blocked: 'ms-MessageBar--blocked',\n  severeWarning: 'ms-MessageBar--severeWarning',\n  success: 'ms-MessageBar--success',\n  warning: 'ms-MessageBar--warning',\n  multiline: 'ms-MessageBar-multiline',\n  singleline: 'ms-MessageBar-singleline',\n  dismissalSingleLine: 'ms-MessageBar-dismissalSingleLine',\n  expandingSingleLine: 'ms-MessageBar-expandingSingleLine',\n  content: 'ms-MessageBar-content',\n  iconContainer: 'ms-MessageBar-icon',\n  text: 'ms-MessageBar-text',\n  innerText: 'ms-MessageBar-innerText',\n  dismissSingleLine: 'ms-MessageBar-dismissSingleLine',\n  expandSingleLine: 'ms-MessageBar-expandSingleLine',\n  dismissal: 'ms-MessageBar-dismissal',\n  expand: 'ms-MessageBar-expand',\n  actions: 'ms-MessageBar-actions',\n  actionsSingleline: 'ms-MessageBar-actionsSingleLine'\n}; // Returns the background color of the MessageBar root element based on the type of MessageBar.\n\nvar getRootBackground = function getRootBackground(messageBarType, palette, semanticColors) {\n  switch (messageBarType) {\n    case MessageBarType.error:\n    case MessageBarType.blocked:\n      return semanticColors.errorBackground;\n\n    case MessageBarType.severeWarning:\n      return semanticColors.blockingBackground;\n\n    case MessageBarType.success:\n      return semanticColors.successBackground;\n\n    case MessageBarType.warning:\n      return semanticColors.warningBackground;\n  }\n\n  return palette.neutralLighter;\n}; // Returns the icon color based on the type of MessageBar.\n\n\nvar getIconColor = function getIconColor(messageBarType, palette, semanticColors) {\n  switch (messageBarType) {\n    case MessageBarType.error:\n    case MessageBarType.blocked:\n    case MessageBarType.severeWarning:\n      return semanticColors.errorText;\n\n    case MessageBarType.success:\n      return palette.green;\n\n    case MessageBarType.warning:\n      return semanticColors.warningText;\n  }\n\n  return palette.neutralSecondary;\n};\n\nexport var getStyles = function getStyles(props) {\n  var theme = props.theme,\n      className = props.className,\n      messageBarType = props.messageBarType,\n      onDismiss = props.onDismiss,\n      actions = props.actions,\n      truncated = props.truncated,\n      isMultiline = props.isMultiline,\n      expandSingleLine = props.expandSingleLine;\n  var semanticColors = theme.semanticColors,\n      palette = theme.palette,\n      fonts = theme.fonts;\n  var SmallScreenSelector = getScreenSelector(0, ScreenWidthMaxSmall);\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var dismissalAndExpandIconStyle = {\n    fontSize: 12,\n    height: 12,\n    lineHeight: '12px',\n    color: palette.neutralPrimary,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      MsHighContrastAdjust: 'none',\n      color: 'window'\n    }, _a)\n  };\n  var dismissalAndExpandSingleLineStyle = {\n    display: 'flex',\n    selectors: {\n      '& .ms-Button-icon': dismissalAndExpandIconStyle\n    }\n  };\n  var dismissalAndExpandStyle = {\n    flexShrink: 0,\n    margin: 8,\n    marginLeft: 0,\n    selectors: (_b = {\n      '& .ms-Button-icon': dismissalAndExpandIconStyle\n    }, _b[SmallScreenSelector] = {\n      margin: '0px 0px 0px 8px'\n    }, _b)\n  };\n  var focusStyle = getFocusStyle(theme, 0, 'relative', undefined, palette.black);\n  return {\n    root: [classNames.root, theme.fonts.medium, messageBarType === MessageBarType.error && classNames.error, messageBarType === MessageBarType.blocked && classNames.blocked, messageBarType === MessageBarType.severeWarning && classNames.severeWarning, messageBarType === MessageBarType.success && classNames.success, messageBarType === MessageBarType.warning && classNames.warning, isMultiline ? classNames.multiline : classNames.singleline, !isMultiline && onDismiss && classNames.dismissalSingleLine, !isMultiline && truncated && classNames.expandingSingleLine, {\n      background: getRootBackground(messageBarType, palette, semanticColors),\n      color: palette.neutralPrimary,\n      minHeight: 32,\n      width: '100%',\n      boxSizing: 'border-box',\n      display: 'flex',\n      position: 'relative',\n      wordBreak: 'break-word',\n      selectors: (_c = {\n        '& .ms-Link': tslib_1.__assign({\n          color: palette.themeDark\n        }, fonts.small)\n      }, _c[HighContrastSelector] = {\n        background: 'windowText'\n      }, _c)\n    }, isMultiline && {\n      flexDirection: 'column'\n    }, !isMultiline && {\n      selectors: (_d = {}, _d[SmallScreenSelector] = {\n        flexDirection: 'column'\n      }, _d)\n    }, truncated && {\n      flexDirection: 'column',\n      selectors: {\n        '& .ms-Button-icon': dismissalAndExpandIconStyle\n      }\n    }, className],\n    content: [classNames.content, {\n      display: 'flex',\n      lineHeight: 'normal',\n      width: '100%',\n      boxSizing: 'border-box',\n      selectors: {\n        '&:before': {\n          pointerEvents: 'none',\n          position: 'absolute',\n          right: 0,\n          bottom: 0,\n          left: 0,\n          top: 0,\n          margin: 0,\n          selectors: (_e = {}, _e[HighContrastSelector] = {\n            background: 'WindowText',\n            color: 'Window',\n            content: ' '\n          }, _e)\n        }\n      }\n    }, !isMultiline && {\n      selectors: (_f = {}, _f[SmallScreenSelector] = {\n        flexDirection: 'row'\n      }, _f)\n    }, (truncated || isMultiline) && {\n      flexDirection: 'row'\n    }],\n    iconContainer: [classNames.iconContainer, {\n      fontSize: 16,\n      minWidth: 16,\n      minHeight: 16,\n      display: 'flex',\n      color: palette.neutralSecondary,\n      flexShrink: 0,\n      margin: 16,\n      marginRight: 0,\n      selectors: (_g = {}, _g[SmallScreenSelector] = {\n        margin: '8px 0px 8px 8px'\n      }, _g)\n    }],\n    icon: {\n      color: getIconColor(messageBarType, palette, semanticColors),\n      selectors: (_h = {}, _h[HighContrastSelector] = {\n        MsHighContrastAdjust: 'none',\n        color: 'window'\n      }, _h)\n    },\n    text: [classNames.text, tslib_1.__assign({\n      minWidth: 0,\n      display: 'flex',\n      flexGrow: 1,\n      margin: '16px 8px'\n    }, fonts.small, {\n      selectors: (_j = {}, _j[SmallScreenSelector] = {\n        margin: '8px 0px 8px 8px'\n      }, _j[HighContrastSelector] = {\n        MsHighContrastAdjust: 'none',\n        color: 'window'\n      }, _j)\n    }), !onDismiss && {\n      marginRight: 16,\n      selectors: (_k = {}, _k[SmallScreenSelector] = {\n        marginRight: 8\n      }, _k)\n    }, isMultiline && actions && {\n      marginBottom: 8,\n      selectors: (_l = {}, _l[SmallScreenSelector] = {\n        marginBottom: 0\n      }, _l)\n    }, !isMultiline && actions && {\n      selectors: (_m = {}, _m[SmallScreenSelector] = {\n        marginBottom: 0\n      }, _m)\n    }],\n    innerText: [classNames.innerText, {\n      lineHeight: 16,\n      selectors: {\n        '& span': {\n          selectors: {\n            '& a': {\n              paddingLeft: 4\n            }\n          }\n        }\n      }\n    }, truncated && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }, !isMultiline && {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    }, !isMultiline && !truncated && {\n      selectors: (_o = {}, _o[SmallScreenSelector] = {\n        overflow: 'visible',\n        whiteSpace: 'pre-wrap'\n      }, _o)\n    }, expandSingleLine && {\n      overflow: 'visible',\n      whiteSpace: 'pre-wrap'\n    }],\n    dismissSingleLine: [classNames.dismissSingleLine, dismissalAndExpandSingleLineStyle],\n    expandSingleLine: [classNames.expandSingleLine, dismissalAndExpandSingleLineStyle],\n    dismissal: [classNames.dismissal, dismissalAndExpandStyle, focusStyle],\n    expand: [classNames.expand, dismissalAndExpandStyle, focusStyle],\n    actions: [isMultiline ? classNames.actions : classNames.actionsSingleline, {\n      display: 'flex',\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis: 'auto',\n      flexDirection: 'row-reverse',\n      alignItems: 'center',\n      margin: '8px 8px 8px 0',\n      selectors: {\n        '& button:nth-child(n+2)': {\n          marginLeft: 8\n        }\n      }\n    }, isMultiline && {\n      margin: '0px 12px 12px 0',\n      selectors: {\n        '& button:nth-child(n+2)': {\n          marginLeft: 12\n        }\n      }\n    }]\n  };\n\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n};","map":null,"metadata":{},"sourceType":"module"}