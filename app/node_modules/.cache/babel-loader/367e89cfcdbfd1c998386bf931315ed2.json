{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../../Utilities';\nimport { ShimmerElementType, ShimmerElementsDefaultHeights } from '../Shimmer.types';\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\nvar getClassNames = classNamesFunction();\n\nvar ShimmerElementsGroupBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ShimmerElementsGroupBase, _super);\n\n  function ShimmerElementsGroupBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._getRenderedElements = function (shimmerElements, rowHeight) {\n      var renderedElements = shimmerElements ? shimmerElements.map(function (elem, index) {\n        var type = elem.type,\n            filteredElem = tslib_1.__rest(elem, [\"type\"]);\n\n        switch (elem.type) {\n          case ShimmerElementType.circle:\n            return React.createElement(ShimmerCircle, tslib_1.__assign({\n              key: index\n            }, filteredElem, {\n              styles: _this._getBorderStyles(elem, rowHeight)\n            }));\n\n          case ShimmerElementType.gap:\n            return React.createElement(ShimmerGap, tslib_1.__assign({\n              key: index\n            }, filteredElem, {\n              styles: _this._getBorderStyles(elem, rowHeight)\n            }));\n\n          case ShimmerElementType.line:\n            return React.createElement(ShimmerLine, tslib_1.__assign({\n              key: index\n            }, filteredElem, {\n              styles: _this._getBorderStyles(elem, rowHeight)\n            }));\n        }\n      }) : React.createElement(ShimmerLine, {\n        height: ShimmerElementsDefaultHeights.line,\n        styles: {\n          root: [{\n            borderWidth: '0px'\n          }]\n        }\n      });\n      return renderedElements;\n    };\n\n    _this._getBorderStyles = function (elem, rowHeight) {\n      var elemHeight = elem.height;\n      var dif = rowHeight && elemHeight ? rowHeight - elemHeight : 0;\n      var borderStyle;\n\n      if (!elem.verticalAlign || elem.verticalAlign === 'center') {\n        borderStyle = {\n          borderBottomWidth: (dif ? Math.floor(dif / 2) : 0) + \"px\",\n          borderTopWidth: (dif ? Math.ceil(dif / 2) : 0) + \"px\"\n        };\n      } else if (elem.verticalAlign && elem.verticalAlign === 'top') {\n        borderStyle = {\n          borderBottomWidth: (dif ? dif : 0) + \"px\",\n          borderTopWidth: \"0px\"\n        };\n      } else if (elem.verticalAlign && elem.verticalAlign === 'bottom') {\n        borderStyle = {\n          borderBottomWidth: \"0px\",\n          borderTopWidth: (dif ? dif : 0) + \"px\"\n        };\n      }\n\n      return {\n        root: [tslib_1.__assign({}, borderStyle)]\n      };\n    };\n    /**\r\n     * User should not worry to provide which of the elements is the highest, we do the calculation for him.\r\n     * Plus if user forgot to specify the height we assign their defaults.\r\n     */\n\n\n    _this._findMaxElementHeight = function (elements) {\n      var itemsDefaulted = elements.map(function (elem) {\n        switch (elem.type) {\n          case ShimmerElementType.circle:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.circle;\n            }\n\n          case ShimmerElementType.line:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.line;\n            }\n\n          case ShimmerElementType.gap:\n            if (!elem.height) {\n              elem.height = ShimmerElementsDefaultHeights.gap;\n            }\n\n        }\n\n        return elem;\n      });\n      var rowHeight = itemsDefaulted.reduce(function (acc, next) {\n        return next.height ? next.height > acc ? next.height : acc : acc;\n      }, 0);\n      return rowHeight;\n    };\n\n    return _this;\n  }\n\n  ShimmerElementsGroupBase.prototype.render = function () {\n    var _a = this.props,\n        styles = _a.styles,\n        width = _a.width,\n        shimmerElements = _a.shimmerElements,\n        rowHeight = _a.rowHeight,\n        flexWrap = _a.flexWrap,\n        theme = _a.theme;\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      flexWrap: flexWrap\n    });\n    var height = rowHeight ? rowHeight : this._findMaxElementHeight(shimmerElements ? shimmerElements : []);\n    return (// tslint:disable-next-line:jsx-ban-props\n      React.createElement(\"div\", {\n        style: {\n          width: width ? width : 'auto'\n        },\n        className: this._classNames.root\n      }, this._getRenderedElements(shimmerElements, height))\n    );\n  };\n\n  ShimmerElementsGroupBase.defaultProps = {\n    flexWrap: false\n  };\n  return ShimmerElementsGroupBase;\n}(BaseComponent);\n\nexport { ShimmerElementsGroupBase };","map":null,"metadata":{},"sourceType":"module"}