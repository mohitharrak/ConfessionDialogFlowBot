{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, classNamesFunction } from '../../Utilities';\nimport { TextField } from '../../TextField';\nimport { ColorRectangle } from './ColorRectangle/ColorRectangle';\nimport { ColorSlider } from './ColorSlider/ColorSlider';\nimport { MAX_COLOR_HUE, getColorFromString, getColorFromRGBA, updateA, updateH } from '../../utilities/color/colors';\nvar getClassNames = classNamesFunction();\nvar colorComponents = ['hex', 'r', 'g', 'b', 'a'];\n\nvar ColorPickerBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ColorPickerBase, _super);\n\n  function ColorPickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._onSVChanged = function (ev, color) {\n      _this._updateColor(ev, color);\n    };\n\n    _this._onHChanged = function (ev, h) {\n      _this._updateColor(ev, updateH(_this.state.color, h));\n    };\n\n    _this._onAChanged = function (ev, a) {\n      _this._updateColor(ev, updateA(_this.state.color, a));\n    };\n\n    _this._warnDeprecations({\n      onColorChanged: 'onChange'\n    });\n\n    _this.state = {\n      color: _getColorFromProps(props) || getColorFromString('#ffffff')\n    };\n    _this._textChangeHandlers = {};\n\n    for (var _i = 0, colorComponents_1 = colorComponents; _i < colorComponents_1.length; _i++) {\n      var component = colorComponents_1[_i];\n      _this._textChangeHandlers[component] = _this._onTextChange.bind(_this, component);\n    }\n\n    _this._textLabels = {\n      r: props.redLabel,\n      g: props.greenLabel,\n      b: props.blueLabel,\n      a: props.alphaLabel,\n      hex: props.hexLabel\n    };\n    return _this;\n  }\n\n  Object.defineProperty(ColorPickerBase.prototype, \"color\", {\n    get: function get() {\n      return this.state.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorPickerBase.prototype.componentWillReceiveProps = function (newProps) {\n    var color = _getColorFromProps(newProps);\n\n    if (color) {\n      this._updateColor(undefined, color);\n    }\n  };\n\n  ColorPickerBase.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    var theme = props.theme,\n        className = props.className,\n        styles = props.styles;\n    var color = this.state.color;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className\n    });\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, React.createElement(\"div\", {\n      className: classNames.panel\n    }, React.createElement(ColorRectangle, {\n      color: color,\n      onChange: this._onSVChanged\n    }), React.createElement(ColorSlider, {\n      className: \"is-hue\",\n      minValue: 0,\n      maxValue: MAX_COLOR_HUE,\n      value: color.h,\n      onChange: this._onHChanged\n    }), !props.alphaSliderHidden && React.createElement(ColorSlider, {\n      className: \"is-alpha\",\n      isAlpha: true,\n      overlayStyle: {\n        background: \"linear-gradient(to right, transparent 0, #\" + color.hex + \" 100%)\"\n      },\n      minValue: 0,\n      maxValue: 100,\n      value: color.a,\n      onChange: this._onAChanged\n    }), React.createElement(\"table\", {\n      className: classNames.table,\n      cellPadding: \"0\",\n      cellSpacing: \"0\"\n    }, React.createElement(\"thead\", null, React.createElement(\"tr\", {\n      className: classNames.tableHeader\n    }, React.createElement(\"td\", {\n      className: classNames.tableHexCell\n    }, props.hexLabel), React.createElement(\"td\", null, props.redLabel), React.createElement(\"td\", null, props.greenLabel), React.createElement(\"td\", null, props.blueLabel), !props.alphaSliderHidden && React.createElement(\"td\", null, props.alphaLabel))), React.createElement(\"tbody\", null, React.createElement(\"tr\", null, colorComponents.map(function (comp) {\n      if (comp === 'a' && props.alphaSliderHidden) {\n        return null;\n      }\n\n      return React.createElement(\"td\", {\n        key: comp,\n        style: comp === 'hex' ? undefined : {\n          width: '18%'\n        }\n      }, React.createElement(TextField, {\n        className: classNames.input,\n        onChange: _this._textChangeHandlers[comp],\n        value: _this._getDisplayValue(comp),\n        spellCheck: false,\n        ariaLabel: _this._textLabels[comp]\n      }));\n    }))))));\n  };\n\n  ColorPickerBase.prototype._getDisplayValue = function (component) {\n    var color = this.state.color;\n\n    if (typeof color[component] === 'number') {\n      return String(component === 'a' ? color.a.toPrecision(3) : color[component]);\n    }\n\n    return color[component] || '';\n  };\n\n  ColorPickerBase.prototype._onTextChange = function (component, event, newValue) {\n    var color = this.state.color;\n    var isHex = component === 'hex';\n\n    if (String(color[component]) === newValue) {\n      return;\n    }\n\n    var newColor;\n\n    if (isHex) {\n      newColor = getColorFromString('#' + newValue);\n    } else {\n      newColor = getColorFromRGBA((_a = {\n        r: color.r,\n        g: color.g,\n        b: color.b,\n        a: color.a || 100\n      }, _a[component] = Number(newValue), _a));\n    }\n\n    this._updateColor(event, newColor);\n\n    var _a;\n  };\n  /**\r\n   * Update the displayed color and call change handlers if appropriate.\r\n   * @param ev Event if call was triggered by an event (undefined if triggered by props change)\r\n   * @param newColor Updated color\r\n   */\n\n\n  ColorPickerBase.prototype._updateColor = function (ev, newColor) {\n    if (!newColor) {\n      return;\n    }\n\n    var props = this.props;\n    var color = this.state.color;\n    var isDifferentColor = newColor.h !== color.h || newColor.str !== color.str;\n\n    if (isDifferentColor) {\n      this.setState({\n        color: newColor\n      }, function () {\n        if (ev && props.onChange) {\n          props.onChange(ev, newColor);\n        } // To preserve the existing behavior, this one is called even when the change comes from a\n        // props update (which is not very useful)\n\n\n        if (props.onColorChanged) {\n          props.onColorChanged(newColor.str, newColor);\n        }\n      });\n    }\n  };\n\n  ColorPickerBase.defaultProps = {\n    hexLabel: 'Hex',\n    redLabel: 'Red',\n    greenLabel: 'Green',\n    blueLabel: 'Blue',\n    alphaLabel: 'Alpha'\n  };\n  return ColorPickerBase;\n}(BaseComponent);\n\nexport { ColorPickerBase };\n\nfunction _getColorFromProps(props) {\n  var color = props.color;\n  return typeof color === 'string' ? getColorFromString(color) : color;\n}","map":null,"metadata":{},"sourceType":"module"}