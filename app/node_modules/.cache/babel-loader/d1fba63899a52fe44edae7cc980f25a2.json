{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { IconButton } from '../../Button';\nimport { Layer } from '../../Layer';\nimport { Overlay } from '../../Overlay';\nimport { Popup } from '../../Popup';\nimport { getTheme, IconFontSizes } from '../../Styling';\nimport { allowScrollOnElement, BaseComponent, classNamesFunction, divProperties, elementContains, getId, getNativeProps, getRTL } from '../../Utilities';\nimport { FocusTrapZone } from '../FocusTrapZone/index';\nimport { PanelType } from './Panel.types';\nvar getClassNames = classNamesFunction();\n\nvar PanelBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(PanelBase, _super);\n\n  function PanelBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._panel = React.createRef();\n\n    _this.dismiss = function (ev) {\n      if (_this.state.isOpen) {\n        if (_this.props.onDismiss) {\n          _this.props.onDismiss(ev);\n        }\n\n        if (!ev || ev && !ev.defaultPrevented) {\n          _this.setState({\n            isOpen: false,\n            isAnimating: true\n          }, function () {\n            _this._async.setTimeout(_this._onTransitionComplete, 200);\n          });\n        }\n      }\n    }; // Allow the user to scroll within the panel but not on the body\n\n\n    _this._allowScrollOnPanel = function (elt) {\n      if (elt) {\n        allowScrollOnElement(elt, _this._events);\n      } else {\n        _this._events.off(_this._scrollableContent);\n      }\n\n      _this._scrollableContent = elt;\n    };\n\n    _this._onRenderNavigation = function (props) {\n      var _a = _this.props.onRenderNavigationContent,\n          onRenderNavigationContent = _a === void 0 ? _this._onRenderNavigationContent : _a;\n      return React.createElement(\"div\", {\n        className: _this._classNames.navigation\n      }, onRenderNavigationContent(props, _this._onRenderNavigationContent));\n    };\n\n    _this._onRenderNavigationContent = function (props) {\n      var closeButtonAriaLabel = props.closeButtonAriaLabel,\n          hasCloseButton = props.hasCloseButton;\n      var theme = getTheme();\n\n      if (hasCloseButton) {\n        // TODO -Issue #5689: Comment in once Button is converted to mergeStyles\n        // const iconButtonStyles = this._classNames.subComponentStyles\n        // ? (this._classNames.subComponentStyles.iconButton as IStyleFunctionOrObject<IButtonStyleProps, IButtonStyles>)\n        // : undefined;\n        return React.createElement(IconButton // TODO -Issue #5689: Comment in once Button is converted to mergeStyles\n        // className={iconButtonStyles}\n        , {\n          // TODO -Issue #5689: Comment in once Button is converted to mergeStyles\n          // className={iconButtonStyles}\n          styles: {\n            root: {\n              height: 'auto',\n              width: '44px',\n              color: theme.palette.neutralSecondary,\n              fontSize: IconFontSizes.large\n            },\n            rootHovered: {\n              color: theme.palette.neutralPrimary\n            }\n          },\n          className: _this._classNames.closeButton,\n          onClick: _this._onPanelClick,\n          ariaLabel: closeButtonAriaLabel,\n          \"data-is-visible\": true,\n          iconProps: {\n            iconName: 'Cancel'\n          }\n        });\n      }\n\n      return null;\n    };\n\n    _this._onRenderHeader = function (props, defaultRender, headerTextId) {\n      var headerText = props.headerText;\n\n      if (headerText) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.header\n        }, React.createElement(\"p\", {\n          className: _this._classNames.headerText,\n          id: headerTextId,\n          role: \"heading\",\n          \"aria-level\": 2\n        }, headerText));\n      }\n\n      return null;\n    };\n\n    _this._onRenderBody = function (props) {\n      return React.createElement(\"div\", {\n        className: _this._classNames.content\n      }, props.children);\n    };\n\n    _this._onRenderFooter = function (props) {\n      var _a = _this.props.onRenderFooterContent,\n          onRenderFooterContent = _a === void 0 ? null : _a;\n\n      if (onRenderFooterContent) {\n        return React.createElement(\"div\", {\n          className: _this._classNames.footer\n        }, React.createElement(\"div\", {\n          className: _this._classNames.footerInner\n        }, onRenderFooterContent()));\n      }\n\n      return null;\n    };\n\n    _this._onPanelClick = function (ev) {\n      _this.dismiss(ev);\n    };\n\n    _this._onTransitionComplete = function () {\n      _this._updateFooterPosition();\n\n      _this.setState({\n        isAnimating: false\n      });\n\n      if (!_this.state.isOpen && _this.props.onDismissed) {\n        _this.props.onDismissed();\n      }\n    };\n\n    _this._warnDeprecations({\n      ignoreExternalFocusing: 'focusTrapZoneProps',\n      forceFocusInsideTrap: 'focusTrapZoneProps',\n      firstFocusableSelector: 'focusTrapZoneProps'\n    });\n\n    _this.state = {\n      isFooterSticky: false,\n      isOpen: false,\n      isAnimating: false,\n      id: getId('Panel')\n    };\n    return _this;\n  }\n\n  PanelBase.prototype.componentDidMount = function () {\n    this._events.on(window, 'resize', this._updateFooterPosition);\n\n    if (this._shouldListenForOuterClick(this.props)) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n\n    if (this.props.isOpen) {\n      this.open();\n    }\n  };\n\n  PanelBase.prototype.componentDidUpdate = function (previousProps) {\n    var shouldListenOnOuterClick = this._shouldListenForOuterClick(this.props);\n\n    var previousShouldListenOnOuterClick = this._shouldListenForOuterClick(previousProps);\n\n    if (shouldListenOnOuterClick && !previousShouldListenOnOuterClick) {\n      this._events.on(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    } else if (!shouldListenOnOuterClick && previousShouldListenOnOuterClick) {\n      this._events.off(document.body, 'mousedown', this._dismissOnOuterClick, true);\n    }\n  };\n\n  PanelBase.prototype.componentWillReceiveProps = function (newProps) {\n    if (newProps.isOpen !== this.state.isOpen) {\n      if (newProps.isOpen) {\n        this.open();\n      } else {\n        this.dismiss();\n      }\n    }\n  };\n\n  PanelBase.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.className,\n        className = _b === void 0 ? '' : _b,\n        elementToFocusOnDismiss = _a.elementToFocusOnDismiss,\n        firstFocusableSelector = _a.firstFocusableSelector,\n        focusTrapZoneProps = _a.focusTrapZoneProps,\n        forceFocusInsideTrap = _a.forceFocusInsideTrap,\n        hasCloseButton = _a.hasCloseButton,\n        headerText = _a.headerText,\n        _c = _a.headerClassName,\n        headerClassName = _c === void 0 ? '' : _c,\n        ignoreExternalFocusing = _a.ignoreExternalFocusing,\n        isBlocking = _a.isBlocking,\n        isFooterAtBottom = _a.isFooterAtBottom,\n        isLightDismiss = _a.isLightDismiss,\n        isHiddenOnDismiss = _a.isHiddenOnDismiss,\n        layerProps = _a.layerProps,\n        type = _a.type,\n        styles = _a.styles,\n        theme = _a.theme,\n        customWidth = _a.customWidth,\n        _d = _a.onLightDismissClick,\n        onLightDismissClick = _d === void 0 ? this._onPanelClick : _d,\n        _e = _a.onRenderNavigation,\n        onRenderNavigation = _e === void 0 ? this._onRenderNavigation : _e,\n        _f = _a.onRenderHeader,\n        onRenderHeader = _f === void 0 ? this._onRenderHeader : _f,\n        _g = _a.onRenderBody,\n        onRenderBody = _g === void 0 ? this._onRenderBody : _g,\n        _h = _a.onRenderFooter,\n        onRenderFooter = _h === void 0 ? this._onRenderFooter : _h;\n    var _j = this.state,\n        isFooterSticky = _j.isFooterSticky,\n        isOpen = _j.isOpen,\n        isAnimating = _j.isAnimating,\n        id = _j.id;\n    var isLeft = type === PanelType.smallFixedNear || type === PanelType.customNear ? true : false;\n    var isRTL = getRTL();\n    var isOnRightSide = isRTL ? isLeft : !isLeft;\n    var headerTextId = headerText && id + '-headerText';\n    var customWidthStyles = type === PanelType.custom || type === PanelType.customNear ? {\n      width: customWidth\n    } : {};\n    var nativeProps = getNativeProps(this.props, divProperties);\n\n    if (!isOpen && !isAnimating && !isHiddenOnDismiss) {\n      return null;\n    }\n\n    this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      focusTrapZoneClassName: focusTrapZoneProps ? focusTrapZoneProps.className : undefined,\n      hasCloseButton: hasCloseButton,\n      headerClassName: headerClassName,\n      isAnimating: isAnimating,\n      isFooterAtBottom: isFooterAtBottom,\n      isFooterSticky: isFooterSticky,\n      isOnRightSide: isOnRightSide,\n      isOpen: isOpen,\n      isHiddenOnDismiss: isHiddenOnDismiss,\n      type: type\n    });\n    var _classNames = this._classNames;\n    var overlay;\n\n    if (isBlocking && isOpen) {\n      overlay = React.createElement(Overlay, {\n        className: _classNames.overlay,\n        isDarkThemed: false,\n        onClick: isLightDismiss ? onLightDismissClick : undefined\n      });\n    }\n\n    var header = onRenderHeader(this.props, this._onRenderHeader, headerTextId);\n    return React.createElement(Layer, tslib_1.__assign({}, layerProps), React.createElement(Popup, {\n      role: \"dialog\",\n      \"aria-modal\": \"true\",\n      ariaLabelledBy: header ? headerTextId : undefined,\n      onDismiss: this.dismiss,\n      className: _classNames.hiddenPanel\n    }, React.createElement(\"div\", tslib_1.__assign({\n      \"aria-hidden\": !isOpen && isAnimating\n    }, nativeProps, {\n      ref: this._panel,\n      className: _classNames.root\n    }), overlay, React.createElement(FocusTrapZone, tslib_1.__assign({\n      ignoreExternalFocusing: ignoreExternalFocusing,\n      forceFocusInsideTrap: isHiddenOnDismiss && !isOpen ? false : forceFocusInsideTrap,\n      firstFocusableSelector: firstFocusableSelector,\n      isClickableOutsideFocusTrap: true\n    }, focusTrapZoneProps, {\n      className: _classNames.main,\n      style: customWidthStyles,\n      elementToFocusOnDismiss: elementToFocusOnDismiss\n    }), React.createElement(\"div\", {\n      className: _classNames.commands,\n      \"data-is-visible\": true\n    }, onRenderNavigation(this.props, this._onRenderNavigation)), React.createElement(\"div\", {\n      className: _classNames.contentInner\n    }, header, React.createElement(\"div\", {\n      ref: this._allowScrollOnPanel,\n      className: _classNames.scrollableContent,\n      \"data-is-scrollable\": true\n    }, onRenderBody(this.props, this._onRenderBody)), onRenderFooter(this.props, this._onRenderFooter))))));\n  };\n\n  PanelBase.prototype.open = function () {\n    var _this = this;\n\n    if (!this.state.isOpen) {\n      this.setState({\n        isOpen: true,\n        isAnimating: true\n      }, function () {\n        _this._async.setTimeout(_this._onTransitionComplete, 200);\n      });\n    }\n  };\n\n  PanelBase.prototype._shouldListenForOuterClick = function (props) {\n    return !!props.isBlocking && !!props.isOpen;\n  };\n\n  PanelBase.prototype._updateFooterPosition = function () {\n    var scrollableContent = this._scrollableContent;\n\n    if (scrollableContent) {\n      var height = scrollableContent.clientHeight;\n      var innerHeight_1 = scrollableContent.scrollHeight;\n      this.setState({\n        isFooterSticky: height < innerHeight_1 ? true : false\n      });\n    }\n  };\n\n  PanelBase.prototype._dismissOnOuterClick = function (ev) {\n    var panel = this._panel.current;\n\n    if (this.state.isOpen && panel) {\n      if (!elementContains(panel, ev.target)) {\n        if (this.props.onOuterClick) {\n          this.props.onOuterClick();\n          ev.preventDefault();\n        } else {\n          this.dismiss();\n        }\n      }\n    }\n  };\n\n  PanelBase.defaultProps = {\n    isHiddenOnDismiss: false,\n    isOpen: false,\n    isBlocking: true,\n    hasCloseButton: true,\n    type: PanelType.smallFixedFar\n  };\n  return PanelBase;\n}(BaseComponent);\n\nexport { PanelBase };","map":null,"metadata":{},"sourceType":"module"}