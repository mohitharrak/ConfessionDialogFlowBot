{"ast":null,"code":"import { FontSizes, FontWeights, HighContrastSelector, getGlobalClassNames } from '../../../Styling';\nimport { IsFocusVisibleClassName } from '../../../Utilities';\nvar GlobalClassNames = {\n  root: 'ms-ChoiceField',\n  choiceFieldWrapper: 'ms-ChoiceField-wrapper',\n  input: 'ms-ChoiceField-input',\n  field: 'ms-ChoiceField-field',\n  innerField: 'ms-ChoiceField-innerField',\n  imageWrapper: 'ms-ChoiceField-imageWrapper',\n  iconWrapper: 'ms-ChoiceField-iconWrapper',\n  labelWrapper: 'ms-ChoiceField-labelWrapper',\n  checked: 'is-checked'\n};\nvar labelWrapperLineHeight = 15;\nvar iconSize = 32;\nvar choiceFieldSize = 20;\nvar choiceFieldTransitionDuration = '200ms';\nvar choiceFieldTransitionTiming = 'cubic-bezier(.4, 0, .23, 1)';\nvar radioButtonSpacing = 3;\nvar radioButtonInnerSize = 5;\n\nfunction getChoiceGroupFocusStyle(palette, hasIconOrImage) {\n  return ['is-inFocus', {\n    selectors: (_a = {}, _a[\".\" + IsFocusVisibleClassName + \" &\"] = {\n      position: 'relative',\n      outline: 'transparent',\n      selectors: {\n        '::-moz-focus-inner': {\n          border: 0\n        },\n        ':after': {\n          content: '\"\"',\n          top: -2,\n          right: -2,\n          bottom: -2,\n          left: -2,\n          pointerEvents: 'none',\n          border: '1px solid ' + (hasIconOrImage ? palette.neutralSecondary : palette.neutralPrimary),\n          position: 'absolute',\n          selectors: (_b = {}, _b[HighContrastSelector] = {\n            borderColor: 'WindowText',\n            borderWidth: hasIconOrImage ? 1 : 2\n          }, _b)\n        }\n      }\n    }, _a)\n  }];\n\n  var _a, _b;\n}\n\nfunction getImageWrapperStyle(isSelectedImageWrapper, className, checked) {\n  return [className, {\n    paddingBottom: 2,\n    transitionProperty: 'opacity',\n    transitionDuration: choiceFieldTransitionDuration,\n    transitionTimingFunction: 'ease',\n    selectors: {\n      '.ms-Image': {\n        display: 'inline-block',\n        borderStyle: 'none'\n      }\n    }\n  }, (checked ? !isSelectedImageWrapper : isSelectedImageWrapper) && ['is-hidden', {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n    overflow: 'hidden',\n    opacity: 0\n  }]];\n}\n\nexport var getStyles = function getStyles(props) {\n  var theme = props.theme,\n      hasIcon = props.hasIcon,\n      hasImage = props.hasImage,\n      checked = props.checked,\n      disabled = props.disabled,\n      imageIsLarge = props.imageIsLarge,\n      focused = props.focused;\n  var palette = theme.palette,\n      semanticColors = theme.semanticColors;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  var fieldHoverOrFocusProperties = {\n    selectors: {\n      '.ms-ChoiceFieldLabel': {\n        color: semanticColors.bodyTextChecked\n      },\n      ':before': {\n        borderColor: checked ? semanticColors.inputBackgroundCheckedHovered : semanticColors.inputBorderHovered\n      }\n    }\n  };\n  var enabledFieldWithImageHoverOrFocusProperties = {\n    borderColor: checked ? palette.themeDark : palette.neutralTertiaryAlt,\n    selectors: {\n      ':before': {\n        opacity: 1,\n        borderColor: checked ? palette.themeDark : semanticColors.inputBorderHovered\n      }\n    }\n  };\n  var circleAreaProperties = [{\n    content: '\"\"',\n    display: 'inline-block',\n    backgroundColor: semanticColors.bodyBackground,\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: semanticColors.smallInputBorder,\n    width: choiceFieldSize,\n    height: choiceFieldSize,\n    fontWeight: 'normal',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    boxSizing: 'border-box',\n    transitionProperty: 'border-color',\n    transitionDuration: choiceFieldTransitionDuration,\n    transitionTimingFunction: choiceFieldTransitionTiming,\n    borderRadius: '50%'\n  }, disabled && {\n    backgroundColor: checked ? semanticColors.bodyBackground : semanticColors.disabledText,\n    borderColor: semanticColors.disabledText,\n    selectors: (_a = {}, _a[HighContrastSelector] = {\n      color: 'GrayText'\n    }, _a)\n  }, checked && {\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: disabled ? semanticColors.disabledText : semanticColors.inputBackgroundChecked,\n    selectors: (_b = {}, _b[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _b)\n  }, (hasIcon || hasImage) && {\n    top: radioButtonSpacing,\n    right: radioButtonSpacing,\n    left: 'auto',\n    opacity: !disabled && checked ? 1 : 0\n  }];\n  var dotAreaProperties = [{\n    content: '\"\"',\n    width: 0,\n    height: 0,\n    borderRadius: '50%',\n    position: 'absolute',\n    left: choiceFieldSize / 2,\n    right: 0,\n    transitionProperty: 'border-width',\n    transitionDuration: choiceFieldTransitionDuration,\n    transitionTimingFunction: choiceFieldTransitionTiming,\n    boxSizing: 'border-box'\n  }, checked && {\n    borderWidth: 5,\n    borderStyle: 'solid',\n    borderColor: disabled ? semanticColors.disabledText : semanticColors.inputBackgroundChecked,\n    left: 5,\n    top: 5,\n    width: 10,\n    height: 10,\n    selectors: (_c = {}, _c[HighContrastSelector] = {\n      borderColor: 'Highlight'\n    }, _c)\n  }, checked && (hasIcon || hasImage) && {\n    top: radioButtonSpacing + radioButtonInnerSize,\n    right: radioButtonSpacing + radioButtonInnerSize,\n    left: 'auto' // To reset the value of 'left' to its default value, so that 'right' works\n\n  }];\n  return {\n    root: [classNames.root, theme.fonts.medium, {\n      display: 'flex',\n      alignItems: 'center',\n      boxSizing: 'border-box',\n      color: semanticColors.bodyText,\n      fontSize: FontSizes.medium,\n      fontWeight: FontWeights.regular,\n      minHeight: 26,\n      border: 'none',\n      position: 'relative',\n      marginTop: 8,\n      selectors: {\n        '.ms-ChoiceFieldLabel': {\n          fontSize: FontSizes.medium,\n          display: 'inline-block'\n        }\n      }\n    }, !hasIcon && !hasImage && {\n      selectors: {\n        '.ms-ChoiceFieldLabel': {\n          paddingLeft: '26px'\n        }\n      }\n    }, hasImage && 'ms-ChoiceField--image', hasIcon && 'ms-ChoiceField--icon', (hasIcon || hasImage) && {\n      display: 'inline-flex',\n      fontSize: 0,\n      margin: '0 4px 4px 0',\n      paddingLeft: 0,\n      backgroundColor: palette.neutralLighter,\n      height: '100%'\n    }],\n    choiceFieldWrapper: [classNames.choiceFieldWrapper, focused && getChoiceGroupFocusStyle(palette, hasIcon || hasImage)],\n    // The hidden input\n    input: [classNames.input, {\n      position: 'absolute',\n      opacity: 0,\n      top: 0,\n      right: 0,\n      width: '100%',\n      height: '100%',\n      margin: 0\n    }],\n    field: [classNames.field, checked && classNames.checked, {\n      display: 'inline-block',\n      cursor: 'pointer',\n      marginTop: 0,\n      position: 'relative',\n      verticalAlign: 'top',\n      userSelect: 'none',\n      minHeight: 20,\n      selectors: {\n        ':hover': !disabled && fieldHoverOrFocusProperties,\n        ':focus': !disabled && fieldHoverOrFocusProperties,\n        // The circle\n        ':before': circleAreaProperties,\n        // The dot\n        ':after': dotAreaProperties\n      }\n    }, hasIcon && 'ms-ChoiceField--icon', hasImage && 'ms-ChoiceField-field--image', (hasIcon || hasImage) && {\n      boxSizing: 'content-box',\n      cursor: 'pointer',\n      paddingTop: 22,\n      margin: 0,\n      textAlign: 'center',\n      transitionProperty: 'all',\n      transitionDuration: choiceFieldTransitionDuration,\n      transitionTimingFunction: 'ease',\n      border: '2px solid transparent',\n      justifyContent: 'center',\n      alignItems: 'center',\n      display: 'flex',\n      flexDirection: 'column'\n    }, checked && {\n      borderColor: palette.themePrimary\n    }, (hasIcon || hasImage) && !disabled && {\n      selectors: {\n        ':hover': enabledFieldWithImageHoverOrFocusProperties,\n        ':focus': enabledFieldWithImageHoverOrFocusProperties\n      }\n    }, disabled && {\n      cursor: 'default',\n      selectors: (_d = {\n        '.ms-ChoiceFieldLabel': {\n          color: semanticColors.disabledBodyText\n        }\n      }, _d[HighContrastSelector] = {\n        color: 'GrayText'\n      }, _d)\n    }],\n    innerField: [classNames.innerField, (hasIcon || hasImage) && {\n      position: 'relative',\n      display: 'inline-block',\n      paddingLeft: 30,\n      paddingRight: 30\n    }, (hasIcon || hasImage) && imageIsLarge && {\n      paddingLeft: 24,\n      paddingRight: 24\n    }, (hasIcon || hasImage) && disabled && {\n      opacity: 0.25,\n      selectors: (_e = {}, _e[HighContrastSelector] = {\n        color: 'GrayText',\n        opacity: 1\n      }, _e)\n    }],\n    imageWrapper: getImageWrapperStyle(false, classNames.imageWrapper, checked),\n    selectedImageWrapper: getImageWrapperStyle(true, classNames.imageWrapper, checked),\n    iconWrapper: [classNames.iconWrapper, {\n      fontSize: iconSize,\n      lineHeight: iconSize,\n      height: iconSize\n    }],\n    labelWrapper: [classNames.labelWrapper, (hasIcon || hasImage) && {\n      display: 'block',\n      position: 'relative',\n      margin: '4px 8px',\n      height: labelWrapperLineHeight * 2,\n      lineHeight: labelWrapperLineHeight,\n      overflow: 'hidden',\n      whiteSpace: 'pre-wrap',\n      textOverflow: 'ellipsis',\n      fontSize: FontSizes.medium,\n      fontWeight: FontWeights.regular\n    }]\n  };\n\n  var _a, _b, _c, _d, _e;\n};","map":null,"metadata":{},"sourceType":"module"}