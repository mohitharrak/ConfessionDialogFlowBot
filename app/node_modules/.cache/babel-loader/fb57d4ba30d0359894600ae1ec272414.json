{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { classNamesFunction, BaseComponent, css } from '../../../Utilities';\nimport { CommandButton, IconButton } from '../../../Button';\nimport * as stylesImport from './Suggestions.scss';\nvar legacyStyles = stylesImport;\nvar getClassNames = classNamesFunction();\n\nvar SuggestionsItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SuggestionsItem, _super);\n\n  function SuggestionsItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SuggestionsItem.prototype.render = function () {\n    var _a = this.props,\n        suggestionModel = _a.suggestionModel,\n        RenderSuggestion = _a.RenderSuggestion,\n        onClick = _a.onClick,\n        className = _a.className,\n        onRemoveItem = _a.onRemoveItem,\n        isSelectedOverride = _a.isSelectedOverride,\n        removeButtonAriaLabel = _a.removeButtonAriaLabel,\n        styles = _a.styles,\n        theme = _a.theme; // TODO\n    // Clean this up by leaving only the first part after removing support for SASS.\n    // Currently we can not remove the SASS styles from SuggestionsItem class because it\n    // might be used by consumers separately from pickers extending from BasePicker\n    // and have not used the new 'styles' prop. Because it's expecting a type parameter,\n    // we can not use the 'styled' function without adding some helpers which can break\n    // downstream consumers who did not use the new helpers.\n    // We check for 'styles' prop which is going to be injected by the 'styled' HOC\n    // in Suggestions when the typed SuggestionsItem class is ready to be rendered. If the\n    // check passes we can use the CSS-in-JS styles. If the check fails (ex: custom picker),\n    // then we just use the old SASS styles instead.\n\n    var classNames = styles ? getClassNames(styles, {\n      theme: theme,\n      className: className,\n      suggested: suggestionModel.selected || isSelectedOverride\n    }) : {\n      root: css('ms-Suggestions-item', legacyStyles.suggestionsItem, (_b = {}, _b['is-suggested ' + legacyStyles.suggestionsItemIsSuggested] = suggestionModel.selected || isSelectedOverride, _b), className),\n      itemButton: css('ms-Suggestions-itemButton', legacyStyles.itemButton),\n      closeButton: css('ms-Suggestions-closeButton', legacyStyles.closeButton)\n    };\n    return React.createElement(\"div\", {\n      className: classNames.root\n    }, React.createElement(CommandButton, {\n      onClick: onClick,\n      className: classNames.itemButton\n    }, RenderSuggestion(suggestionModel.item, this.props)), this.props.showRemoveButton ? React.createElement(IconButton, {\n      iconProps: {\n        iconName: 'Cancel',\n        styles: {\n          root: {\n            fontSize: '12px'\n          }\n        }\n      },\n      title: removeButtonAriaLabel,\n      ariaLabel: removeButtonAriaLabel,\n      onClick: onRemoveItem,\n      className: classNames.closeButton\n    }) : null);\n\n    var _b;\n  };\n\n  return SuggestionsItem;\n}(BaseComponent);\n\nexport { SuggestionsItem };","map":null,"metadata":{},"sourceType":"module"}