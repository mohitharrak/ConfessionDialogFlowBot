{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { BaseComponent, css, KeyCodes } from '../../../Utilities';\nimport { SuggestionsCore } from './SuggestionsCore';\nimport * as stylesImport from './SuggestionsControl.scss'; // tslint:disable-next-line:no-any\n\nvar styles = stylesImport;\nexport var SuggestionItemType;\n\n(function (SuggestionItemType) {\n  SuggestionItemType[SuggestionItemType[\"header\"] = 0] = \"header\";\n  SuggestionItemType[SuggestionItemType[\"suggestion\"] = 1] = \"suggestion\";\n  SuggestionItemType[SuggestionItemType[\"footer\"] = 2] = \"footer\";\n})(SuggestionItemType || (SuggestionItemType = {}));\n\nvar SuggestionsHeaderFooterItem =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SuggestionsHeaderFooterItem, _super);\n\n  function SuggestionsHeaderFooterItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SuggestionsHeaderFooterItem.prototype.render = function () {\n    var _a = this.props,\n        renderItem = _a.renderItem,\n        onExecute = _a.onExecute,\n        isSelected = _a.isSelected,\n        id = _a.id,\n        className = _a.className;\n    return onExecute ? React.createElement(\"div\", {\n      id: id,\n      onClick: onExecute,\n      className: css('ms-Suggestions-sectionButton', className, styles.actionButton, (_b = {}, _b['is-selected ' + styles.buttonSelected] = isSelected, _b))\n    }, renderItem()) : React.createElement(\"div\", {\n      id: id,\n      className: css('ms-Suggestions-section', className, styles.suggestionsTitle)\n    }, renderItem());\n\n    var _b;\n  };\n\n  return SuggestionsHeaderFooterItem;\n}(BaseComponent);\n\nexport { SuggestionsHeaderFooterItem };\n/**\r\n * Class when used with SuggestionsStore, renders a suggestions control with customizable headers and footers\r\n */\n\nvar SuggestionsControl =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SuggestionsControl, _super);\n\n  function SuggestionsControl(suggestionsProps) {\n    var _this = _super.call(this, suggestionsProps) || this;\n\n    _this.SuggestionsOfProperType = SuggestionsCore;\n    _this.state = {\n      selectedHeaderIndex: -1,\n      selectedFooterIndex: -1,\n      suggestions: suggestionsProps.suggestions\n    };\n    return _this;\n  }\n\n  SuggestionsControl.prototype.componentDidMount = function () {\n    this.resetSelectedItem();\n  };\n\n  SuggestionsControl.prototype.componentDidUpdate = function () {\n    this.scrollSelected();\n  };\n\n  SuggestionsControl.prototype.componentWillReceiveProps = function (newProps) {\n    var _this = this;\n\n    if (newProps.suggestions) {\n      this.setState({\n        suggestions: newProps.suggestions\n      }, function () {\n        _this.resetSelectedItem();\n      });\n    }\n  };\n\n  SuggestionsControl.prototype.componentWillUnmount = function () {\n    this._suggestions.deselectAllSuggestions();\n  };\n\n  SuggestionsControl.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        headerItemsProps = _a.headerItemsProps,\n        footerItemsProps = _a.footerItemsProps;\n    return React.createElement(\"div\", {\n      className: css('ms-Suggestions', className ? className : '', styles.root)\n    }, headerItemsProps && this.renderHeaderItems(), this._renderSuggestions(), footerItemsProps && this.renderFooterItems());\n  };\n\n  Object.defineProperty(SuggestionsControl.prototype, \"currentSuggestion\", {\n    get: function get() {\n      return this._suggestions && this._suggestions.getCurrentItem();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SuggestionsControl.prototype, \"currentSuggestionIndex\", {\n    get: function get() {\n      return this._suggestions ? this._suggestions.currentIndex : -1;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SuggestionsControl.prototype, \"selectedElement\", {\n    get: function get() {\n      return this._selectedElement ? this._selectedElement : this._suggestions.selectedElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SuggestionsControl.prototype.hasSuggestionSelected = function () {\n    return this._suggestions && this._suggestions.hasSuggestionSelected();\n  };\n\n  SuggestionsControl.prototype.hasSelection = function () {\n    var _a = this.state,\n        selectedHeaderIndex = _a.selectedHeaderIndex,\n        selectedFooterIndex = _a.selectedFooterIndex;\n    return selectedHeaderIndex !== -1 || this.hasSuggestionSelected() || selectedFooterIndex !== -1;\n  };\n\n  SuggestionsControl.prototype.executeSelectedAction = function () {\n    var _a = this.props,\n        headerItemsProps = _a.headerItemsProps,\n        footerItemsProps = _a.footerItemsProps;\n    var _b = this.state,\n        selectedHeaderIndex = _b.selectedHeaderIndex,\n        selectedFooterIndex = _b.selectedFooterIndex;\n\n    if (headerItemsProps && selectedHeaderIndex !== -1 && selectedHeaderIndex < headerItemsProps.length) {\n      var selectedHeaderItem = headerItemsProps[selectedHeaderIndex];\n\n      if (selectedHeaderItem.onExecute) {\n        selectedHeaderItem.onExecute();\n      }\n    } else if (this._suggestions.hasSuggestionSelected()) {\n      this.props.completeSuggestion();\n    } else if (footerItemsProps && selectedFooterIndex !== -1 && selectedFooterIndex < footerItemsProps.length) {\n      var selectedFooterItem = footerItemsProps[selectedFooterIndex];\n\n      if (selectedFooterItem.onExecute) {\n        selectedFooterItem.onExecute();\n      }\n    }\n  };\n\n  SuggestionsControl.prototype.removeSuggestion = function (index) {\n    this._suggestions.removeSuggestion(index ? index : this._suggestions.currentIndex);\n  };\n  /**\r\n   * Handles the key down, returns true, if the event was handled, false otherwise\r\n   * @param keyCode - The keyCode to handle\r\n   */\n\n\n  SuggestionsControl.prototype.handleKeyDown = function (keyCode) {\n    var _a = this.state,\n        selectedHeaderIndex = _a.selectedHeaderIndex,\n        selectedFooterIndex = _a.selectedFooterIndex;\n    var isKeyDownHandled = false;\n\n    if (keyCode === KeyCodes.down) {\n      if (selectedHeaderIndex === -1 && !this._suggestions.hasSuggestionSelected() && selectedFooterIndex === -1) {\n        this.selectFirstItem();\n      } else if (selectedHeaderIndex !== -1) {\n        this.selectNextItem(SuggestionItemType.header);\n        isKeyDownHandled = true;\n      } else if (this._suggestions.hasSuggestionSelected()) {\n        this.selectNextItem(SuggestionItemType.suggestion);\n        isKeyDownHandled = true;\n      } else if (selectedFooterIndex !== -1) {\n        this.selectNextItem(SuggestionItemType.footer);\n        isKeyDownHandled = true;\n      }\n    } else if (keyCode === KeyCodes.up) {\n      if (selectedHeaderIndex === -1 && !this._suggestions.hasSuggestionSelected() && selectedFooterIndex === -1) {\n        this.selectLastItem();\n      } else if (selectedHeaderIndex !== -1) {\n        this.selectPreviousItem(SuggestionItemType.header);\n        isKeyDownHandled = true;\n      } else if (this._suggestions.hasSuggestionSelected()) {\n        this.selectPreviousItem(SuggestionItemType.suggestion);\n        isKeyDownHandled = true;\n      } else if (selectedFooterIndex !== -1) {\n        this.selectPreviousItem(SuggestionItemType.footer);\n        isKeyDownHandled = true;\n      }\n    } else if (keyCode === KeyCodes.enter || keyCode === KeyCodes.tab) {\n      if (this.hasSelection()) {\n        this.executeSelectedAction();\n        isKeyDownHandled = true;\n      }\n    }\n\n    return isKeyDownHandled;\n  }; // TODO get the element to scroll into view properly regardless of direction.\n\n\n  SuggestionsControl.prototype.scrollSelected = function () {\n    if (this._selectedElement) {\n      this._selectedElement.scrollIntoView(false);\n    }\n  };\n\n  SuggestionsControl.prototype.renderHeaderItems = function () {\n    var _this = this;\n\n    var _a = this.props,\n        headerItemsProps = _a.headerItemsProps,\n        suggestionsHeaderContainerAriaLabel = _a.suggestionsHeaderContainerAriaLabel;\n    var selectedHeaderIndex = this.state.selectedHeaderIndex;\n    return headerItemsProps ? React.createElement(\"div\", {\n      className: css('ms-Suggestions-headerContainer', styles.suggestionsContainer),\n      id: \"suggestionHeader-list\",\n      role: \"list\",\n      \"aria-label\": suggestionsHeaderContainerAriaLabel\n    }, headerItemsProps.map(function (headerItemProps, index) {\n      var isSelected = selectedHeaderIndex !== -1 && selectedHeaderIndex === index;\n      return headerItemProps.shouldShow() ? React.createElement(\"div\", {\n        ref: _this._resolveRef(isSelected ? '_selectedElement' : ''),\n        id: 'sug-header' + index,\n        key: 'sug-header' + index,\n        role: \"listitem\",\n        \"aria-label\": headerItemProps.ariaLabel\n      }, React.createElement(SuggestionsHeaderFooterItem, {\n        id: 'sug-header-item' + index,\n        isSelected: isSelected,\n        renderItem: headerItemProps.renderItem,\n        onExecute: headerItemProps.onExecute,\n        className: headerItemProps.className\n      })) : null;\n    })) : null;\n  };\n\n  SuggestionsControl.prototype.renderFooterItems = function () {\n    var _this = this;\n\n    var _a = this.props,\n        footerItemsProps = _a.footerItemsProps,\n        suggestionsFooterContainerAriaLabel = _a.suggestionsFooterContainerAriaLabel;\n    var selectedFooterIndex = this.state.selectedFooterIndex;\n    return footerItemsProps ? React.createElement(\"div\", {\n      className: css('ms-Suggestions-footerContainer', styles.suggestionsContainer),\n      id: \"suggestionFooter-list\",\n      role: \"list\",\n      \"aria-label\": suggestionsFooterContainerAriaLabel\n    }, footerItemsProps.map(function (footerItemProps, index) {\n      var isSelected = selectedFooterIndex !== -1 && selectedFooterIndex === index;\n      return footerItemProps.shouldShow() ? React.createElement(\"div\", {\n        ref: _this._resolveRef(isSelected ? '_selectedElement' : ''),\n        id: 'sug-footer' + index,\n        key: 'sug-footer' + index,\n        role: \"listitem\",\n        \"aria-label\": footerItemProps.ariaLabel\n      }, React.createElement(SuggestionsHeaderFooterItem, {\n        id: 'sug-footer-item' + index,\n        isSelected: isSelected,\n        renderItem: footerItemProps.renderItem,\n        onExecute: footerItemProps.onExecute,\n        className: footerItemProps.className\n      })) : null;\n    })) : null;\n  };\n\n  SuggestionsControl.prototype._renderSuggestions = function () {\n    var TypedSuggestions = this.SuggestionsOfProperType;\n    return React.createElement(TypedSuggestions, tslib_1.__assign({\n      ref: this._resolveRef('_suggestions')\n    }, this.props, {\n      suggestions: this.state.suggestions\n    }));\n  };\n  /**\r\n   * Selects the next selectable item\r\n   */\n\n\n  SuggestionsControl.prototype.selectNextItem = function (itemType, originalItemType) {\n    // If the recursive calling has not found a selectable item in the other suggestion item type groups\n    // And the method is being called again with the original item type,\n    // Select the first selectable item of this suggestion item type group (could be the currently selected item)\n    if (itemType === originalItemType) {\n      this._selectNextItemOfItemType(itemType);\n\n      return;\n    }\n\n    var startedItemType = originalItemType !== undefined ? originalItemType : itemType; // Try to set the selection to the next selectable item, of the same suggestion item type group\n    // If this is the original item type, use the current index\n\n    var selectionChanged = this._selectNextItemOfItemType(itemType, startedItemType === itemType ? this._getCurrentIndexForType(itemType) : undefined); // If the selection did not change, try to select from the next suggestion type group\n\n\n    if (!selectionChanged) {\n      this.selectNextItem(this._getNextItemSectionType(itemType), startedItemType);\n    }\n  };\n  /**\r\n   * Selects the previous selectable item\r\n   */\n\n\n  SuggestionsControl.prototype.selectPreviousItem = function (itemType, originalItemType) {\n    // If the recursive calling has not found a selectable item in the other suggestion item type groups\n    // And the method is being called again with the original item type,\n    // Select the last selectable item of this suggestion item type group (could be the currently selected item)\n    if (itemType === originalItemType) {\n      this._selectPreviousItemOfItemType(itemType);\n\n      return;\n    }\n\n    var startedItemType = originalItemType !== undefined ? originalItemType : itemType; // Try to set the selection to the previous selectable item, of the same suggestion item type group\n\n    var selectionChanged = this._selectPreviousItemOfItemType(itemType, startedItemType === itemType ? this._getCurrentIndexForType(itemType) : undefined); // If the selection did not change, try to select from the previous suggestion type group\n\n\n    if (!selectionChanged) {\n      this.selectPreviousItem(this._getPreviousItemSectionType(itemType), startedItemType);\n    }\n  };\n  /**\r\n   * Resets the selected state and selects the first selectable item\r\n   */\n\n\n  SuggestionsControl.prototype.resetSelectedItem = function () {\n    this.setState({\n      selectedHeaderIndex: -1,\n      selectedFooterIndex: -1\n    });\n\n    this._suggestions.deselectAllSuggestions(); // Select the first item if the shouldSelectFirstItem prop is not set or it is set and it returns true\n\n\n    if (this.props.shouldSelectFirstItem === undefined || this.props.shouldSelectFirstItem()) {\n      this.selectFirstItem();\n    }\n  };\n  /**\r\n   * Selects the first item\r\n   */\n\n\n  SuggestionsControl.prototype.selectFirstItem = function () {\n    if (this._selectNextItemOfItemType(SuggestionItemType.header)) {\n      return;\n    }\n\n    if (this._selectNextItemOfItemType(SuggestionItemType.suggestion)) {\n      return;\n    }\n\n    this._selectNextItemOfItemType(SuggestionItemType.footer);\n  };\n  /**\r\n   * Selects the last item\r\n   */\n\n\n  SuggestionsControl.prototype.selectLastItem = function () {\n    if (this._selectPreviousItemOfItemType(SuggestionItemType.footer)) {\n      return;\n    }\n\n    if (this._selectPreviousItemOfItemType(SuggestionItemType.suggestion)) {\n      return;\n    }\n\n    this._selectPreviousItemOfItemType(SuggestionItemType.header);\n  };\n  /**\r\n   * Selects the next item in the suggestion item type group, given the current index\r\n   * If none is able to be selected, returns false, otherwise returns true\r\n   * @param itemType - The suggestion item type\r\n   * @param currentIndex - The current index, default is -1\r\n   */\n\n\n  SuggestionsControl.prototype._selectNextItemOfItemType = function (itemType, currentIndex) {\n    if (currentIndex === void 0) {\n      currentIndex = -1;\n    }\n\n    if (itemType === SuggestionItemType.suggestion) {\n      if (this.state.suggestions.length > currentIndex + 1) {\n        this._suggestions.setSelectedSuggestion(currentIndex + 1);\n\n        this.setState({\n          selectedHeaderIndex: -1,\n          selectedFooterIndex: -1\n        });\n        return true;\n      }\n    } else {\n      var isHeader = itemType === SuggestionItemType.header;\n      var itemProps = isHeader ? this.props.headerItemsProps : this.props.footerItemsProps;\n\n      if (itemProps && itemProps.length > currentIndex + 1) {\n        for (var i = currentIndex + 1; i < itemProps.length; i++) {\n          var item = itemProps[i];\n\n          if (item.onExecute && item.shouldShow()) {\n            this.setState({\n              selectedHeaderIndex: isHeader ? i : -1\n            });\n            this.setState({\n              selectedFooterIndex: isHeader ? -1 : i\n            });\n\n            this._suggestions.deselectAllSuggestions();\n\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Selects the previous item in the suggestion item type group, given the current index\r\n   * If none is able to be selected, returns false, otherwise returns true\r\n   * @param itemType - The suggestion item type\r\n   * @param currentIndex - The current index. If none is provided, the default is the items length of specified type\r\n   */\n\n\n  SuggestionsControl.prototype._selectPreviousItemOfItemType = function (itemType, currentIndex) {\n    if (itemType === SuggestionItemType.suggestion) {\n      var index = currentIndex !== undefined ? currentIndex : this.state.suggestions.length;\n\n      if (index > 0) {\n        this._suggestions.setSelectedSuggestion(index - 1);\n\n        this.setState({\n          selectedHeaderIndex: -1,\n          selectedFooterIndex: -1\n        });\n        return true;\n      }\n    } else {\n      var isHeader = itemType === SuggestionItemType.header;\n      var itemProps = isHeader ? this.props.headerItemsProps : this.props.footerItemsProps;\n\n      if (itemProps) {\n        var index = currentIndex !== undefined ? currentIndex : itemProps.length;\n\n        if (index > 0) {\n          for (var i = index - 1; i >= 0; i--) {\n            var item = itemProps[i];\n\n            if (item.onExecute && item.shouldShow()) {\n              this.setState({\n                selectedHeaderIndex: isHeader ? i : -1\n              });\n              this.setState({\n                selectedFooterIndex: isHeader ? -1 : i\n              });\n\n              this._suggestions.deselectAllSuggestions();\n\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  SuggestionsControl.prototype._getCurrentIndexForType = function (itemType) {\n    switch (itemType) {\n      case SuggestionItemType.header:\n        return this.state.selectedHeaderIndex;\n\n      case SuggestionItemType.suggestion:\n        return this._suggestions.currentIndex;\n\n      case SuggestionItemType.footer:\n        return this.state.selectedFooterIndex;\n    }\n  };\n\n  SuggestionsControl.prototype._getNextItemSectionType = function (itemType) {\n    switch (itemType) {\n      case SuggestionItemType.header:\n        return SuggestionItemType.suggestion;\n\n      case SuggestionItemType.suggestion:\n        return SuggestionItemType.footer;\n\n      case SuggestionItemType.footer:\n        return SuggestionItemType.header;\n    }\n  };\n\n  SuggestionsControl.prototype._getPreviousItemSectionType = function (itemType) {\n    switch (itemType) {\n      case SuggestionItemType.header:\n        return SuggestionItemType.footer;\n\n      case SuggestionItemType.suggestion:\n        return SuggestionItemType.header;\n\n      case SuggestionItemType.footer:\n        return SuggestionItemType.suggestion;\n    }\n  };\n\n  return SuggestionsControl;\n}(BaseComponent);\n\nexport { SuggestionsControl };","map":null,"metadata":{},"sourceType":"module"}