{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { css, getId } from '../../Utilities';\nimport { CommandButton } from '../../Button';\n\nvar GridCell =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(GridCell, _super);\n\n  function GridCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._onClick = function () {\n      var _a = _this.props,\n          onClick = _a.onClick,\n          disabled = _a.disabled,\n          item = _a.item;\n\n      if (onClick && !disabled) {\n        onClick(item);\n      }\n    };\n\n    _this._onMouseEnter = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          item = _a.item,\n          onMouseEnter = _a.onMouseEnter;\n      var didUpdateOnEnter = onMouseEnter && onMouseEnter(ev);\n\n      if (!didUpdateOnEnter && onHover && !disabled) {\n        onHover(item);\n      }\n    };\n\n    _this._onMouseMove = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          item = _a.item,\n          onMouseMove = _a.onMouseMove;\n      var didUpdateOnMove = onMouseMove && onMouseMove(ev);\n\n      if (!didUpdateOnMove && onHover && !disabled) {\n        onHover(item);\n      }\n    };\n\n    _this._onMouseLeave = function (ev) {\n      var _a = _this.props,\n          onHover = _a.onHover,\n          disabled = _a.disabled,\n          onMouseLeave = _a.onMouseLeave;\n      var didUpdateOnLeave = onMouseLeave && onMouseLeave(ev);\n\n      if (!didUpdateOnLeave && onHover && !disabled) {\n        onHover();\n      }\n    };\n\n    _this._onFocus = function () {\n      var _a = _this.props,\n          onFocus = _a.onFocus,\n          disabled = _a.disabled,\n          item = _a.item;\n\n      if (onFocus && !disabled) {\n        onFocus(item);\n      }\n    };\n\n    return _this;\n  }\n\n  GridCell.prototype.render = function () {\n    var _a = this.props,\n        item = _a.item,\n        id = _a.id,\n        className = _a.className,\n        role = _a.role,\n        selected = _a.selected,\n        disabled = _a.disabled,\n        onRenderItem = _a.onRenderItem,\n        cellDisabledStyle = _a.cellDisabledStyle,\n        cellIsSelectedStyle = _a.cellIsSelectedStyle,\n        index = _a.index,\n        label = _a.label,\n        getClassNames = _a.getClassNames;\n    return React.createElement(CommandButton, {\n      id: id,\n      \"data-index\": index,\n      \"data-is-focusable\": true,\n      disabled: disabled,\n      className: css(className, (_b = {}, _b['' + cellIsSelectedStyle] = selected, _b['' + cellDisabledStyle] = disabled, _b)),\n      onClick: this._onClick,\n      onMouseEnter: this._onMouseEnter,\n      onMouseMove: this._onMouseMove,\n      onMouseLeave: this._onMouseLeave,\n      onFocus: this._onFocus,\n      role: role,\n      \"aria-selected\": selected,\n      ariaLabel: label,\n      title: label,\n      getClassNames: getClassNames\n    }, onRenderItem(item));\n\n    var _b;\n  };\n\n  GridCell.defaultProps = {\n    disabled: false,\n    id: getId('gridCell')\n  };\n  return GridCell;\n}(React.Component);\n\nexport { GridCell };","map":null,"metadata":{},"sourceType":"module"}