{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as React from 'react';\nimport { Async, BaseComponent, classNamesFunction, findIndex, KeyCodes, getId } from '../../Utilities';\nimport { Grid } from '../../utilities/grid/Grid';\nimport { ColorPickerGridCell } from './ColorPickerGridCell';\nvar getClassNames = classNamesFunction();\n\nvar SwatchColorPickerBase =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(SwatchColorPickerBase, _super);\n\n  function SwatchColorPickerBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.navigationIdleDelay = 250\n    /* ms */\n    ;\n    /**\r\n     * When the whole swatchColorPicker is blurred,\r\n     * make sure to clear the pending focused stated\r\n     */\n\n    _this._onSwatchColorPickerBlur = function () {\n      if (_this.props.onCellFocused) {\n        _this._cellFocused = false;\n\n        _this.props.onCellFocused();\n      }\n    };\n    /**\r\n     * Render a color cell\r\n     * @param item - The item to render\r\n     * @returns - Element representing the item\r\n     */\n\n\n    _this._renderOption = function (item) {\n      var id = _this._id;\n      return React.createElement(ColorPickerGridCell, {\n        item: item,\n        id: id,\n        color: item.color,\n        styles: _this.props.getColorGridCellStyles,\n        disabled: _this.props.disabled,\n        onClick: _this._onCellClick,\n        onHover: _this._onGridCellHovered,\n        onFocus: _this._onGridCellFocused,\n        selected: _this.state.selectedIndex !== undefined && _this.state.selectedIndex === item.index,\n        circle: _this.props.cellShape === 'circle',\n        label: item.label,\n        onMouseEnter: _this._onMouseEnter,\n        onMouseMove: _this._onMouseMove,\n        onMouseLeave: _this._onMouseLeave,\n        onWheel: _this._onWheel,\n        onKeyDown: _this._onKeyDown,\n        height: _this.props.cellHeight,\n        width: _this.props.cellWidth,\n        borderWidth: _this.props.cellBorderWidth\n      });\n    };\n    /**\r\n     * Callback passed to the GridCell that will manage triggering the onCellHovered callback for mouseEnter\r\n     */\n\n\n    _this._onMouseEnter = function (ev) {\n      if (!_this.props.focusOnHover) {\n        if (!_this.isNavigationIdle || _this.props.disabled) {\n          return true;\n        }\n\n        return false;\n      }\n\n      if (_this.isNavigationIdle && !_this.props.disabled) {\n        ev.currentTarget.focus();\n      }\n\n      return true;\n    };\n    /**\r\n     * Callback passed to the GridCell that will manage Hover/Focus updates\r\n     */\n\n\n    _this._onMouseMove = function (ev) {\n      if (!_this.props.focusOnHover) {\n        if (!_this.isNavigationIdle || _this.props.disabled) {\n          return true;\n        }\n\n        return false;\n      }\n\n      var targetElement = ev.currentTarget; // If navigation is idle and the targetElement is the focused element bail out\n      // if (!this.isNavigationIdle || (document && targetElement === (document.activeElement as HTMLElement))) {\n\n      if (_this.isNavigationIdle && !(document && targetElement === document.activeElement)) {\n        targetElement.focus();\n      }\n\n      return true;\n    };\n    /**\r\n     * Callback passed to the GridCell that will manage Hover/Focus updates\r\n     */\n\n\n    _this._onMouseLeave = function (ev) {\n      var parentSelector = _this.props.mouseLeaveParentSelector;\n\n      if (!_this.props.focusOnHover || !parentSelector || !_this.isNavigationIdle || _this.props.disabled) {\n        return;\n      } // Get the the elements that math the given selector\n\n\n      var elements = document.querySelectorAll(parentSelector); // iterate over the elements return to make sure it is a parent of the target and focus it\n\n      for (var index = 0; index < elements.length; index += 1) {\n        if (elements[index].contains(ev.currentTarget)) {\n          /**\r\n           * IE11 focus() method forces parents to scroll to top of element.\r\n           * Edge and IE expose a setActive() function for focusable divs that\r\n           * sets the page focus but does not scroll the parent element.\r\n           */\n          if (elements[index].setActive) {\n            try {\n              elements[index].setActive();\n            } catch (e) {\n              /* no-op */\n            }\n          } else {\n            elements[index].focus();\n          }\n\n          break;\n        }\n      }\n    };\n    /**\r\n     * Callback to make sure we don't update the hovered element during mouse wheel\r\n     */\n\n\n    _this._onWheel = function () {\n      _this.setNavigationTimeout();\n    };\n    /**\r\n     * Callback that\r\n     */\n\n\n    _this._onKeyDown = function (ev) {\n      if (ev.which === KeyCodes.up || ev.which === KeyCodes.down || ev.which === KeyCodes.left || ev.which === KeyCodes.right) {\n        _this.setNavigationTimeout();\n      }\n    };\n    /**\r\n     * Sets a timeout so we won't process any mouse \"hover\" events\r\n     * while navigating (via mouseWheel or arrowKeys)\r\n     */\n\n\n    _this.setNavigationTimeout = function () {\n      if (!_this.isNavigationIdle && _this.navigationIdleTimeoutId !== undefined) {\n        _this.async.clearTimeout(_this.navigationIdleTimeoutId);\n\n        _this.navigationIdleTimeoutId = undefined;\n      } else {\n        _this.isNavigationIdle = false;\n      }\n\n      _this.navigationIdleTimeoutId = _this.async.setTimeout(function () {\n        _this.isNavigationIdle = true;\n      }, _this.navigationIdleDelay);\n    };\n    /**\r\n     * Callback passed to the GridCell class that will trigger the onCellHovered callback of the SwatchColorPicker\r\n     * NOTE: This will not be triggered if shouldFocusOnHover === true\r\n     */\n\n\n    _this._onGridCellHovered = function (item) {\n      var onCellHovered = _this.props.onCellHovered;\n\n      if (onCellHovered) {\n        return item ? onCellHovered(item.id, item.color) : onCellHovered();\n      }\n    };\n    /**\r\n     * Callback passed to the GridCell class that will trigger the onCellFocus callback of the SwatchColorPicker\r\n     */\n\n\n    _this._onGridCellFocused = function (item) {\n      var onCellFocused = _this.props.onCellFocused;\n\n      if (onCellFocused) {\n        if (item) {\n          _this._cellFocused = true;\n          return onCellFocused(item.id, item.color);\n        } else {\n          _this._cellFocused = false;\n          return onCellFocused();\n        }\n      }\n    };\n    /**\r\n     * Handle the click on a cell\r\n     * @param item - The cell that the click was fired against\r\n     */\n\n\n    _this._onCellClick = function (item) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      var index = item.index; // If we have a valid index and it is not already\n      // selected, select it\n\n      if (index >= 0 && index !== _this.state.selectedIndex) {\n        if (_this.props.onCellFocused && _this._cellFocused) {\n          _this._cellFocused = false;\n\n          _this.props.onCellFocused();\n        }\n\n        if (_this.props.onColorChanged) {\n          _this.props.onColorChanged(item.id, item.color);\n        }\n\n        _this.setState({\n          selectedIndex: index\n        });\n      }\n    };\n\n    _this._id = props.id || getId('swatchColorPicker');\n\n    _this._warnMutuallyExclusive({\n      focusOnHover: 'onHover'\n    });\n\n    _this._warnConditionallyRequiredProps(['focusOnHover'], 'mouseLeaveParentSelector', !!_this.props.mouseLeaveParentSelector);\n\n    _this.isNavigationIdle = true;\n    _this.async = new Async(_this);\n    var selectedIndex;\n\n    if (props.selectedId) {\n      selectedIndex = _this._getSelectedIndex(props.colorCells, props.selectedId);\n    }\n\n    _this.state = {\n      selectedIndex: selectedIndex\n    };\n    return _this;\n  }\n\n  SwatchColorPickerBase.prototype.componentWillReceiveProps = function (newProps) {\n    if (newProps.selectedId !== undefined) {\n      this.setState({\n        selectedIndex: this._getSelectedIndex(newProps.colorCells, newProps.selectedId)\n      });\n    }\n  };\n\n  SwatchColorPickerBase.prototype.componentWillUnmount = function () {\n    if (this.props.onCellFocused && this._cellFocused) {\n      this._cellFocused = false;\n      this.props.onCellFocused();\n    }\n  };\n\n  SwatchColorPickerBase.prototype.render = function () {\n    var _a = this.props,\n        colorCells = _a.colorCells,\n        columnCount = _a.columnCount,\n        positionInSet = _a.positionInSet,\n        setSize = _a.setSize,\n        shouldFocusCircularNavigate = _a.shouldFocusCircularNavigate,\n        className = _a.className,\n        doNotContainWithinFocusZone = _a.doNotContainWithinFocusZone,\n        styles = _a.styles,\n        cellMargin = _a.cellMargin;\n    var classNames = getClassNames(styles, {\n      theme: this.props.theme,\n      className: className,\n      cellMargin: cellMargin\n    });\n\n    if (colorCells.length < 1 || columnCount < 1) {\n      return null;\n    }\n\n    return React.createElement(Grid, tslib_1.__assign({}, this.props, {\n      items: colorCells.map(function (item, index) {\n        return tslib_1.__assign({}, item, {\n          index: index\n        });\n      }),\n      columnCount: columnCount,\n      onRenderItem: this._renderOption,\n      positionInSet: positionInSet && positionInSet,\n      setSize: setSize && setSize,\n      shouldFocusCircularNavigate: shouldFocusCircularNavigate,\n      doNotContainWithinFocusZone: doNotContainWithinFocusZone,\n      onBlur: this._onSwatchColorPickerBlur,\n      theme: this.props.theme,\n      // tslint:disable-next-line:jsx-no-lambda\n      styles: function styles(props) {\n        return {\n          root: classNames.root,\n          tableCell: classNames.tableCell,\n          focusedContainer: classNames.focusedContainer\n        };\n      }\n    }));\n  };\n  /**\r\n   * Get the selected item's index\r\n   * @param items - The items to search\r\n   * @param selectedId - The selected item's id to find\r\n   * @returns - The index of the selected item's id, -1 if there was no match\r\n   */\n\n\n  SwatchColorPickerBase.prototype._getSelectedIndex = function (items, selectedId) {\n    var selectedIndex = findIndex(items, function (item) {\n      return item.id === selectedId;\n    });\n    return selectedIndex >= 0 ? selectedIndex : undefined;\n  };\n\n  SwatchColorPickerBase.defaultProps = {\n    cellShape: 'circle',\n    disabled: false,\n    shouldFocusCircularNavigate: true,\n    cellMargin: 10\n  };\n  return SwatchColorPickerBase;\n}(BaseComponent);\n\nexport { SwatchColorPickerBase };","map":null,"metadata":{},"sourceType":"module"}